[
    {
        "pass@1": 0.088,
        "pass@5": 0.143718820861678,
        "pass@10": 0.1657142857142857,
        "detail": {
            "pass@1": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.9,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 0.09999999999999998,
                "17": 0.0,
                "18": 0.09999999999999998,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 0.7999999999999999,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 0.09999999999999998,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 1.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 0.4,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 0.9,
                "64": 0.0,
                "65": 0.0,
                "66": 0.0,
                "67": 0.30000000000000004,
                "68": 0.20000000000000007,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 0.7999999999999999,
                "75": 0.4,
                "76": 0.0,
                "77": 0.0,
                "78": 0.0,
                "79": 0.0,
                "80": 0.0,
                "81": 0.5999999999999999,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 0.30000000000000004,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 0.5999999999999999,
                "94": 0.5999999999999999,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 0.09999999999999998,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 0.4,
                "105": 1.0,
                "106": 0.0,
                "107": 0.30000000000000004,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 0.0,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 0.30000000000000004,
                "117": 0.0,
                "118": 0.0,
                "119": 0.20000000000000007,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 0.09999999999999998,
                "135": 0.0,
                "136": 0.7999999999999999,
                "137": 0.0,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 0.09999999999999998,
                "142": 0.0,
                "143": 1.0,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            },
            "pass@5": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 1.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 0.5,
                "17": 0.0,
                "18": 0.5,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 1.0,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 0.5,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 1.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 0.9761904761904762,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 1.0,
                "64": 0.0,
                "65": 0.0,
                "66": 0.0,
                "67": 0.9166666666666666,
                "68": 0.7777777777777778,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 1.0,
                "75": 0.9761904761904762,
                "76": 0.0,
                "77": 0.0,
                "78": 0.0,
                "79": 0.0,
                "80": 0.0,
                "81": 1.0,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 0.9166666666666666,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 1.0,
                "94": 1.0,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 0.5,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 0.9761904761904762,
                "105": 1.0,
                "106": 0.0,
                "107": 0.9166666666666666,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 0.0,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 0.9166666666666666,
                "117": 0.0,
                "118": 0.0,
                "119": 0.7777777777777778,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 0.5,
                "135": 0.0,
                "136": 1.0,
                "137": 0.0,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 0.5,
                "142": 0.0,
                "143": 1.0,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            },
            "pass@10": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 1.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 1.0,
                "17": 0.0,
                "18": 1.0,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 1.0,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 1.0,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 1.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 1.0,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 1.0,
                "64": 0.0,
                "65": 0.0,
                "66": 0.0,
                "67": 1.0,
                "68": 1.0,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 1.0,
                "75": 1.0,
                "76": 0.0,
                "77": 0.0,
                "78": 0.0,
                "79": 0.0,
                "80": 0.0,
                "81": 1.0,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 1.0,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 1.0,
                "94": 1.0,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 1.0,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 1.0,
                "105": 1.0,
                "106": 0.0,
                "107": 1.0,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 0.0,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 1.0,
                "117": 0.0,
                "118": 0.0,
                "119": 1.0,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 1.0,
                "135": 0.0,
                "136": 1.0,
                "137": 0.0,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 1.0,
                "142": 0.0,
                "143": 1.0,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            }
        }
    },
    {
        "0": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "1": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "2": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "3": [
            [
                -3
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "4": [
            [
                true,
                -4
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                -4
            ],
            [
                true,
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "5": [
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "6": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "7": [
            [
                true,
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ]
        ],
        "8": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "9": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                -3
            ]
        ],
        "10": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ]
        ],
        "11": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                -3
            ]
        ],
        "12": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "13": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "14": [
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "15": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "16": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "17": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "18": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "19": [
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "20": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "21": [
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ]
        ],
        "22": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "23": [
            [
                true,
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ]
        ],
        "24": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "25": [
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "26": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "27": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "28": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "29": [
            [
                -4
            ],
            [
                true,
                true,
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                false
            ]
        ],
        "30": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "31": [
            [
                true,
                true,
                -3
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "32": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "33": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ]
        ],
        "34": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "35": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "36": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "37": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "38": [
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "39": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "40": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "41": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "42": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "43": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "44": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "45": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "46": [
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ]
        ],
        "47": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "48": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "49": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "50": [
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ]
        ],
        "51": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "52": [
            [
                false
            ],
            [
                false
            ],
            [
                -3
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "53": [
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ]
        ],
        "54": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "55": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "56": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "57": [
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ]
        ],
        "58": [
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "59": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ]
        ],
        "60": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "61": [
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "62": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "63": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ]
        ],
        "64": [
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ]
        ],
        "65": [
            [
                -2
            ],
            [
                true,
                true,
                -3
            ],
            [
                -4
            ],
            [
                true,
                true,
                -3
            ],
            [
                -4
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                -3
            ]
        ],
        "66": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "67": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "68": [
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "69": [
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "70": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "71": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "72": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "73": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "74": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "75": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "76": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "77": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "78": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "79": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "80": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "81": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "82": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "83": [
            [
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "84": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "85": [
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ]
        ],
        "86": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                -3
            ],
            [
                -4
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ]
        ],
        "87": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ]
        ],
        "88": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "89": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "90": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "91": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                -4
            ]
        ],
        "92": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "93": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "94": [
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ]
        ],
        "95": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "96": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "97": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "98": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "99": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "100": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "101": [
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "102": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "103": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ]
        ],
        "104": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "105": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "106": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "107": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "108": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "109": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "110": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "111": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "112": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "113": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                -4
            ],
            [
                -2
            ]
        ],
        "114": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "115": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "116": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "117": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "118": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "119": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "120": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "121": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "122": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "123": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "124": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "125": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "126": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "127": [
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "128": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "129": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "130": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "131": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ]
        ],
        "132": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "133": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ]
        ],
        "134": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "135": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "136": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "137": [
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "138": [
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "139": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "140": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "141": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "142": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "143": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "144": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "145": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "146": [
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ]
        ],
        "147": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "148": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "149": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "150": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "151": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "152": [
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ]
        ],
        "153": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "154": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "155": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "156": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "157": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "158": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "159": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "160": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "161": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "162": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "163": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "164": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "165": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "166": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "167": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "168": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "169": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ]
        ],
        "170": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "171": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "172": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "173": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "174": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ]
    },
    [
        [
            "{\"output\": \"142\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"142\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\"}",
            "{\"output\": \"21\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"21\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"21\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"41\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"21\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[4, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 4]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[2, 0]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[5, inf]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 4]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 3]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: no binding for nonlocal 'second_longest' found (<string>, line 50)\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"['8726926747191870804993549095365828922476887682967503003186341779819468902721071787605668281542430495225348833228982851175803872061893187445014680093...(truncated) ...1925855212321305676386019890296905317865320904281123437945582392938868343709247798844868255133103547324180961477615090062453541919055369350366540654']\", \"expected\": \"20567925\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"['8726926747191870804993549095365828922476887682967503003186341779819468902721071787605668281542430495225348833228982851175803872061893187445014680093...(truncated) ...1925855212321305676386019890296905317865320904281123437945582392938868343709247798844868255133103547324180961477615090062453541919055369350366540654']\", \"expected\": \"20567925\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[8, 4], [10, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ValueError('No multiple of an element in nums_set is greater than or equal to num')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 2]]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 2]]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 2]]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 2]]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 50]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[3, 9, 2, 1, 7], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[3, 9, 2, 1, 7], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[3, 9, 2, 1, 7], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 50]\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[3, 9, 2, 1, 7], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[3, 9, 2, 1, 7], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\"}",
            "{\"output\": \"[1, 2, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 3, 4, 3, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[[2, 1], [2, 1], [2, 1]]]\", \"expected\": \"[2, 1, 2]\"}"
        ],
        [
            "{\"execution time\": 0.00011706352233886719}",
            "{\"execution time\": 0.00012111663818359375}",
            "{\"execution time\": 8.344650268554688e-05}",
            "{\"execution time\": 0.00010228157043457031}",
            "{\"execution time\": 0.00012040138244628906}",
            "{\"execution time\": 9.679794311523438e-05}",
            "{\"execution time\": 0.0001251697540283203}",
            "{\"execution time\": 0.0001232624053955078}",
            "{\"execution time\": 0.00010728836059570312}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\"}"
        ],
        [
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[0, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 7, 9, 9, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20...(truncated) ... 488, 488, 488, 488, 490, 491, 491, 491, 492, 493, 494, 495, 495, 496, 496, 497, 497, 497, 497, 497, 497, 497, 498, 498, 499, 499, 499, 499, 499], 49]\", \"expected\": \"312479942\"}"
        ],
        [
            "{\"output\": \"inf\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[5, [[0, 1, 1], [0, 2, 2], [0, 3, 1], [0, 4, 1], [1, 2, 1], [1, 4, 1]], 1]\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[5, [[0, 1, 1], [0, 2, 2], [0, 3, 1], [0, 4, 1], [1, 2, 1], [1, 4, 1]], 1]\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"output\": \"[1, 1]\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"18\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"18\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"11\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0009121894836425781}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"24\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0017740726470947266}",
            "{\"output\": \"1\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\"}",
            "{\"output\": \"3\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\"}",
            "{\"output\": \"3\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"256\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"None\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"192\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"28\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\"}",
            "{\"output\": \"1\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"AttributeError(\\\"'Solution' object has no attribute 'minOperationsForQuery'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}",
            "{\"output\": \"2\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"AttributeError(\\\"'Solution' object has no attribute 'min_operations_for_query'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not iterable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not iterable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 4]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 4]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.00023865699768066406}",
            "{\"execution time\": 0.0009918212890625}",
            "{\"execution time\": 0.0004673004150390625}",
            "{\"execution time\": 0.0007610321044921875}",
            "{\"execution time\": 0.00027441978454589844}",
            "{\"execution time\": 0.0004451274871826172}",
            "{\"execution time\": 0.0004901885986328125}",
            "{\"execution time\": 0.0004937648773193359}"
        ],
        [
            "{\"output\": \"[[1, 0, 3], [0, 8, 0], [4, 0, 6]]\", \"inputs\": \"[[[1, 7, 3], [9, 8, 2], [4, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 7, 3], [9, 8, 2], [4, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\"}",
            "{\"output\": \"[[9, 7, 3], [6, 1, 2], [5, 6, 4]]\", \"inputs\": \"[[[9, 7, 3], [6, 1, 2], [5, 6, 4]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 7, 3], [9, 8, 2], [4, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 7, 3], [9, 8, 2], [4, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\"}",
            "{\"output\": \"[[1, 5, 2], [4, 7, 3], [9, 8, 6]]\", \"inputs\": \"[[[1, 5, 2], [4, 7, 3], [9, 8, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[3, 4, 5], [7, 1, 2], [6, 6, 1]]\", \"inputs\": \"[[[3, 4, 5], [7, 1, 2], [6, 6, 1]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 0, 3], [0, 8, 0], [4, 0, 6]]\", \"inputs\": \"[[[1, 7, 3], [9, 8, 2], [4, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[8, 7, 6], [9, 4, 2], [3, 5, 1]]\", \"inputs\": \"[[[8, 7, 6], [9, 4, 2], [3, 5, 1]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 7, 8], [9, 4, 2], [3, 5, 6]]\", \"inputs\": \"[[[1, 7, 8], [9, 4, 2], [3, 5, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[-1, 2, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 2, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 4, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 0, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 0, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 0, 0]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 0, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 2, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, -1, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-1, 2, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[2, 2, 2, 3, 3, 4, 4, 5, 5, 10], 10]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\"}",
            "{\"output\": \"0\", \"inputs\": \"['mwm']\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['mwm']\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['mwm']\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.000278472900390625}",
            "{\"output\": \"0\", \"inputs\": \"['mwm']\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\"}",
            "{\"output\": \"0\", \"inputs\": \"['mwm']\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"output\": \"1\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"18\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"output\": \"1\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"23\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[724535, 924352, 833937, 593146, 457701, 895562, 100324, 535818, 877996, 509770, 197191, 292533, 886540, 701609, 180539, 243600, 584493, 591451, 1838...(truncated) ...1, 717069, 122275, 698392, 278625, 790197, 339521, 42006, 80526, 236831, 385254, 661135, 421850, 409111, 866802, 18472, 720337, 503687, 184048], 1053]\", \"expected\": \"[1036720313, 1040174011, 1038742603, 1032996411, 1027389620, 1039715493, 934331743, 1030888002, 1039447616, 1029743758, 993505649, 1012954893, 1039599...(truncated) ...3299151, 1032239397, 1034765441, 1003299151, 1028811213, 1032651992, 1032760266, 884034324, 1035636563, 974034505, 1005313125, 1023585146, 1040322543]\"}",
            "{\"output\": \"[0, 0, 0, 50, 50]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}",
            "{\"output\": \"[100, 60, 0, 100, 60]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[-60, -30, 0, -50, -50]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[724535, 924352, 833937, 593146, 457701, 895562, 100324, 535818, 877996, 509770, 197191, 292533, 886540, 701609, 180539, 243600, 584493, 591451, 1838...(truncated) ...1, 717069, 122275, 698392, 278625, 790197, 339521, 42006, 80526, 236831, 385254, 661135, 421850, 409111, 866802, 18472, 720337, 503687, 184048], 1053]\", \"expected\": \"[1036720313, 1040174011, 1038742603, 1032996411, 1027389620, 1039715493, 934331743, 1030888002, 1039447616, 1029743758, 993505649, 1012954893, 1039599...(truncated) ...3299151, 1032239397, 1034765441, 1003299151, 1028811213, 1032651992, 1032760266, 884034324, 1035636563, 974034505, 1005313125, 1023585146, 1040322543]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[724535, 924352, 833937, 593146, 457701, 895562, 100324, 535818, 877996, 509770, 197191, 292533, 886540, 701609, 180539, 243600, 584493, 591451, 1838...(truncated) ...1, 717069, 122275, 698392, 278625, 790197, 339521, 42006, 80526, 236831, 385254, 661135, 421850, 409111, 866802, 18472, 720337, 503687, 184048], 1053]\", \"expected\": \"[1036720313, 1040174011, 1038742603, 1032996411, 1027389620, 1039715493, 934331743, 1030888002, 1039447616, 1029743758, 993505649, 1012954893, 1039599...(truncated) ...3299151, 1032239397, 1034765441, 1003299151, 1028811213, 1032651992, 1032760266, 884034324, 1035636563, 974034505, 1005313125, 1023585146, 1040322543]\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}"
        ],
        [
            "{\"output\": \"[0, 1, -1, -1, 0]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], []]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], []]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, 0, 0]\", \"inputs\": \"[[8, 4, 3, 2, 4], [2, 4]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, 0, 0]\", \"inputs\": \"[[8, 4, 3, 2, 4], [2, 4]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], []]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, 0, 0]\", \"inputs\": \"[[8, 4, 3, 2, 4], [2, 4]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, 0, 0]\", \"inputs\": \"[[8, 4, 3, 2, 4], [2, 4]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], []]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3], 5]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"inf\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"10\", \"inputs\": \"[[[5, 3, 7], [8, 2, 6]], [2, 2], 3]\", \"expected\": \"21\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"inf\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"76\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"inf\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +: 'int' and 'ellipsis'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"338\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"118\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"execution time\": 0.03537416458129883}",
            "{\"execution time\": 0.037165164947509766}",
            "{\"execution time\": 0.04224538803100586}",
            "{\"execution time\": 0.041749000549316406}",
            "{\"execution time\": 0.0366060733795166}",
            "{\"execution time\": 0.03786969184875488}",
            "{\"execution time\": 0.035672664642333984}",
            "{\"execution time\": 0.03376197814941406}",
            "{\"execution time\": 0.03873848915100098}",
            "{\"execution time\": 0.030884981155395508}"
        ],
        [
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"abTF\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"abaababaabb\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"Tbaabbaab\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"15\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[3, 0, -3]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 3, -6, -6, -4]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"14\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[8, 6, 4, 2]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[0, 2, 3], -5, 12]\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6...(truncated) ..., 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12], -52379, 5000]\", \"expected\": \"-1\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"execution time\": 0.00020575523376464844}",
            "{\"execution time\": 0.0002467632293701172}",
            "{\"execution time\": 0.0002257823944091797}",
            "{\"execution time\": 0.00023221969604492188}",
            "{\"execution time\": 0.000240325927734375}",
            "{\"execution time\": 0.0002560615539550781}",
            "{\"execution time\": 0.0002162456512451172}",
            "{\"execution time\": 0.00015783309936523438}",
            "{\"execution time\": 0.0002429485321044922}",
            "{\"execution time\": 0.0002732276916503906}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\"}",
            "{\"output\": \"38\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"36\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"83\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"36\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"36\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"36\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"36\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"120\", \"inputs\": \"[[8, 7, 6, 5, 4, 3, 2, 1]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, [[0, 0], [1, 2], [2, 0], [2, 1], [2, 2]], 4]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, [[0, 0], [1, 2], [2, 0], [2, 1], [2, 2]], 4]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}"
        ],
        [
            "{\"output\": \"[1, 4, 3, 2]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 3, 4]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error\": \"AttributeError(\\\"'Solution' object has no attribute 'num_permutations'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"[1, 4, 3, 2]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 4, 3, 2]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[100, 910773911318901]\", \"expected\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40...(truncated) ..., 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 91, 86, 81, 94, 89, 84, 79, 98, 83, 82, 85, 90, 87, 80, 99, 92, 97, 100, 93, 88, 95, 96]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[100, 910773911318901]\", \"expected\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40...(truncated) ..., 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 91, 86, 81, 94, 89, 84, 79, 98, 83, 82, 85, 90, 87, 80, 99, 92, 97, 100, 93, 88, 95, 96]\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"[3, 3, 3, 3, 3]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 0, 0, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 4, 4, 4, 4]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"None\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 0, 0, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 4, 4, 3, 3]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, 0, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"['jumprun', 'jumprun', 'jumpjump', 'jumprun', 'runrun', 'runjump', 'runrun', 'runjump', 'runrun', 'jumprun']\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, 0, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"4\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[4, [[2, 3], [1, 4]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"KeyError(3)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, [[2, 3], [1, 4]]]\", \"expected\": \"9\"}",
            "{\"output\": \"0\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}"
        ],
        [
            "{\"output\": \"-2\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\"}",
            "{\"output\": \"3\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[2, 4, 5], [3, 4, 5]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[2, 4, 5], [3, 4, 5]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abcde', 'ecdba']\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 5, 2, 4], [5, 1, 4, 2]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 5, 2, 4], [5, 1, 4, 2]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"inf\", \"inputs\": \"[[1, 5, 2, 4], [5, 1, 4, 2]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"24\", \"inputs\": \"[[1, 5, 2, 4], [5, 1, 4, 2]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[0, -5, 0], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[0, 1, 2, 0, 0], [[0, 1, 1], [1, 2, 1], [2, 3, 2], [3, 4, 1], [4, 4, 1]]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 0, 1], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-2\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"AttributeError(\\\"'Solution' object has no attribute 'find_numbers'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"AttributeError(\\\"'Solution' object has no attribute 'count_numbers'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"execution time\": 1.3848888874053955}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"execution time\": 0.6989920139312744}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"error\": \"KeyError(1)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"execution time\": 0.6485321521759033}",
            "{\"execution time\": 0.6385746002197266}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}"
        ],
        [
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"152\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"152\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"142\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"154\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"152\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[3, 5, 20]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"output\": \"[11, 6, 7, 3, 3, 2, 0]\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}"
        ],
        [
            "{\"execution time\": 0.22339439392089844}",
            "{\"execution time\": 0.2738471031188965}",
            "{\"execution time\": 0.23267102241516113}",
            "{\"execution time\": 0.20217466354370117}",
            "{\"execution time\": 0.2982475757598877}",
            "{\"execution time\": 0.21225500106811523}",
            "{\"execution time\": 0.22063374519348145}",
            "{\"execution time\": 0.2771031856536865}",
            "{\"execution time\": 0.19101667404174805}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '20 25'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"20 25\", \"expected\": \"2025\"}"
        ],
        [
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"output\": \"2014\\n\", \"inputs\": \"11\", \"expected\": \"2025\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2014 != 2025\"}",
            "{\"output\": \"\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2024\"}",
            "{\"output\": \"\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2024\"}",
            "{\"output\": \"2014\\n\", \"inputs\": \"11\", \"expected\": \"2025\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2014 != 2025\"}",
            "{\"output\": \"2014\\n\", \"inputs\": \"11\", \"expected\": \"2025\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2014 != 2025\"}",
            "{\"output\": \"\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2024\"}",
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"output\": \"2014\\n\", \"inputs\": \"11\", \"expected\": \"2025\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2014 != 2025\"}",
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"97 210\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"ValueError('max() arg is an empty sequence')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"97 210\", \"expected\": \"6\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"ValueError('max() arg is an empty sequence')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"97 210\", \"expected\": \"6\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"output\": \"\", \"inputs\": \"97 210\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"output\": \"\", \"inputs\": \"97 210\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 6\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 6\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 6\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 6\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 6\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 6\"}"
        ],
        [
            "{\"execution time\": 0.18091154098510742}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.1858043670654297}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.1938183307647705}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\"}",
            "{\"execution time\": 0.23916959762573242}",
            "{\"execution time\": 0.24963617324829102}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"18\\n24\\n35\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"9\\n5\\n2\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}"
        ],
        [
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"21068\\n14080 96244 154391 267554 315073 324285 343841 480373 502690 561641 601476 715188 730077 754856 756536 778479 783292 891154 896588 941300 982530...(truncated) ... 999344424 999357655 999375815 999406703 999453949 999511201 999552686 999637509 999685683 999759503 999760956 999835626 999905741 999966268 999968889\", \"expected\": \"109684652\\n\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"21068\\n14080 96244 154391 267554 315073 324285 343841 480373 502690 561641 601476 715188 730077 754856 756536 778479 783292 891154 896588 941300 982530...(truncated) ... 999344424 999357655 999375815 999406703 999453949 999511201 999552686 999637509 999685683 999759503 999760956 999835626 999905741 999966268 999968889\", \"expected\": \"109684652\\n\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 8\"}"
        ],
        [
            "{\"output\": \"5 1 11 6\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 1 11 6 != 2 0 10 5\"}",
            "{\"output\": \"5 5 14 17 \\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 5 14 17 != 2 0 10 5\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0 5 5 14 \\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 5 5 14 != 2 0 10 5\"}",
            "{\"output\": \"5 2 10 8\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 2 10 8 != 2 0 10 5\"}",
            "{\"output\": \"5 1 11 6\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 1 11 6 != 2 0 10 5\"}",
            "{\"output\": \"5 0 9 3\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 0 9 3 != 2 0 10 5\"}",
            "{\"output\": \"0 5 5 14 \\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 5 5 14 != 2 0 10 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2 0 10 5\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n387 388 389\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n387 388 389\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"2\\n3\\n2\\n1\\n5\\n\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=2: 2 != 1\"}",
            "{\"output\": \"\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"execution time\": 0.3595004081726074}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.22747397422790527}",
            "{\"execution time\": 0.3573164939880371}",
            "{\"execution time\": 0.20536541938781738}",
            "{\"execution time\": 0.25743842124938965}",
            "{\"execution time\": 0.22420072555541992}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.2259383201599121}",
            "{\"execution time\": 0.21410465240478516}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"execution time\": 0.20867586135864258}",
            "{\"output\": \"None\\n\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 3\"}",
            "{\"output\": \"None\\n\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 3\"}",
            "{\"execution time\": 0.21641087532043457}",
            "{\"output\": \"\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"None\\n\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 3\"}",
            "{\"output\": \"\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"execution time\": 0.24845409393310547}",
            "{\"execution time\": 0.19020843505859375}"
        ],
        [
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"777560\", \"expected\": \"1899402406153\\n\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}"
        ],
        [
            "{\"output\": \"12\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"5\\n6\\n6\\n7\\n5\\n5\\n5\\n7\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"output\": \"5\\n2\\n5\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 6\"}",
            "{\"output\": \"6\\n6\\n6\\n8\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"6\\n7\\n7\\n8\\n6\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"output\": \"5\\n2\\n5\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 6\"}",
            "{\"output\": \"6\\n7\\n7\\n8\\n6\\n6\\n6\\n8\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 12 9 3 0\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\"}",
            "{\"output\": \"\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 9 3 0\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not iterable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\"}",
            "{\"output\": \"\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 9 3 0\"}",
            "{\"output\": \"1380 2550 3240 3060 2230 1210 450 100 10 0 0\\n\", \"inputs\": \"6 924844033\", \"expected\": \"810 2100 3060 3030 2230 1210 450 100 10 0 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1380 2550 3240 3060 2230 1210 450 100 10 0 0 != 810 2100 3060 3030 2230 1210 450 100 10 0 0\"}",
            "{\"error\": \"TypeError('print() argument after * must be an iterable, not int')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\"}",
            "{\"output\": \"\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 9 3 0\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 6 12 24 48\", \"expected\": \"Yes\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 6 12 24 48\", \"expected\": \"Yes\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 6 12 24 48\", \"expected\": \"Yes\"}",
            "{\"execution time\": 0.27024197578430176}",
            "{\"execution time\": 0.1875457763671875}",
            "{\"execution time\": 0.20629262924194336}",
            "{\"execution time\": 0.266430139541626}",
            "{\"execution time\": 0.2251594066619873}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 6 12 24 48\", \"expected\": \"Yes\"}",
            "{\"execution time\": 0.19226455688476562}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 3\\n?##\\n#.#\\n##?\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 3\\n?##\\n#.#\\n##?\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\"}"
        ],
        [
            "{\"output\": \"6\\n\", \"inputs\": \"6\\n71 74 45 34 31 60\", \"expected\": \"84\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 84\"}",
            "{\"output\": \"6\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2\\n100000000000000000 100000000000000000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"6\\n\", \"inputs\": \"6\\n71 74 45 34 31 60\", \"expected\": \"84\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 84\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"output\": \"30\\n\", \"inputs\": \"5\\n3 1 4 2 4\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 30 != 23\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 16\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 16\"}",
            "{\"output\": \"18\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 16\"}",
            "{\"output\": \"22\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 22 != 16\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 16\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 16\"}",
            "{\"output\": \"26\\n\", \"inputs\": \"5\\n3 1 4 2 4\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 26 != 23\"}",
            "{\"output\": \"18\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 16\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1332\"}",
            "{\"output\": \"\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1332\"}",
            "{\"output\": \"\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1332\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"output\": \"627963728\\n\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 627963728 != 1332\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: '(' was never closed (<string>, line 28)\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.17487573623657227}",
            "{\"output\": \"\", \"inputs\": \"N\", \"expected\": \"S\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != S\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.31937623023986816}",
            "{\"execution time\": 0.2785975933074951}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"error\": \"UnboundLocalError(\\\"local variable 'N' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'N' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2 2\"}",
            "{\"output\": \"None None\\n\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None None != 2 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2 2\"}",
            "{\"output\": \"No match found\\n\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No match found != 2 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2 2\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'N' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"output\": \"None None\\n\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None None != 2 2\"}",
            "{\"output\": \"0 0\\n\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 2 2\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\n\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"error\": \"TypeError('sequence item 0: expected str instance, int found')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"error\": \"TypeError('sequence item 0: expected str instance, int found')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}"
        ],
        [
            "{\"output\": \"34\\n\", \"inputs\": \"2 5\\n1 2\\n3 4\\n5 6\", \"expected\": \"31\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 34 != 31\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 5\\n1 2\\n3 4\\n5 6\", \"expected\": \"31\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 5\\n1 2\\n3 4\\n5 6\", \"expected\": \"31\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 5\\n1 2\\n3 4\\n5 6\", \"expected\": \"31\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 5\\n1 2\\n3 4\\n5 6\", \"expected\": \"31\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 576 99 1\"}",
            "{\"output\": \"1 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 0 0 != 576 99 1\"}",
            "{\"output\": \"2 1 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 1 0 != 576 99 1\"}",
            "{\"output\": \"0 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 0 != 576 99 1\"}",
            "{\"output\": \"\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 576 99 1\"}",
            "{\"output\": \"1 2 1\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 2 1 != 576 99 1\"}",
            "{\"output\": \"1 1 1\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 1 != 576 99 1\"}",
            "{\"output\": \"4 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 0 0 != 576 99 1\"}",
            "{\"output\": \"1 704 496320\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 704 496320 != 576 99 1\"}",
            "{\"output\": \"0 52 52\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 52 52 != 576 99 1\"}"
        ],
        [
            "{\"execution time\": 0.1765284538269043}",
            "{\"execution time\": 0.22795653343200684}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"execution time\": 0.1938314437866211}",
            "{\"output\": \"\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"execution time\": 0.17778539657592773}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"execution time\": 0.25932860374450684}",
            "{\"execution time\": 0.22606587409973145}"
        ],
        [
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\"}",
            "{\"execution time\": 0.21775412559509277}",
            "{\"output\": \"\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"execution time\": 0.26929235458374023}",
            "{\"execution time\": 0.24243474006652832}",
            "{\"execution time\": 0.3018982410430908}",
            "{\"output\": \"\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"execution time\": 0.25087881088256836}",
            "{\"execution time\": 0.19414925575256348}",
            "{\"output\": \"\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0.333333333333333\"}",
            "{\"output\": \"0.009259259259259259\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.009259259259259259 != 0.333333333333333\"}",
            "{\"output\": \"0.333683\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.333683 != 0.333333333333333\"}",
            "{\"output\": \"0.3333333333333333\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.3333333333333333 != 0.333333333333333\"}",
            "{\"output\": \"0.25\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.25 != 0.333333333333333\"}",
            "{\"output\": \"0.0\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.0 != 0.333333333333333\"}",
            "{\"output\": \"0.6666666666666666\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.6666666666666666 != 0.333333333333333\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"output\": \"0.33375\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.33375 != 0.333333333333333\"}",
            "{\"output\": \"1.0\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1.0 != 0.333333333333333\"}"
        ],
        [
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"sick fine\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 2\"}",
            "{\"execution time\": 0.2182636260986328}"
        ],
        [
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n100\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error\": \"ValueError('0 is not in list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}"
        ],
        [
            "{\"output\": \"3\\n5\\n5\\n\", \"inputs\": \"3 3\\n6 10 15\", \"expected\": \"1\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"3\\n5\\n5\\n\", \"inputs\": \"3 3\\n6 10 15\", \"expected\": \"1\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"error\": \"IndexError('tuple index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\"}",
            "{\"output\": \"3\\n2\\n3\\n1\\n3\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 != 4\"}",
            "{\"output\": \"1\\n1\\n3\\n1\\n4\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"0\\n0\\n0\\n4\\n4\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"output\": \"2\\n3\\n1\\n3\\n3\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"output\": \"3\\n2\\n3\\n1\\n3\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 != 4\"}"
        ],
        [
            "{\"output\": \"2\\n2\\n3\\n\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 != 1\"}",
            "{\"output\": \"\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"24520 21849\\n965626018 953300719 624051421 743314250 131768170 295800881 247785711 564315414 504692425 657741617 656680558 261984974 446785555 18981229...(truncated) ...39 802941975\\n2929 201474233\\n5834 132931983\\n11628 664373900\\n2694 19379289\\n23538 342146612\\n8998 389252762\\n15448 790296978\\n20264 662499615\\n6843 765893899\", \"expected\": \"29\\n71\\n185\\n78\\n132\\n76\\n49\\n154\\n71\\n64\\n206\\n61\\n146\\n177\\n80\\n47\\n101\\n229\\n124\\n67\\n145\\n190\\n20\\n50\\n236\\n148\\n154\\n75\\n168\\n82\\n161\\n42\\n53\\n152\\n147\\n55\\n77\\n136\\n62\\n104\\n36\\n228\\n105...(truncated) ...4\\n146\\n32\\n134\\n54\\n70\\n86\\n12\\n197\\n167\\n94\\n208\\n144\\n243\\n186\\n46\\n277\\n93\\n87\\n50\\n98\\n120\\n230\\n208\\n59\\n49\\n71\\n53\\n58\\n122\\n107\\n47\\n197\\n143\\n49\\n51\\n169\\n15\\n171\\n118\\n213\\n235\\n138\\n\"}",
            "{\"output\": \"1\\n1\\n2\\n\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"24520 21849\\n965626018 953300719 624051421 743314250 131768170 295800881 247785711 564315414 504692425 657741617 656680558 261984974 446785555 18981229...(truncated) ...39 802941975\\n2929 201474233\\n5834 132931983\\n11628 664373900\\n2694 19379289\\n23538 342146612\\n8998 389252762\\n15448 790296978\\n20264 662499615\\n6843 765893899\", \"expected\": \"29\\n71\\n185\\n78\\n132\\n76\\n49\\n154\\n71\\n64\\n206\\n61\\n146\\n177\\n80\\n47\\n101\\n229\\n124\\n67\\n145\\n190\\n20\\n50\\n236\\n148\\n154\\n75\\n168\\n82\\n161\\n42\\n53\\n152\\n147\\n55\\n77\\n136\\n62\\n104\\n36\\n228\\n105...(truncated) ...4\\n146\\n32\\n134\\n54\\n70\\n86\\n12\\n197\\n167\\n94\\n208\\n144\\n243\\n186\\n46\\n277\\n93\\n87\\n50\\n98\\n120\\n230\\n208\\n59\\n49\\n71\\n53\\n58\\n122\\n107\\n47\\n197\\n143\\n49\\n51\\n169\\n15\\n171\\n118\\n213\\n235\\n138\\n\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"output\": \"2\\n2\\n1\\n\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 != 1\"}",
            "{\"output\": \"1\\n2\\n2\\n\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"24520 21849\\n965626018 953300719 624051421 743314250 131768170 295800881 247785711 564315414 504692425 657741617 656680558 261984974 446785555 18981229...(truncated) ...39 802941975\\n2929 201474233\\n5834 132931983\\n11628 664373900\\n2694 19379289\\n23538 342146612\\n8998 389252762\\n15448 790296978\\n20264 662499615\\n6843 765893899\", \"expected\": \"29\\n71\\n185\\n78\\n132\\n76\\n49\\n154\\n71\\n64\\n206\\n61\\n146\\n177\\n80\\n47\\n101\\n229\\n124\\n67\\n145\\n190\\n20\\n50\\n236\\n148\\n154\\n75\\n168\\n82\\n161\\n42\\n53\\n152\\n147\\n55\\n77\\n136\\n62\\n104\\n36\\n228\\n105...(truncated) ...4\\n146\\n32\\n134\\n54\\n70\\n86\\n12\\n197\\n167\\n94\\n208\\n144\\n243\\n186\\n46\\n277\\n93\\n87\\n50\\n98\\n120\\n230\\n208\\n59\\n49\\n71\\n53\\n58\\n122\\n107\\n47\\n197\\n143\\n49\\n51\\n169\\n15\\n171\\n118\\n213\\n235\\n138\\n\"}"
        ],
        [
            "{\"execution time\": 0.34771156311035156}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.34270286560058594}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.34039759635925293}",
            "{\"output\": \"20250222\\n\", \"inputs\": \"20250222\", \"expected\": \"22222\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20250222 != 22222\"}",
            "{\"output\": \"\", \"inputs\": \"20250222\", \"expected\": \"22222\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 22222\"}",
            "{\"output\": \"\", \"inputs\": \"20250222\", \"expected\": \"22222\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 22222\"}",
            "{\"execution time\": 0.34392333030700684}"
        ],
        [
            "{\"execution time\": 0.28635168075561523}",
            "{\"execution time\": 0.325972318649292}",
            "{\"execution time\": 0.18877840042114258}",
            "{\"execution time\": 0.21238231658935547}",
            "{\"execution time\": 0.1895427703857422}",
            "{\"execution time\": 0.23434185981750488}",
            "{\"execution time\": 0.3018765449523926}",
            "{\"execution time\": 0.2682831287384033}",
            "{\"execution time\": 0.2357921600341797}",
            "{\"execution time\": 0.3437330722808838}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}",
            "{\"output\": \"\", \"inputs\": \"WACWA\", \"expected\": \"ACCAC\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ACCAC\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"execution time\": 0.2619626522064209}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"([])<>()\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"execution time\": 0.2577939033508301}",
            "{\"execution time\": 0.2624390125274658}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"KeyError(3)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"output\": \"2 0 2 -1\\n-1 -1 0 -1\\n-1 -1 -1 0\\n0 -1 -1 -1\\n\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 0 2 -1 != 0 1 2 4\"}",
            "{\"error\": \"TypeError(\\\"unhashable type: 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"output\": \"1 1 -1 -1\\n-1 -1 1 -1\\n-1 -1 -1 1\\n1 -1 -1 -1\\n\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 -1 -1 != 0 1 2 4\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: iterable unpacking cannot be used in comprehension (<string>, line 80)\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"output\": \"0 1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 \\n\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"error\": \"TypeError(\\\"unhashable type: 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"output\": \"\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"error\": \"TypeError(\\\"unhashable type: 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: unmatched ']' (<string>, line 10)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"execution time\": 0.20187139511108398}",
            "{\"execution time\": 0.24652862548828125}",
            "{\"execution time\": 0.1801011562347412}",
            "{\"execution time\": 0.21721315383911133}",
            "{\"execution time\": 0.24596023559570312}",
            "{\"execution time\": 0.1978142261505127}",
            "{\"execution time\": 0.23088741302490234}",
            "{\"execution time\": 0.20119857788085938}",
            "{\"execution time\": 0.3065509796142578}",
            "{\"execution time\": 0.21347618103027344}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"414\\n\", \"inputs\": \"9925\\n700098 815587 839579 882191 797055 813263 215098 909092 645889 670824 206910 260055 806750 9438 169100 481154 995857 116509 334391 593536 194868 ...(truncated) ...53217 483896 943961 49127 785708 352797 797779 680394 14115 253614 315977 323053 643845 862510 508386 852238 177363 802388 100709 459726 450932 358387\", \"expected\": \"61\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 414 != 61\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"error\": \"KeyError(708888)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9925\\n700098 815587 839579 882191 797055 813263 215098 909092 645889 670824 206910 260055 806750 9438 169100 481154 995857 116509 334391 593536 194868 ...(truncated) ...53217 483896 943961 49127 785708 352797 797779 680394 14115 253614 315977 323053 643845 862510 508386 852238 177363 802388 100709 459726 450932 358387\", \"expected\": \"61\\n\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}"
        ],
        [
            "{\"output\": \"None\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 4\"}",
            "{\"output\": \"\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 4\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 15\"}",
            "{\"output\": \"16\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 16 != 15\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 15\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 15\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 15\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 15\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 15\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 15\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 15\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"execution time\": 0.19167351722717285}",
            "{\"execution time\": 0.2098383903503418}",
            "{\"execution time\": 0.2460494041442871}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n1 4 4 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"15\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 15 != 19\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 19\"}",
            "{\"output\": \"8\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 8 != 19\"}"
        ],
        [
            "{\"execution time\": 1.3262958526611328}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"execution time\": 1.1664011478424072}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"inf\\n\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: inf != 3\"}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0 3 4\"}"
        ],
        [
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"0\\n0\\n2\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"error\": \"NameError(\\\"free variable 'k' referenced before assignment in enclosing scope\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"free variable 'k' referenced before assignment in enclosing scope\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"error\": \"NameError(\\\"free variable 'k' referenced before assignment in enclosing scope\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}"
        ],
        [
            "{\"execution time\": 0.19300484657287598}",
            "{\"execution time\": 0.20420289039611816}",
            "{\"execution time\": 0.27887463569641113}",
            "{\"execution time\": 0.21490049362182617}",
            "{\"execution time\": 0.27598023414611816}",
            "{\"execution time\": 0.23195481300354004}",
            "{\"execution time\": 0.19458222389221191}",
            "{\"execution time\": 0.18041729927062988}",
            "{\"execution time\": 0.2192091941833496}",
            "{\"execution time\": 0.20707964897155762}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 5\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}"
        ],
        [
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"output\": \"\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 11\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}",
            "{\"error\": \"AttributeError(\\\"'complex' object has no attribute 'is_integer'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"397\", \"expected\": \"12 11\"}"
        ],
        [
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n3 6\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n3 6\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n3 6\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n3 6\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 5\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 5\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"1458\\n842 118 90 389 1040 248 1092 94 306 738 695 397 59 1444 432 555 300 209 308 727 242 61 23 1317 1227 162 562 560 894 1170 979 643 293 765 212 1260...(truncated) ...765 767 634 522 134 25 643 229 71 1404 119 433 261 457 824 172 553 1269 1146 300 835 78 1036 436 347 977 4 291 701 687 1405 895 677 1406 1414 1316 934\", \"expected\": \"1233\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"1458\\n842 118 90 389 1040 248 1092 94 306 738 695 397 59 1444 432 555 300 209 308 727 242 61 23 1317 1227 162 562 560 894 1170 979 643 293 765 212 1260...(truncated) ...765 767 634 522 134 25 643 229 71 1404 119 433 261 457 824 172 553 1269 1146 300 835 78 1036 436 347 977 4 291 701 687 1405 895 677 1406 1414 1316 934\", \"expected\": \"1233\\n\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"1458\\n842 118 90 389 1040 248 1092 94 306 738 695 397 59 1444 432 555 300 209 308 727 242 61 23 1317 1227 162 562 560 894 1170 979 643 293 765 212 1260...(truncated) ...765 767 634 522 134 25 643 229 71 1404 119 433 261 457 824 172 553 1269 1146 300 835 78 1036 436 347 977 4 291 701 687 1405 895 677 1406 1414 1316 934\", \"expected\": \"1233\\n\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"inf\\n\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: inf != 1\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"11 12 13 10 13 12 11\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 4 1 4 2 1 3\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 9\"}",
            "{\"output\": \"\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 9\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"output\": \"\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 9\"}",
            "{\"output\": \"\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 9\"}",
            "{\"output\": \"\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 9\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 9\"}",
            "{\"output\": \"8\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 8 != 9\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 9\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 9\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}",
            "{\"output\": \"0000001000\\n\", \"inputs\": \"10 1 2\\nNEESESWEES\", \"expected\": \"0001101011\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0000001000 != 0001101011\"}",
            "{\"output\": \"\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 001010\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"execution time\": 0.2333662509918213}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}",
            "{\"output\": \"\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != ABCBA\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}",
            "{\"output\": \"\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Aoki\"}"
        ],
        [
            "{\"execution time\": 0.18349409103393555}",
            "{\"execution time\": 0.23761868476867676}",
            "{\"execution time\": 0.18790459632873535}",
            "{\"output\": \"\", \"inputs\": \"6\\nabcarc\\nagcahc\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"execution time\": 0.22935128211975098}",
            "{\"execution time\": 0.2061452865600586}",
            "{\"execution time\": 0.19412684440612793}",
            "{\"output\": \"\", \"inputs\": \"6\\nabcarc\\nagcahc\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"execution time\": 0.18723440170288086}",
            "{\"execution time\": 0.18790292739868164}"
        ],
        [
            "{\"output\": \"4\\n1\\n2\\n3\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=3: 3 != 2\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\"}",
            "{\"output\": \"1\\n2\\n3\\n3\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\"}",
            "{\"output\": \"0 1 2 0\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"0 4 0 0\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"6\\n1\\n2\\n4\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 4\"}",
            "{\"output\": \"1\\n1\\n2\\n2\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}"
        ],
        [
            "{\"output\": \"-4\\n\", \"inputs\": \"5 0\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -4 != 0\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"10\\n4\\n9\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 10 != 1\"}",
            "{\"output\": \"3\\n0\\n1\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"6\\n6\\n10\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not str')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\"}",
            "{\"output\": \"3\\n0\\n0\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 4\"}"
        ],
        [
            "{\"execution time\": 0.4903688430786133}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"14\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 14 != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 75\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 40\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}"
        ],
        [
            "{\"execution time\": 0.20000791549682617}",
            "{\"execution time\": 0.21433043479919434}",
            "{\"execution time\": 0.3021883964538574}",
            "{\"execution time\": 0.2300395965576172}",
            "{\"execution time\": 0.2075033187866211}",
            "{\"execution time\": 0.21141862869262695}",
            "{\"execution time\": 0.24973177909851074}",
            "{\"execution time\": 0.30708837509155273}",
            "{\"execution time\": 0.2595374584197998}",
            "{\"execution time\": 0.22599411010742188}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '..........'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"output\": \"395\\n35\\n51\\n999999999997\\n123456785\\n\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 395 != 400\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"output\": \"395\\n35\\n51\\n999999999997\\n123456785\\n\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 395 != 400\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"output\": \"403\\n35\\n58\\n999999999997\\n123456785\\n\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 403 != 400\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\"}",
            "{\"output\": \"\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12\"}",
            "{\"output\": \"\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12\"}",
            "{\"output\": \"\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12\"}",
            "{\"error\": \"IndexError('tuple index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\"}",
            "{\"output\": \"\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: Generator expression must be parenthesized (<string>, line 28)\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 17)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 2 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 10)\"}",
            "{\"output\": \"\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"0 1\\n0 2\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 != 0 2\"}",
            "{\"output\": \"2 1\\n2 2\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 1 != 0 2\"}",
            "{\"output\": \"0 1\\n0 2\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 != 0 2\"}",
            "{\"error\": \"TypeError('wrapped_function.<locals>.matrix_modulo() takes 2 positional arguments but 3 were given')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\"}",
            "{\"output\": \"0 0\\n1 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 0 2\"}",
            "{\"output\": \"0 0\\n0 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 0 2\"}",
            "{\"output\": \"0 2\\n0 1\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 0 1 != 1 2\"}",
            "{\"output\": \"1 0\\n2 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 0 != 0 2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0 0\\n0 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 0 2\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"391\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 391 != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}",
            "{\"output\": \"\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 593\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}",
            "{\"output\": \"\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 3\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Fennec\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 939634344\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"AttributeError(\\\"'float' object has no attribute 'denominator'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"AttributeError(\\\"'float' object has no attribute 'numerator'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 939634344\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 939634344\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}",
            "{\"output\": \"\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 192\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"output\": \"1\\n2\\n1\\n\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 11\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"output\": \"inf\\ninf\\ninf\\n\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: inf != 11\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"output\": \"\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: Generator expression must be parenthesized (<string>, line 41)\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 14\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}",
            "{\"output\": \"10\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 10 != 8\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 8\"}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}"
        ],
        [
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}",
            "{\"output\": \"\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 2\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != Yes\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\nNo\\nNo\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"Yes\\n2 1 1\\n1 1 1\\n3 1 1\\n2 1 1\\n1 1 1\\nNo\\nYes\\n4 1 1\\n3 1 1\\n2 1 1\\n1 1 1\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 1 1 != B 2 3\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"3\\n3\\n10\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 3 != 4\"}",
            "{\"output\": \"3\\n1\\n1\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 1 != 4\"}",
            "{\"output\": \"3\\n3\\n10\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 3 != 4\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"3\\n3\\n10\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 3 != 4\"}",
            "{\"output\": \"1\\n1\\n1\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"5\\n4\\n11\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"3\\n3\\n6\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 3 != 4\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\"}",
            "{\"output\": \"2\\n1\\n3\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"KeyError(3)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"output\": \"2\\n2\\n\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 2 != 3\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}",
            "{\"output\": \"\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 5\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}",
            "{\"output\": \"\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 1\"}"
        ],
        [
            "{\"output\": \"No\\nNo\\n\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"KeyError(5)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"output\": \"\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"output\": \"No\\nNo\\n\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ]
    ]
]