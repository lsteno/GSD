[
    {
        "pass@1": 0.09428571428571429,
        "pass@5": 0.14698412698412697,
        "pass@10": 0.16,
        "detail": {
            "pass@1": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.20000000000000007,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 0.0,
                "17": 0.0,
                "18": 0.20000000000000007,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 1.0,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 0.20000000000000007,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 0.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 0.7,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 0.20000000000000007,
                "64": 0.5999999999999999,
                "65": 0.0,
                "66": 0.0,
                "67": 0.5,
                "68": 0.30000000000000004,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 0.5,
                "75": 0.7,
                "76": 0.0,
                "77": 0.0,
                "78": 0.30000000000000004,
                "79": 0.0,
                "80": 0.0,
                "81": 1.0,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 0.0,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 0.0,
                "94": 0.4,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 0.0,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 0.30000000000000004,
                "105": 0.7999999999999999,
                "106": 1.0,
                "107": 1.0,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 0.30000000000000004,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 1.0,
                "117": 0.09999999999999998,
                "118": 0.0,
                "119": 0.0,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 0.09999999999999998,
                "135": 0.0,
                "136": 1.0,
                "137": 0.4,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 0.0,
                "142": 0.0,
                "143": 0.7,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            },
            "pass@5": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.7777777777777778,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 0.0,
                "17": 0.0,
                "18": 0.7777777777777778,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 1.0,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 0.7777777777777778,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 0.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 1.0,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 0.7777777777777778,
                "64": 1.0,
                "65": 0.0,
                "66": 0.0,
                "67": 0.996031746031746,
                "68": 0.9166666666666666,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 0.996031746031746,
                "75": 1.0,
                "76": 0.0,
                "77": 0.0,
                "78": 0.9166666666666666,
                "79": 0.0,
                "80": 0.0,
                "81": 1.0,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 0.0,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 0.0,
                "94": 0.9761904761904762,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 0.0,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 0.9166666666666666,
                "105": 1.0,
                "106": 1.0,
                "107": 1.0,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 0.9166666666666666,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 1.0,
                "117": 0.5,
                "118": 0.0,
                "119": 0.0,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 0.5,
                "135": 0.0,
                "136": 1.0,
                "137": 0.9761904761904762,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 0.0,
                "142": 0.0,
                "143": 1.0,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            },
            "pass@10": {
                "0": 0.0,
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 1.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0,
                "16": 0.0,
                "17": 0.0,
                "18": 1.0,
                "19": 0.0,
                "20": 0.0,
                "21": 0.0,
                "22": 0.0,
                "23": 0.0,
                "24": 0.0,
                "25": 1.0,
                "26": 0.0,
                "27": 0.0,
                "28": 0.0,
                "29": 1.0,
                "30": 0.0,
                "31": 0.0,
                "32": 0.0,
                "33": 0.0,
                "34": 0.0,
                "35": 0.0,
                "36": 0.0,
                "37": 0.0,
                "38": 0.0,
                "39": 0.0,
                "40": 0.0,
                "41": 0.0,
                "42": 0.0,
                "43": 1.0,
                "44": 0.0,
                "45": 0.0,
                "46": 0.0,
                "47": 0.0,
                "48": 0.0,
                "49": 0.0,
                "50": 0.0,
                "51": 0.0,
                "52": 0.0,
                "53": 0.0,
                "54": 0.0,
                "55": 0.0,
                "56": 0.0,
                "57": 0.0,
                "58": 0.0,
                "59": 1.0,
                "60": 0.0,
                "61": 0.0,
                "62": 0.0,
                "63": 1.0,
                "64": 1.0,
                "65": 0.0,
                "66": 0.0,
                "67": 1.0,
                "68": 1.0,
                "69": 0.0,
                "70": 0.0,
                "71": 0.0,
                "72": 0.0,
                "73": 0.0,
                "74": 1.0,
                "75": 1.0,
                "76": 0.0,
                "77": 0.0,
                "78": 1.0,
                "79": 0.0,
                "80": 0.0,
                "81": 1.0,
                "82": 0.0,
                "83": 0.0,
                "84": 0.0,
                "85": 0.0,
                "86": 0.0,
                "87": 0.0,
                "88": 0.0,
                "89": 0.0,
                "90": 0.0,
                "91": 0.0,
                "92": 0.0,
                "93": 0.0,
                "94": 1.0,
                "95": 0.0,
                "96": 0.0,
                "97": 0.0,
                "98": 0.0,
                "99": 0.0,
                "100": 0.0,
                "101": 0.0,
                "102": 0.0,
                "103": 0.0,
                "104": 1.0,
                "105": 1.0,
                "106": 1.0,
                "107": 1.0,
                "108": 0.0,
                "109": 0.0,
                "110": 0.0,
                "111": 1.0,
                "112": 1.0,
                "113": 0.0,
                "114": 0.0,
                "115": 0.0,
                "116": 1.0,
                "117": 1.0,
                "118": 0.0,
                "119": 0.0,
                "120": 0.0,
                "121": 0.0,
                "122": 0.0,
                "123": 1.0,
                "124": 0.0,
                "125": 0.0,
                "126": 0.0,
                "127": 0.0,
                "128": 0.0,
                "129": 0.0,
                "130": 0.0,
                "131": 0.0,
                "132": 0.0,
                "133": 0.0,
                "134": 1.0,
                "135": 0.0,
                "136": 1.0,
                "137": 1.0,
                "138": 0.0,
                "139": 0.0,
                "140": 0.0,
                "141": 0.0,
                "142": 0.0,
                "143": 1.0,
                "144": 0.0,
                "145": 0.0,
                "146": 0.0,
                "147": 0.0,
                "148": 0.0,
                "149": 0.0,
                "150": 0.0,
                "151": 0.0,
                "152": 0.0,
                "153": 0.0,
                "154": 0.0,
                "155": 0.0,
                "156": 0.0,
                "157": 0.0,
                "158": 0.0,
                "159": 0.0,
                "160": 0.0,
                "161": 0.0,
                "162": 0.0,
                "163": 0.0,
                "164": 0.0,
                "165": 0.0,
                "166": 0.0,
                "167": 0.0,
                "168": 0.0,
                "169": 0.0,
                "170": 0.0,
                "171": 0.0,
                "172": 0.0,
                "173": 0.0,
                "174": 0.0
            }
        }
    },
    {
        "0": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "1": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "2": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "3": [
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "4": [
            [
                -4
            ],
            [
                false
            ],
            [
                true,
                -4
            ],
            [
                true,
                -4
            ],
            [
                true,
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                true,
                -4
            ],
            [
                true,
                -4
            ],
            [
                true,
                -4
            ]
        ],
        "5": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                false
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "6": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "7": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ]
        ],
        "8": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "9": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "10": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "11": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "12": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "13": [
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "14": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "15": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "16": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "17": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "18": [
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "19": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "20": [
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "21": [
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ]
        ],
        "22": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "23": [
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ]
        ],
        "24": [
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                -4
            ]
        ],
        "25": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "26": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "27": [
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "28": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "29": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "30": [
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "31": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "32": [
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                false
            ]
        ],
        "33": [
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "34": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "35": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "36": [
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "37": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "38": [
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "39": [
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ]
        ],
        "40": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                true,
                true,
                true,
                false
            ],
            [
                false
            ]
        ],
        "41": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "42": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "43": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "44": [
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "45": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ]
        ],
        "46": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ]
        ],
        "47": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ]
        ],
        "48": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "49": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "50": [
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ],
            [
                true,
                true,
                true,
                false
            ]
        ],
        "51": [
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "52": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "53": [
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ]
        ],
        "54": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "55": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "56": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "57": [
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ]
        ],
        "58": [
            [
                -4
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                true,
                false
            ],
            [
                true,
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "59": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "60": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "61": [
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ],
            [
                false
            ]
        ],
        "62": [
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                false
            ],
            [
                false
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "63": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "64": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "65": [
            [
                -2
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ],
            [
                true,
                true,
                -3
            ]
        ],
        "66": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "67": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "68": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "69": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ]
        ],
        "70": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "71": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "72": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "73": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "74": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ]
        ],
        "75": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                -2
            ]
        ],
        "76": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "77": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "78": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "79": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "80": [
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                -2
            ]
        ],
        "81": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "82": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "83": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "84": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ]
        ],
        "85": [
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "86": [
            [
                -2
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ],
            [
                -4
            ],
            [
                true,
                -3
            ],
            [
                -2
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ],
            [
                true,
                -3
            ]
        ],
        "87": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "88": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "89": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -3
            ]
        ],
        "90": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "91": [
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ]
        ],
        "92": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "93": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "94": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ]
        ],
        "95": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "96": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "97": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "98": [
            [
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                -2
            ],
            [
                true,
                true,
                true,
                -3
            ],
            [
                true,
                true,
                true,
                -3
            ]
        ],
        "99": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ]
        ],
        "100": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "101": [
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                -2
            ],
            [
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                -2
            ]
        ],
        "102": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "103": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "104": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "105": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "106": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "107": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "108": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "109": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "110": [
            [
                -4
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "111": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "112": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "113": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "114": [
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "115": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "116": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "117": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "118": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "119": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "120": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "121": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                -3
            ]
        ],
        "122": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "123": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "124": [
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "125": [
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "126": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "127": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -3
            ]
        ],
        "128": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                -3
            ],
            [
                -2
            ]
        ],
        "129": [
            [
                true,
                true,
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                true,
                true,
                -2
            ],
            [
                true,
                true,
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "130": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "131": [
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                true,
                true,
                true,
                -2
            ],
            [
                true,
                -2
            ]
        ],
        "132": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ]
        ],
        "133": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "134": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ]
        ],
        "135": [
            [
                true,
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "136": [
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "137": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "138": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "139": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -3
            ]
        ],
        "140": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "141": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "142": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "143": [
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ],
            [
                -4
            ],
            [
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        ],
        "144": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "145": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "146": [
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                true,
                -3
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ]
        ],
        "147": [
            [
                true,
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ]
        ],
        "148": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "149": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "150": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "151": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "152": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -2
            ]
        ],
        "153": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "154": [
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "155": [
            [
                true,
                true,
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                true,
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "156": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -3
            ],
            [
                -3
            ],
            [
                -4
            ]
        ],
        "157": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ]
        ],
        "158": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "159": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "160": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "161": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "162": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "163": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "164": [
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ]
        ],
        "165": [
            [
                -4
            ],
            [
                true,
                true,
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "166": [
            [
                -4
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "167": [
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ],
            [
                true,
                -2
            ],
            [
                -4
            ]
        ],
        "168": [
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -4
            ]
        ],
        "169": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "170": [
            [
                -3
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "171": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "172": [
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -2
            ],
            [
                -2
            ]
        ],
        "173": [
            [
                true,
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                true,
                -2
            ],
            [
                -2
            ],
            [
                -2
            ],
            [
                -4
            ],
            [
                -4
            ]
        ],
        "174": [
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ],
            [
                -4
            ]
        ]
    },
    [
        [
            "{\"output\": \"9\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-16\", \"inputs\": \"[[6, 3, 1, 2, 4, 4], 7]\", \"expected\": \"17\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3904\", \"inputs\": \"[[[-394, -133, 275, -943, -685, -857, -982, -726, -458, -334, -4, -398, -479, -490, -842, -326, -579, -796, -916, -816, -478, -680, -597, -626, -87, -...(truncated) ...41, -70, -9, -18, -427, -600, -379, -589, -530, -621, 726, -784, -730, -437, -496, -606, -702, -924, -623, -856, -350, -512, -585, -244, -354, -952]]]\", \"expected\": \"-7652\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[[0, 1, -1], [1, -2, 3], [2, -3, 4]]]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[3, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[2, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[5, inf]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[2, 0]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, inf]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[5, 0]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, inf]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 2]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[2, 1]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 2]\", \"inputs\": \"[[[0, 1, 2], [1, 2, 3], [1, 3, 5], [1, 4, 4], [2, 5, 6]], [2, 1, 2, 1, 3, 1]]\", \"expected\": \"[6, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-2\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"['abaacbaecebce', 'ba*c*ce']\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}",
            "{\"output\": \"13\", \"inputs\": \"['12936']\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"TypeError('not all arguments converted during string formatting')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['12936']\", \"expected\": \"11\"}",
            "{\"output\": \"13\", \"inputs\": \"['12936']\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['5701283']\", \"expected\": \"18\"}"
        ],
        [
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'set'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'set'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[4, 4, 4, 4, 6, 6, 6, 6, 34], [5, 7]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'set'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'set'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], [4]]\", \"expected\": \"1\"}"
        ],
        [
            "{\"output\": \"ddcc\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"cddd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"cede\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}",
            "{\"output\": \"bcbd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"cdcd\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['cdcd']\", \"expected\": \"cccc\"}"
        ],
        [
            "{\"output\": \"-118\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-10\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-118\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.00015616416931152344}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0002598762512207031}",
            "{\"output\": \"5\", \"inputs\": \"[[10, 10, 3, 7, 6]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 7, 9], 3]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4, 3]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 2, 4]\", \"inputs\": \"[[[1, 2], [3, 4]]]\", \"expected\": \"[1, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"True\", \"inputs\": \"['baaaaabc', 4]\", \"expected\": \"False\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['aaabaaa', 3]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"24\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, -2, 1, 3, 7, 3, 6, 4, -1], 3, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"UnboundLocalError(\\\"local variable 'w' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'w' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}",
            "{\"output\": \"1\", \"inputs\": \"[5, [[0, 1, 1], [0, 2, 2], [0, 3, 1], [0, 4, 1], [1, 2, 1], [1, 4, 1]], 1]\", \"expected\": \"-1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'w' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"NameError(\\\"name 'visited' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}",
            "{\"output\": \"2\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"inf\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'max_weight' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[5, [[1, 0, 1], [2, 0, 2], [3, 0, 1], [4, 3, 1], [2, 1, 1]], 2]\", \"expected\": \"1\"}"
        ],
        [
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"output\": \"[0, 0]\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'id1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\"}",
            "{\"output\": \"[0, 0]\", \"inputs\": \"[2, [['MESSAGE', '10', 'id1 id0'], ['OFFLINE', '11', '0'], ['MESSAGE', '71', 'HERE']]]\", \"expected\": \"[2, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"21\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, -1, 3, 3, 4], 2, 2]\", \"expected\": \"13\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"27\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"27\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 3, 2, 1, 5, 4], 2]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\"}",
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-9\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-6\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[1, 2, 3], 2]\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0015130043029785156}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"21\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0016436576843261719}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[[2, 3, 1]]\", \"expected\": \"11\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"NameError(\\\"name 'n' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 0, 2, 2], [2, 0, 2, 2, 0], [2, 0, 0, 0, 0], [0, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[[2, 2, 1, 2, 2], [2, 0, 2, 2, 0], [2, 0, 1, 1, 0], [1, 0, 2, 2, 2], [2, 0, 0, 2, 2]]]\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['2523533']\", \"expected\": \"23\"}",
            "{\"output\": \"\", \"inputs\": \"['2523533']\", \"expected\": \"23\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"13\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"17\", \"inputs\": \"[6, [[2, 4, 6], [5, 3, 8], [7, 1, 9], [4, 6, 2], [3, 5, 7], [8, 2, 4]]]\", \"expected\": \"18\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"11\", \"inputs\": \"[4, [[3, 5, 7], [6, 2, 9], [4, 8, 1], [7, 3, 5]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"24\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"12\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"81\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 2, 2]\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"3\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"7\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[10, 1, [0, 2, 9], [1, 4, 10]]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[5, 1, [1, 3], [2, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable int object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[[2, 6]]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable int object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [2, 4]]]\", \"expected\": \"3\"}"
        ],
        [
            "{\"execution time\": 0.0005033016204833984}",
            "{\"execution time\": 0.0002944469451904297}",
            "{\"execution time\": 0.00046515464782714844}",
            "{\"execution time\": 0.0008251667022705078}",
            "{\"execution time\": 0.0004508495330810547}",
            "{\"execution time\": 0.0004811286926269531}",
            "{\"execution time\": 0.0002930164337158203}",
            "{\"execution time\": 0.00024700164794921875}",
            "{\"execution time\": 0.0002543926239013672}",
            "{\"execution time\": 0.0004761219024658203}"
        ],
        [
            "{\"output\": \"[[1, 5, 2], [4, 7, 3], [9, 8, 6]]\", \"inputs\": \"[[[1, 5, 2], [4, 7, 3], [9, 8, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"[[[1, 3, 7], [3, 7], [3]], [[2, 8, 9], [2, 8], [2]], [[4, 5, 6], [5, 6], [6]]]\", \"inputs\": \"[[[[1, 3, 7], [3, 7], [3]], [[2, 8, 9], [2, 8], [2]], [[4, 5, 6], [5, 6], [6]]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 5, 2], [4, 7, 3], [9, 8, 6]]\", \"inputs\": \"[[[1, 5, 2], [4, 7, 3], [9, 8, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[7, 4, 6], [9, 8, 2], [1, 5, 3]]\", \"inputs\": \"[[[7, 4, 6], [9, 8, 2], [1, 5, 3]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 2, 4], [3, 8, 5], [7, 9, 6]]\", \"inputs\": \"[[[1, 2, 4], [3, 8, 5], [7, 9, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 5, 2], [4, 7, 3], [9, 8, 6]]\", \"inputs\": \"[[[1, 5, 2], [4, 7, 3], [9, 8, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 2, 4], [3, 8, 5], [7, 9, 6]]\", \"inputs\": \"[[[1, 2, 4], [3, 8, 5], [7, 9, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[[1, 3, 7], 3, 7], [[2, 8, 9], [8, 9], 9], [[4, 5, 6], [5, 6], [6]]]\", \"inputs\": \"[[[[1, 3, 7], 3, 7], [[2, 8, 9], [8, 9], 9], [[4, 5, 6], [5, 6], [6]]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[[1, 5, 2], [4, 7, 3], [9, 8, 6]]\", \"inputs\": \"[[[1, 5, 2], [4, 7, 3], [9, 8, 6]]]\", \"expected\": \"[[8, 2, 3], [9, 6, 7], [4, 5, 1]]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[-1, -1, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"output\": \"[-1, -1, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"output\": \"[-1, 2, -1]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\"}",
            "{\"output\": \"[0, 1, 0]\", \"inputs\": \"[[1, 3, 1, 4, 1, 3, 2], [0, 3, 5]]\", \"expected\": \"[2, -1, 3]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4, 5, 6], 1]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"execution time\": 0.0004253387451171875}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"execution time\": 0.0005123615264892578}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['aaaaabbc']\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"output\": \"14\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"output\": \"2\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\"}",
            "{\"output\": \"1\", \"inputs\": \"['SE', 0]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['NWSE', 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}",
            "{\"output\": \"[20, 20, 0, 0, 0]\", \"inputs\": \"[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 150, 0, 0, 0]\", \"inputs\": \"[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}",
            "{\"output\": \"[90, 0, 0, 0, 0]\", \"inputs\": \"[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[10, 20, 30, 40, 50]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[60, 24, 32, 50, 51]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\"}",
            "{\"output\": \"[0, 0, 20, 0, 0]\", \"inputs\": \"[[4, 2, 1, 5, 3], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 10, 30, 50, 70]\", \"inputs\": \"[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2]\", \"expected\": \"[80, 30, 0, 80, 50]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[0, 1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, ...(truncated) ...7, 99959, 99961, 99963, 99965, 99967, 99969, 99971, 99973, 99975, 99977, 99979, 99981, 99983, 99985, 99987, 99989, 99991, 99993, 99995, 99997, 99999]]\", \"expected\": \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...(truncated) ... 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"}",
            "{\"output\": \"[0, 1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, -1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, ...(truncated) ...7, 99959, 99961, 99963, 99965, 99967, 99969, 99971, 99973, 99975, 99977, 99979, 99981, 99983, 99985, 99987, 99989, 99991, 99993, 99995, 99997, 99999]]\", \"expected\": \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...(truncated) ... 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4...(truncated) ..., 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]]\", \"expected\": \"[49999, 49999, 49998, 49999, 49997, 49998, 49996, 49999, 49995, 49997, 49994, 49998, 49993, 49996, 49992, 49999, 49991, 49995, 49990, 49997, 49989, 49...(truncated) ...37503, 13, 25006, 12, 43751, 11, 25005, 10, 37502, 9, 25004, 8, 46875, 7, 25003, 6, 37501, 5, 25002, 4, 43750, 3, 25001, 2, 37500, 1, 25000, 0, 48437]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4...(truncated) ..., 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]]\", \"expected\": \"[49999, 49999, 49998, 49999, 49997, 49998, 49996, 49999, 49995, 49997, 49994, 49998, 49993, 49996, 49992, 49999, 49991, 49995, 49990, 49997, 49989, 49...(truncated) ...37503, 13, 25006, 12, 43751, 11, 25005, 10, 37502, 9, 25004, 8, 46875, 7, 25003, 6, 37501, 5, 25002, 4, 43750, 3, 25001, 2, 37500, 1, 25000, 0, 48437]\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4...(truncated) ..., 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]]\", \"expected\": \"[49999, 49999, 49998, 49999, 49997, 49998, 49996, 49999, 49995, 49997, 49994, 49998, 49993, 49996, 49992, 49999, 49991, 49995, 49990, 49997, 49989, 49...(truncated) ...37503, 13, 25006, 12, 43751, 11, 25005, 10, 37502, 9, 25004, 8, 46875, 7, 25003, 6, 37501, 5, 25002, 4, 43750, 3, 25001, 2, 37500, 1, 25000, 0, 48437]\"}",
            "{\"output\": \"[0, 1, -1, -1, -1]\", \"inputs\": \"[[8, 4, 3, 2, 4], [4, 2]]\", \"expected\": \"[0, 0, -1, 1, 0]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"NameError(\\\"name 'n' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\"}",
            "{\"output\": \"3\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"NameError(\\\"name 'n' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\"}",
            "{\"output\": \"6\", \"inputs\": \"[[2, 4], 3]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4.0\", \"inputs\": \"[[[0, 0, 2], [1, 1, 1]]]\", \"expected\": \"1.16667\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2.5\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-4.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"ZeroDivisionError('division by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\"}",
            "{\"output\": \"5.0\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[[0, 0, 1], [2, 2, 1]]]\", \"expected\": \"1.0\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[[[1, 2], [3, 4]], [0, 1], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"9\", \"inputs\": \"[[[1, 2], [3, 4]], [1, 2], 2]\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +: 'int' and 'ellipsis'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"202\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"6\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"99\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"168\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"168\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\"}",
            "{\"output\": \"200\", \"inputs\": \"[[3, 1, 4], [4, 6, 6], 1]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['3902']\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"TFTFab\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"bb\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"TFTFa\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"abaabaab\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"TFTFab\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\"}",
            "{\"output\": \"abbaabba\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"TFTFab\", \"inputs\": \"['TFTF', 'ab']\", \"expected\": \"ababa\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"True\", \"inputs\": \"['cdefdc', 3]\", \"expected\": \"False\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"True\", \"inputs\": \"['cdefdc', 3]\", \"expected\": \"False\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"True\", \"inputs\": \"['cdefdc', 3]\", \"expected\": \"False\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"False\", \"inputs\": \"['abcdbaefab', 2]\", \"expected\": \"True\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"True\", \"inputs\": \"['cdefdc', 3]\", \"expected\": \"False\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 5]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-5\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 3, -6, -6, -4]]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[5, 2, 3, 1]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"output\": \"18\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[2, 4, 6, 8]]\", \"expected\": \"12\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[1, 2, 3], 2, 10]\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}"
        ],
        [
            "{\"execution time\": 0.00024008750915527344}",
            "{\"execution time\": 0.0002918243408203125}",
            "{\"execution time\": 0.00032448768615722656}",
            "{\"execution time\": 0.0005028247833251953}",
            "{\"execution time\": 0.0002396106719970703}",
            "{\"execution time\": 0.00023889541625976562}",
            "{\"execution time\": 0.00024247169494628906}",
            "{\"execution time\": 0.0002605915069580078}",
            "{\"execution time\": 0.0002624988555908203}",
            "{\"execution time\": 0.00020742416381835938}"
        ],
        [
            "{\"output\": \"36\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\"}",
            "{\"output\": \"36\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\"}",
            "{\"output\": \"6\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"52\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"5\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\"}",
            "{\"output\": \"36\", \"inputs\": \"[[1, 2, 3, 4, 5, 6, 7, 8]]\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, [[0, 0], [1, 2], [2, 0], [2, 2], [2, 1]], 4]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"NameError(\\\"name 'side' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\"}",
            "{\"output\": \"-1\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[2, [[0, 0], [0, 2], [2, 0], [2, 2]], 4]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, [[0, 0], [1, 2], [2, 0], [2, 2], [2, 1]], 4]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[4, 1, 2, 3]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 2]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 1, 2, 4]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\"}",
            "{\"output\": \"[2, 3, 2, 3]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[1, 4, 1, 4]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[2, 1, 4, 3]\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: cannot unpack non-iterable NoneType object\"}",
            "{\"output\": \"None\", \"inputs\": \"[4, 6]\", \"expected\": \"[3, 4, 1, 2]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[3, 3, 3, 3, 3]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 3, 3, 4, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[3, 3, 3, 3, 3]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"TypeError(\\\"'>' not supported between instances of 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\"}",
            "{\"output\": \"[3, 3, 3, 3, 3]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 3, 3, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[4, 3, 3, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"['', '', '', '', '']\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[0, 0, 0, 0, 0]\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[['jump', 'run', 'run', 'jump', 'run'], 2]\", \"expected\": \"[3, 4, 4, 3, 4]\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[1, 2, 3, 4], [[1, 2], [2, 3], [3, 4], [4, 5]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['abced', 2]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"31\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"30\", \"inputs\": \"[[4, 7, 1, 10, 8, 4, -4, -4, 8, 6, 9, 9, -4, -6, 3, 7, 1, -5, 8, -4, -3, -4, -5, -2, 4, 10, -1, -2, 10, 5, 10, 10, -1, 10, -4, -9, 8, -8, 6, -6, -4, -...(truncated) ..., 8, -8, -9, -3, 10, 6, 3, 4, -1, -6, -4, -5, -8, 3, -7, 1, 9, 3, -2, -3, 4, -7, 0, -10, -5, 8, 4, 9, 4, -4, 3, 3, -2, 10, -7, 1, 0, 10, 6, 10, 1, 9]]\", \"expected\": \"55\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"1\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"4\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"KeyError(4)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\"}",
            "{\"output\": \"0\", \"inputs\": \"[4, [[2, 3], [1, 4]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[4, [[1, 4], [2, 3]]]\", \"expected\": \"9\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [6, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[4, 2, 5], [3]]\", \"expected\": \"1\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[4, 2, 5], [3, 5, 4]]\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'flag' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['a', 'a']\", \"expected\": \"2\"}",
            "{\"output\": \"4\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['abc', 'def']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"26\", \"inputs\": \"[[1, 5, 2, 4], [5, 1, 4, 2]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"46\", \"inputs\": \"[[1, 2, 4, 5], [1, 2, 4, 5]]\", \"expected\": \"110\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-6\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-6\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[1, 1, 3], [0, 2, 1], [0, 2, 1]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"-1\", \"inputs\": \"[[2, 0, 2], [[0, 2, 1], [0, 2, 1], [1, 1, 3]]]\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"[[1, 2, 3, 4]]\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"[8160, 560222044]\", \"expected\": \"374578664\"}"
        ],
        [
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"['01']\", \"expected\": \"1\"}",
            "{\"output\": \"1\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"0\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"1\", \"inputs\": \"['0100']\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"['01']\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"execution time\": 1.1666440963745117}",
            "{\"execution time\": 1.1924688816070557}",
            "{\"output\": \"5\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"NameError(\\\"name 'intersect' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[[1, 2], [1, 1], [3, 4], [4, 5], [5, 6], [7, 7]], 1]\", \"expected\": \"3\"}",
            "{\"execution time\": 0.8358047008514404}",
            "{\"execution time\": 0.9777648448944092}",
            "{\"execution time\": 0.6850724220275879}",
            "{\"execution time\": 0.5861694812774658}",
            "{\"execution time\": 0.6099092960357666}"
        ],
        [
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"16\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"14\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"10\", \"inputs\": \"['abc']\", \"expected\": \"148\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"3\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"2\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"8\", \"inputs\": \"[2, 3, 15]\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}"
        ],
        [
            "{\"output\": \"[11, 6, 7, 3, 5, 2]\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[11, 6, 7, 3, 5, 2]\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"output\": \"[11, 6, 7, 3, 5, 2]\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"output\": \"[11, 6, 7, 3, 5, 2]\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\", \"error_code\": -2, \"error_message\": \"Wrong Answer\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"[[5, 3, 4, 1, 3, 2]]\", \"expected\": \"[5, 3, 3, 1, 1, 1]\"}"
        ],
        [
            "{\"execution time\": 0.23355364799499512}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.30078840255737305}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"execution time\": 0.24384450912475586}",
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"output\": \"3320\\n\", \"inputs\": \"1\", \"expected\": \"2024\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3320 != 2024\"}",
            "{\"execution time\": 0.20572447776794434}",
            "{\"execution time\": 0.20365524291992188}",
            "{\"execution time\": 0.20832347869873047}",
            "{\"execution time\": 0.21590280532836914}",
            "{\"execution time\": 0.205946683883667}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"97 210\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 6\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"252509054433933519 760713016476190692\", \"expected\": \"221852052834757\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 6\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 6\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3 3\\n2 1 1\", \"expected\": \"6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 6\"}"
        ],
        [
            "{\"execution time\": 0.3405325412750244}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.33136606216430664}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.33938121795654297}",
            "{\"execution time\": 0.2910728454589844}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.32659268379211426}"
        ],
        [
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\"}",
            "{\"execution time\": 0.33240175247192383}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\"}",
            "{\"execution time\": 0.3700897693634033}",
            "{\"output\": \"16\\n20\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 16 != 12\"}",
            "{\"execution time\": 0.3870735168457031}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}",
            "{\"output\": \"18\\n21\\n24\\n\", \"inputs\": \"4 3\\n3 3\\n5 1\\n2 4\\n1 10\", \"expected\": \"12\\n15\\n20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 12\"}"
        ],
        [
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"10\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 10 != 8\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"21068\\n14080 96244 154391 267554 315073 324285 343841 480373 502690 561641 601476 715188 730077 754856 756536 778479 783292 891154 896588 941300 982530...(truncated) ... 999344424 999357655 999375815 999406703 999453949 999511201 999552686 999637509 999685683 999759503 999760956 999835626 999905741 999966268 999968889\", \"expected\": \"109684652\\n\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 8\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"21068\\n14080 96244 154391 267554 315073 324285 343841 480373 502690 561641 601476 715188 730077 754856 756536 778479 783292 891154 896588 941300 982530...(truncated) ... 999344424 999357655 999375815 999406703 999453949 999511201 999552686 999637509 999685683 999759503 999760956 999835626 999905741 999966268 999968889\", \"expected\": \"109684652\\n\"}",
            "{\"output\": \"10\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 10 != 8\"}"
        ],
        [
            "{\"output\": \"5 5 14 17 \", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 5 14 17 != 2 0 10 5\"}",
            "{\"output\": \"4 4 13 17\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 4 13 17 != 2 0 10 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"45003\\n385861 87653 65309 312467 368097 39714 27674 476638 55061 260011 140545 407169 227465 140270 254643 467538 328552 340805 118601 499728 308875 28...(truncated) ...82 105950 485399 375785 68622 260726 434649 302905 141171 221921 77637 53998 251282 90809 232487 464769 205421 241432 91081 45445 231282 438542 405031\", \"expected\": \"340859 42653 20311 267471 323103 0 0 431650 10075 215027 95563 362189 182487 95294 209669 422566 283582 295837 73635 454764 263913 243490 25930 15847 ...(truncated) ...9931 529382 419770 112609 304715 478640 346898 185166 265918 121636 97999 295285 134814 276494 508778 249432 285445 135096 89462 275301 482563 449054\\n\"}",
            "{\"output\": \"5 1 9 2\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 1 9 2 != 2 0 10 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"45003\\n385861 87653 65309 312467 368097 39714 27674 476638 55061 260011 140545 407169 227465 140270 254643 467538 328552 340805 118601 499728 308875 28...(truncated) ...82 105950 485399 375785 68622 260726 434649 302905 141171 221921 77637 53998 251282 90809 232487 464769 205421 241432 91081 45445 231282 438542 405031\", \"expected\": \"340859 42653 20311 267471 323103 0 0 431650 10075 215027 95563 362189 182487 95294 209669 422566 283582 295837 73635 454764 263913 243490 25930 15847 ...(truncated) ...9931 529382 419770 112609 304715 478640 346898 185166 265918 121636 97999 295285 134814 276494 508778 249432 285445 135096 89462 275301 482563 449054\\n\"}",
            "{\"output\": \"5 5 14 17 \", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 5 14 17 != 2 0 10 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"45003\\n385861 87653 65309 312467 368097 39714 27674 476638 55061 260011 140545 407169 227465 140270 254643 467538 328552 340805 118601 499728 308875 28...(truncated) ...82 105950 485399 375785 68622 260726 434649 302905 141171 221921 77637 53998 251282 90809 232487 464769 205421 241432 91081 45445 231282 438542 405031\", \"expected\": \"340859 42653 20311 267471 323103 0 0 431650 10075 215027 95563 362189 182487 95294 209669 422566 283582 295837 73635 454764 263913 243490 25930 15847 ...(truncated) ...9931 529382 419770 112609 304715 478640 346898 185166 265918 121636 97999 295285 134814 276494 508778 249432 285445 135096 89462 275301 482563 449054\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"45003\\n385861 87653 65309 312467 368097 39714 27674 476638 55061 260011 140545 407169 227465 140270 254643 467538 328552 340805 118601 499728 308875 28...(truncated) ...82 105950 485399 375785 68622 260726 434649 302905 141171 221921 77637 53998 251282 90809 232487 464769 205421 241432 91081 45445 231282 438542 405031\", \"expected\": \"340859 42653 20311 267471 323103 0 0 431650 10075 215027 95563 362189 182487 95294 209669 422566 283582 295837 73635 454764 263913 243490 25930 15847 ...(truncated) ...9931 529382 419770 112609 304715 478640 346898 185166 265918 121636 97999 295285 134814 276494 508778 249432 285445 135096 89462 275301 482563 449054\\n\"}",
            "{\"output\": \"5 5 14 17\\n\", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 5 14 17 != 2 0 10 5\"}",
            "{\"output\": \"5 5 14 17 \", \"inputs\": \"4\\n5 0 9 3\", \"expected\": \"2 0 10 5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 5 14 17 != 2 0 10 5\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n387 388 389\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n387 388 389\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"6\\n2 3 4 4 7 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error\": \"MemoryError()\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"686873689280 35 17 18\\n2 6\\n8 45\\n46 92\\n93 157\\n158 162\\n164 215\\n216 231\\n232 289\\n291 310\\n311 365\\n366 390\\n392 426\\n427 461\\n462 470\\n471 528\\n529 535\\n537 541\\n54...(truncated) ...569\\n571 578\\n579 643\\n645 681\\n682 716\\n717 762\\n764 769\\n771 840\\n842 859\\n861 878\\n880 947\\n949 953\\n954 1023\\n1024 1086\\n1087 1109\\n1111 1183\\n1185 1210\\n1211 1245\", \"expected\": \"No\\n\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"184 30 5 16\\n2 2\\n4 4\\n6 6\\n8 8\\n10 10\\n12 12\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n20 20\\n22 22\\n23 23\\n24 24\\n25 25\\n27 27\\n29 29\\n31 31\\n32 32\\n33 33\\n35 35\\n37 37\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n45 45\\n47 47\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"30 1 5 8\\n4 24\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"24 2 3 5\\n7 8\\n17 20\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"0 2\\n\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '2 5'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}",
            "{\"output\": \"4\\n8\\n2\\n0\\n40\\n\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '2 5'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}",
            "{\"output\": \"0\\n2\\n\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"0\\n0\\n\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not tuple')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"11\\n1 1 2 3 4 4 7 10 11 12 20\\n5\\n2 5\\n3 8\\n7 11\\n1 2\\n1 11\", \"expected\": \"2\\n3\\n1\\n0\\n5\"}"
        ],
        [
            "{\"execution time\": 0.21749472618103027}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.3003218173980713}",
            "{\"execution time\": 0.19126415252685547}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.263106107711792}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.3259143829345703}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"execution time\": 0.1840064525604248}",
            "{\"output\": \"None\\n\", \"inputs\": \"6\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 3\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"2432902008176640000\", \"expected\": \"20\"}",
            "{\"execution time\": 0.2386941909790039}",
            "{\"execution time\": 0.37879467010498047}",
            "{\"execution time\": 0.173628568649292}",
            "{\"execution time\": 0.21971583366394043}",
            "{\"execution time\": 0.19527745246887207}",
            "{\"execution time\": 0.1750180721282959}",
            "{\"output\": \"1559776269\\n\", \"inputs\": \"2432902008176640000\", \"expected\": \"20\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1559776269 != 20\"}"
        ],
        [
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"2\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 5\"}"
        ],
        [
            "{\"output\": \"9\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 3\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"16\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 16 != 3\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 3\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 3\"}",
            "{\"output\": \"16\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 16 != 3\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"3 9\\n4 1 9\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 3\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"execution time\": 2.721559524536133}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"execution time\": 2.73478627204895}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"expected\": \"6\\n6\\n8\"}",
            "{\"execution time\": 2.4798755645751953}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 9 3 0\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 12 9 3 0\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 12 9 3 0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 12 9 3 0\"}",
            "{\"output\": \"11\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 11 != 12 9 3 0\"}",
            "{\"output\": \"\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 12 9 3 0\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 998244353\", \"expected\": \"12 9 3 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 12 9 3 0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 5 3 4 1\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 5 3 4 1\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 3 1 4 5\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 5 3 4 1\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 3 1 4 5\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 3 1 4 5\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1 2 4 3 5\", \"expected\": \"Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"2 3 1 4 5\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}"
        ],
        [
            "{\"execution time\": 0.23183822631835938}",
            "{\"execution time\": 0.24016714096069336}",
            "{\"execution time\": 0.16953825950622559}",
            "{\"execution time\": 0.20218801498413086}",
            "{\"execution time\": 0.30440473556518555}",
            "{\"execution time\": 0.18720340728759766}",
            "{\"execution time\": 0.20320606231689453}",
            "{\"execution time\": 0.1753225326538086}",
            "{\"execution time\": 0.22036409378051758}",
            "{\"execution time\": 0.2291123867034912}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 3\\n?##\\n#.#\\n##?\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 5\\n.#?#.\\n.?#?.\\n?...?\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"8\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 8 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2\\n100000000000000000 100000000000000000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2\\n100000000000000000 100000000000000000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n2 5 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}"
        ],
        [
            "{\"output\": \"8\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 8 != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2 5000\\n1 200000 1\\n2 200000 1\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2 5000\\n1 200000 1\\n2 200000 1\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2 5000\\n1 200000 1\\n2 200000 1\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2 5000\\n1 200000 1\\n2 200000 1\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2 5000\\n1 200000 1\\n2 200000 1\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 0\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 25\\n1 8 5\\n2 3 5\\n2 7 10\\n3 2 5\\n3 3 10\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 16\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +=: 'int' and 'NoneType'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 16\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 16\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}",
            "{\"output\": \"20\\n\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 20 != 16\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 3 1 4\", \"expected\": \"16\"}"
        ],
        [
            "{\"output\": \"7\\n\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 1332\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not iterable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\", \"expected\": \"1332\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"output\": \"136\\n\", \"inputs\": \"3\", \"expected\": \"1332\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 136 != 1332\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"390\", \"expected\": \"727611652\"}"
        ],
        [
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}",
            "{\"output\": \"NE\\n\", \"inputs\": \"SE\", \"expected\": \"NW\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: NE != NW\"}"
        ],
        [
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable NoneType object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n#.#\\n..#\\n##.\\n.#\\n#.\", \"expected\": \"2 2\"}"
        ],
        [
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"output\": \"No\\nNo\\n\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '1 1\\\\\\\\n'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '1 1'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}",
            "{\"output\": \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\n\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=2: Yes != No\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5 3\\n1 1\\n1 2\\n2 2\\n3 2\\n2 3\\n6\\n1 1\\n1 2\\n2 3\\n2 5\\n3 4\\n3 5\", \"expected\": \"Yes\\nYes\\nNo\\nYes\\nNo\\nYes\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"1\\n000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"1\\n000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"1\\n000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"-6\\n\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -6 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"1\\n000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"1\\n000\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"6\\n\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 1\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not str')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not str')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\"}",
            "{\"output\": \"True\\n\", \"inputs\": \"2\\n010011101\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: True != 1\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"275 147628\\n790363564 708262434 6914088 796632205 575014633 553280975 459851002 922447116 53440518 130775198 413062680 692774964 292578347 126963857 79...(truncated) ...56 729969471 260469807 943707690 670783513 352477754 25606709 518527959 953376258 671988179 728473490 427461237 47425628 243122614 258009952 682547361\", \"expected\": \"2348511949110376445\\n\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for -: 'str' and 'int'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"error\": \"TypeError(\\\"object of type 'int' has no len()\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"output\": \"676 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 676 0 0 != 576 99 1\"}",
            "{\"error\": \"UnboundLocalError(\\\"local variable 'input' referenced before assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"output\": \"0 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 0 != 576 99 1\"}",
            "{\"error\": \"IndexError('list assignment index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"error\": \"ZeroDivisionError('integer division or modulo by zero')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\"}",
            "{\"output\": \"0 0 0\\n\", \"inputs\": \"2 2\\nab\", \"expected\": \"576 99 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 0 != 576 99 1\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 15 5\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"execution time\": 0.2582688331604004}",
            "{\"execution time\": 0.27181458473205566}",
            "{\"execution time\": 0.24799227714538574}",
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"execution time\": 0.2400805950164795}",
            "{\"output\": \"7\\n1\\n4\\n5\\n6\\n7\\n8\\n10\\n\", \"inputs\": \"10 3\\n3 9 2\", \"expected\": \"7\\n1 4 5 6 7 8 10\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}"
        ],
        [
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"2 4 3 1\\n\", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 4 3 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"4 3 2 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 3 2 1 != 3 4 1 2\"}",
            "{\"output\": \"2 4 3 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 4 3 1 != 3 4 1 2\"}",
            "{\"output\": \"2 4 3 1 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 4 3 1 != 3 4 1 2\"}",
            "{\"output\": \"4 1 3 2 \", \"inputs\": \"4\\n4 3 2 1\\n2 3 1 4\", \"expected\": \"3 4 1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 1 3 2 != 3 4 1 2\"}"
        ],
        [
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"output\": \"\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != 0.333333333333333\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"output\": \"0.16666666666666666\\n\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0.16666666666666666 != 0.333333333333333\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 1 2 3'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 1 2 3\\n4 1 2 2 1\\n6 1 2 3 4 5 6\", \"expected\": \"0.333333333333333\"}"
        ],
        [
            "{\"output\": \"1 1 2 1 4\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 1 4 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 1 4\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 1 4 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 4 1\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 4 1 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 4 1\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 4 1 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 4 1\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 4 1 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 1 4\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 1 4 != 4 2 3 1\"}",
            "{\"output\": \"1 4 2 3\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 4 2 3 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 4 1\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 4 1 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 1 4\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 1 4 != 4 2 3 1\"}",
            "{\"output\": \"1 1 2 1 4\\n\", \"inputs\": \"4\\n1 1 2 1\", \"expected\": \"4 2 3 1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 2 1 4 != 4 2 3 1\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n8 3 1 5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"7\\n300000 100000 499998 499999 200000 400000 500000\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"7\\n300000 100000 499998 499999 200000 400000 500000\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"7\\n300000 100000 499998 499999 200000 400000 500000\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"28607\\n218347 692253 209531 3078 426665 586361 954982 730225 871775 732792 398343 184319 856575 995486 654074 632860 72696 560330 326967 801044 19525 5...(truncated) ...9960 560085 752115 298984 407637 117478 508158 342026 247000 371632 416543 745042 849030 933832 975869 93471 348796 935187 615614 729531 482332 898298\", \"expected\": \"5868904\\n\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"None\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: None != 4\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"fine fine\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"AABCC\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 2\"}"
        ],
        [
            "{\"output\": \"2\\n\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"10\\n0101001001\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 7\"}",
            "{\"error\": \"ValueError('0 is not in list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"error\": \"ValueError('0 is not in list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"10\\n0101001001\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 7\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"10\\n0101001001\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 7\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"7\\n0101001\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"10\\n0101001001\", \"expected\": \"7\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 7\"}"
        ],
        [
            "{\"output\": \"3\\n4\\n6\\n1\\n0\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=4: 0 != 6\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\"}",
            "{\"output\": \"6\\n6\\n6\\n6\\n6\\n\", \"inputs\": \"5 2\\n3 4 6 7 12\", \"expected\": \"3\\n4\\n6\\n1\\n6\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 3\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 3\\n2 4 1 3 3\\n2 5\\n5 2\\n5 3\", \"expected\": \"2\\n1\\n2\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.17682266235351562}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.1919865608215332}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.2916233539581299}"
        ],
        [
            "{\"execution time\": 0.17459464073181152}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.23761987686157227}",
            "{\"execution time\": 0.2782936096191406}",
            "{\"execution time\": 0.23519039154052734}",
            "{\"execution time\": 0.3572123050689697}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.21555805206298828}",
            "{\"execution time\": 0.21134567260742188}",
            "{\"execution time\": 0.21614432334899902}"
        ],
        [
            "{\"execution time\": 0.19865083694458008}",
            "{\"execution time\": 0.21243667602539062}",
            "{\"execution time\": 0.23725008964538574}",
            "{\"execution time\": 0.3477935791015625}",
            "{\"execution time\": 0.19148921966552734}",
            "{\"execution time\": 0.2911510467529297}",
            "{\"execution time\": 0.2525601387023926}",
            "{\"execution time\": 0.19486546516418457}",
            "{\"execution time\": 0.20350170135498047}",
            "{\"execution time\": 0.17744922637939453}"
        ],
        [
            "{\"execution time\": 0.19481682777404785}",
            "{\"execution time\": 0.2572214603424072}",
            "{\"execution time\": 0.29668354988098145}",
            "{\"execution time\": 0.2827575206756592}",
            "{\"execution time\": 0.23433589935302734}",
            "{\"execution time\": 0.192368745803833}",
            "{\"execution time\": 0.23767518997192383}",
            "{\"execution time\": 0.2702915668487549}",
            "{\"execution time\": 0.1995997428894043}",
            "{\"execution time\": 0.20563077926635742}"
        ],
        [
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"output\": \"0 1 1 1 \\n1 0 1 1 \\n1 1 0 1 \\n1 1 1 0 \\n\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 1 1 != 0 1 2 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"IndexError('string index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\nab--\\n--b-\\n---a\\nc---\", \"expected\": \"0 1 2 4\\n-1 0 1 -1\\n3 -1 0 1\\n1 -1 -1 0\"}"
        ],
        [
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"error\": \"TypeError(\\\"unhashable type: 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n2 6\\n2 7\\n3 8\\n3 9\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 8\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"output\": \"0\\n0\\n\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 10\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable int object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"output\": \"0\\n0\\n\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 10\"}",
            "{\"error\": \"TypeError('can only concatenate list (not \\\"int\\\") to list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"error\": \"KeyError((1, 1, 10))\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"output\": \"-3\\n-3\\n\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -3 != 10\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}",
            "{\"error\": \"TypeError('cannot unpack non-iterable int object')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n12 10 6\\n1 1 3\\n8 6 7\\n2\\n1 1 10 3 1 6\\n1 1 6 1 2 4\", \"expected\": \"10\\n2\"}"
        ],
        [
            "{\"execution time\": 0.24073362350463867}",
            "{\"execution time\": 0.1864786148071289}",
            "{\"execution time\": 0.23922991752624512}",
            "{\"execution time\": 0.20539402961730957}",
            "{\"execution time\": 0.19192838668823242}",
            "{\"execution time\": 0.2509591579437256}",
            "{\"execution time\": 0.2242906093597412}",
            "{\"execution time\": 0.20998382568359375}",
            "{\"execution time\": 0.23608160018920898}",
            "{\"execution time\": 0.21297979354858398}"
        ],
        [
            "{\"execution time\": 0.27463197708129883}",
            "{\"output\": \"...........\\n##########\\n.........\\n########\\n.......\\n######\\n.....\\n####\\n...\\n##\\n.\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ........... != ###########\"}",
            "{\"output\": \"###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: ........... != #.........#\"}",
            "{\"output\": \"...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ........... != ###########\"}",
            "{\"output\": \"...........\\n..#########\\n...........\\n....#######\\n...........\\n......#####\\n...........\\n........###\\n...........\\n..........#\\n...........\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ........... != ###########\"}",
            "{\"output\": \"###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: ........... != #.........#\"}",
            "{\"execution time\": 0.25128698348999023}",
            "{\"execution time\": 0.2544596195220947}",
            "{\"output\": \"###########\\n...........\\n..#########\\n...........\\n....#######\\n...........\\n......#####\\n...........\\n........###\\n...........\\n..........#\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: ........... != #.........#\"}",
            "{\"output\": \"###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n...........\\n###########\\n\", \"inputs\": \"11\", \"expected\": \"###########\\n#.........#\\n#.#######.#\\n#.#.....#.#\\n#.#.###.#.#\\n#.#.#.#.#.#\\n#.#.###.#.#\\n#.#.....#.#\\n#.#######.#\\n#.........#\\n###########\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: ........... != #.........#\"}"
        ],
        [
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"error\": \"AttributeError(\\\"'set' object has no attribute 'index'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 9 5 3 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}"
        ],
        [
            "{\"output\": \"4\\n\", \"inputs\": \"5 6 1\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"10\\n\", \"inputs\": \"5 6 5\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 10 != 4\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5 6 1\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5 6 1\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5 6 1\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5 6 1\\n1 2\\n2 4\\n3 1\\n3 5\\n4 3\\n5 2\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 15\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 15\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 15\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 15\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 15\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 15\"}",
            "{\"output\": \"112\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 112 != 15\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 15\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n3 1\\n4 1\\n5 9\\n2 6\", \"expected\": \"15\"}"
        ],
        [
            "{\"execution time\": 0.2205362319946289}",
            "{\"execution time\": 0.27402782440185547}",
            "{\"execution time\": 0.21246957778930664}",
            "{\"execution time\": 0.20899581909179688}",
            "{\"execution time\": 0.23906970024108887}",
            "{\"execution time\": 0.19923782348632812}",
            "{\"execution time\": 0.23000240325927734}",
            "{\"execution time\": 0.2766609191894531}",
            "{\"execution time\": 0.2478938102722168}",
            "{\"execution time\": 0.23265695571899414}"
        ],
        [
            "{\"execution time\": 0.23355412483215332}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}",
            "{\"output\": \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('pop from empty list')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"expected\": \"0\\n3\\n4\\n0\"}"
        ],
        [
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"13\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 13 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"15\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 15 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4 3\\n8 5 -1 3\\n3 -2 -4\", \"expected\": \"19\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 19\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not tuple')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}",
            "{\"error\": \"TypeError('list indices must be integers or slices, not tuple')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2 3\\n2 4 5\\n1 3 4\\n3 4 7\", \"expected\": \"3\"}"
        ],
        [
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 3 4\\n1 2 3\", \"expected\": \"0 3 4\"}"
        ],
        [
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"error\": \"NameError(\\\"name 'k' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"NameError(\\\"name 'N' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n2 1 0\", \"expected\": \"3\\n1\\n1\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"181579 182234\\n98350 92079 136618 119840 88219 167683 94034 75006 139413 9898 32507 101582 18565 15225 125406 82156 85215 65484 123011 28759 131784 110...(truncated) ...49072 74850 23336 76393 9910 31690 23368 80797 136300 153679 42307 97490 146554 38116 65655 181059 121686 41999 41416 24758 112729 173695 122653 70334\", \"expected\": \"8242879350\\n8242879350\\n8243051318\\n8243008836\\n8243166296\\n8243316392\\n8243316392\\n8243430134\\n8243430134\\n8243430134\\n8243430134\\n8243430134\\n8243407884\\n8243352...(truncated) ...053064\\n8243053064\\n8242925482\\n8242990308\\n8242990308\\n8243083092\\n8243083092\\n8243032524\\n8243032524\\n8243032524\\n8243032524\\n8243032524\\n8242917472\\n8242865310\\n\"}"
        ],
        [
            "{\"output\": \"219\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 219 != 2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"220\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 220 != 2\"}",
            "{\"output\": \"220\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 220 != 2\"}",
            "{\"output\": \"110\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 110 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"3 3\\n100\\n010\\n110\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}"
        ],
        [
            "{\"execution time\": 0.25092053413391113}",
            "{\"execution time\": 0.18393993377685547}",
            "{\"execution time\": 0.286041259765625}",
            "{\"execution time\": 0.24104714393615723}",
            "{\"execution time\": 0.2064361572265625}",
            "{\"execution time\": 0.29287242889404297}",
            "{\"execution time\": 0.25490736961364746}",
            "{\"execution time\": 0.20303606986999512}",
            "{\"execution time\": 0.23070096969604492}",
            "{\"execution time\": 0.2678356170654297}"
        ],
        [
            "{\"output\": \"-1\\n\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 1\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"iioo\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"iioo\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 1\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"iioo\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"iioo\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"ioi\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"iioo\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}"
        ],
        [
            "{\"output\": \"7\\n\", \"inputs\": \"10\\n2 5 6 5 2 1 7 9 7 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 8\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"10\\n2 5 6 5 2 1 7 9 7 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 8\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 5\"}",
            "{\"output\": \"8\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 8 != 5\"}"
        ],
        [
            "{\"output\": \"(1, 199)\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: (1, 199) != 12 11\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"output\": \"(1, 398)\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: (1, 398) != 12 11\"}",
            "{\"output\": \"(1, 199)\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: (1, 199) != 12 11\"}",
            "{\"output\": \"(1, 199)\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: (1, 199) != 12 11\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"output\": \"1 199\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 199 != 12 11\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 12 11\"}",
            "{\"output\": \"(1, 199)\\n\", \"inputs\": \"397\", \"expected\": \"12 11\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: (1, 199) != 12 11\"}"
        ],
        [
            "{\"error\": \"NameError(\\\"name 'visited' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error\": \"TypeError(\\\"'set' object does not support item assignment\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3 2\\n1 2\\n2 3\\n3 4\\n2 5\\n5 6\", \"expected\": \"Yes\"}"
        ],
        [
            "{\"output\": \"7\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 5\"}",
            "{\"output\": \"6\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 5\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\"}",
            "{\"output\": \"11\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 11 != 5\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 5\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 5\"}",
            "{\"output\": \"11\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 11 != 5\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"1458\\n842 118 90 389 1040 248 1092 94 306 738 695 397 59 1444 432 555 300 209 308 727 242 61 23 1317 1227 162 562 560 894 1170 979 643 293 765 212 1260...(truncated) ...765 767 634 522 134 25 643 229 71 1404 119 433 261 457 824 172 553 1269 1146 300 835 78 1036 436 347 977 4 291 701 687 1405 895 677 1406 1414 1316 934\", \"expected\": \"1233\\n\"}",
            "{\"output\": \"11\\n\", \"inputs\": \"5\\n3 1 4 1 5\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 11 != 5\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"2 2 1\\n1 2\\n1 2\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2 2 1\\n1 2\\n1 2\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"2 2 1\\n1 2\\n1 2\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"error\": \"KeyError(3)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('tuple index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 0)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('tuple index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3 2\\n1 2\\n2 3\\n1 3\", \"expected\": \"1\"}"
        ],
        [
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}",
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}",
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}",
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}",
            "{\"output\": \"---\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --- != -==-\"}",
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}",
            "{\"output\": \"\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0:  != -==-\"}",
            "{\"output\": \"---=---\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ---=--- != -==-\"}",
            "{\"output\": \"----\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ---- != -==-\"}",
            "{\"output\": \"--=--\\n\", \"inputs\": \"4\", \"expected\": \"-==-\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: --=-- != -==-\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"11 12 13 10 13 12 11\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"3 2 2 2 2 3 2\", \"expected\": \"Yes\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"11 12 13 10 13 12 11\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}"
        ],
        [
            "{\"error\": \"KeyError(1)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"error\": \"KeyError(1)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 9\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: unmatched ')' (<string>, line 7)\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"output\": \"7\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 7 != 9\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 9\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"9\\n2 9 9 7 9 2 4 5 8\", \"expected\": \"9\"}"
        ],
        [
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}",
            "{\"output\": \"000000\\n\", \"inputs\": \"6 -2 1\\nNNEEWS\", \"expected\": \"001010\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 000000 != 001010\"}"
        ],
        [
            "{\"output\": \"ABC\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABC != ABCBA\"}",
            "{\"output\": \"ABC\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABC != ABCBA\"}",
            "{\"output\": \"ABC\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABC != ABCBA\"}",
            "{\"output\": \"BCABC\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: BCABC != ABCBA\"}",
            "{\"output\": \"ABCA\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABCA != ABCBA\"}",
            "{\"output\": \"ABCA\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABCA != ABCBA\"}",
            "{\"output\": \"ABCA\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABCA != ABCBA\"}",
            "{\"output\": \"ABCA\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABCA != ABCBA\"}",
            "{\"execution time\": 0.25673961639404297}",
            "{\"output\": \"ABCA\\n\", \"inputs\": \"ABC\", \"expected\": \"ABCBA\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: ABCA != ABCBA\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 2\\n1 2\\n3 4\", \"expected\": \"Takahashi\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"error\": \"NameError(\\\"name 'N' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\"}",
            "{\"output\": \"Aoki\\n\", \"inputs\": \"4 2\\n1 2\\n3 4\", \"expected\": \"Takahashi\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Aoki != Takahashi\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}",
            "{\"output\": \"Takahashi\\n\", \"inputs\": \"4 3\\n1 2\\n2 3\\n3 4\", \"expected\": \"Aoki\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Takahashi != Aoki\"}"
        ],
        [
            "{\"execution time\": 0.2615480422973633}",
            "{\"execution time\": 0.2689237594604492}",
            "{\"execution time\": 0.2883284091949463}",
            "{\"execution time\": 0.22426462173461914}",
            "{\"execution time\": 0.2961235046386719}",
            "{\"execution time\": 0.21516203880310059}",
            "{\"execution time\": 0.34772491455078125}",
            "{\"execution time\": 0.3477466106414795}",
            "{\"execution time\": 0.22489714622497559}",
            "{\"execution time\": 0.28658127784729004}"
        ],
        [
            "{\"output\": \"5\\n1\\n2\\n2\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 4\"}",
            "{\"output\": \"0\\n1\\n0\\n0\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 4\"}",
            "{\"output\": \"6\\n1\\n2\\n4\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 4\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\"}",
            "{\"execution time\": 0.25645971298217773}",
            "{\"output\": \"0\\n1\\n2\\n0\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 4\"}",
            "{\"execution time\": 0.2576572895050049}",
            "{\"execution time\": 0.27515101432800293}",
            "{\"output\": \"4\\n1\\n2\\n3\\n\", \"inputs\": \"4\\n3 12 9 9\", \"expected\": \"4\\n1\\n2\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=3: 3 != 2\"}",
            "{\"execution time\": 0.22570276260375977}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"5 0\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4\\n1 2\\n1 3\\n2 4\\n3 4\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}"
        ],
        [
            "{\"output\": \"2\\n0\\n5\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\"}",
            "{\"output\": \"1\\n4\\n5\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 4 != 0\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\"}",
            "{\"output\": \"2\\n0\\n0\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"0\\n2\\n0\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"12\\n13\\n40\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 1\"}",
            "{\"output\": \"3\\n4\\n5\\n\", \"inputs\": \"3\\n3\\n1 2 3 3 1 2\\n4\\n1 1 2 2 3 3 4 4\\n5\\n1 2 3 4 5 1 2 3 4 5\", \"expected\": \"1\\n0\\n4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 1\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"60\\n7\\n2 5 4 6 4 3 3 7 1 2 5 1 7 6\\n9\\n4 8 5 2 7 6 1 3 3 6 9 7 8 2 4 9 1 5\\n6\\n2 6 5 1 3 5 3 2 4 4 6 1\\n2\\n2 1 1 2\\n10\\n6 4 7 2 5 7 1 2 8 9 10 3 5 10 4 3 9 8 1 ...(truncated) ... 28 28 27 27 26 26 25 25 24 24 23 23 22 22 21 21 20 20 19 19 18 18 17 17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 9 9 8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1\", \"expected\": \"2\\n0\\n0\\n0\\n1\\n1\\n1\\n0\\n2\\n0\\n1\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n2\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n1\\n2\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n9999\\n9998\\n0\\n0\\n9999\\n9998\\n0\\n0\\n\"}"
        ],
        [
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"6\\nafbfda\\nbkckbb\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 4\"}"
        ],
        [
            "{\"output\": \"106\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 106 != 75\"}",
            "{\"output\": \"27\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 27 != 75\"}",
            "{\"output\": \"56\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 56 != 75\"}",
            "{\"output\": \"56\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 56 != 75\"}",
            "{\"output\": \"106\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 106 != 75\"}",
            "{\"output\": \"31\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 31 != 75\"}",
            "{\"output\": \"196\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 196 != 75\"}",
            "{\"output\": \"56\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 56 != 75\"}",
            "{\"output\": \"56\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 56 != 75\"}",
            "{\"output\": \"56\\n\", \"inputs\": \"3 2\\n3 1 2\", \"expected\": \"75\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 56 != 75\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"10\", \"expected\": \"40\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 40\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.19223690032958984}",
            "{\"execution time\": 0.30673909187316895}",
            "{\"execution time\": 0.2482318878173828}",
            "{\"execution time\": 0.21097421646118164}",
            "{\"output\": \"55\\n\", \"inputs\": \"7 3\", \"expected\": \"400\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 55 != 400\"}",
            "{\"execution time\": 0.20403027534484863}",
            "{\"execution time\": 0.20774364471435547}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"execution time\": 0.21645522117614746}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"20\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 5\"}"
        ],
        [
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '..........'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '..........'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"output\": \"-1\\n\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '..........'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '..........'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"10 10\\n..........\\n#########.\\n#.......#.\\n#..####.#.\\n##....#.#.\\n#####.#.#.\\n.##.#.#.#.\\n###.#.#.#.\\n###.#.#.#.\\n#.....#...\\n1 1 7 1\", \"expected\": \"1\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"output\": \"401\\n31\\n59\\n999999999989\\n123456761\\n\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 401 != 400\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"10\\n36\\n37\\n48\\n100\\n999999999999\\n1000000000000\\n999999999998\\n999999999997\\n404\\n123456789\", \"expected\": \"36\\n36\\n36\\n100\\n999994000009\\n1000000000000\\n999994000009\\n999994000009\\n400\\n123454321\\n\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}",
            "{\"output\": \"529\\n529\\n529\\n529\\n529\\n\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 529 != 400\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"5\\n404\\n36\\n60\\n1000000000000\\n123456789\", \"expected\": \"400\\n36\\n36\\n1000000000000\\n123454321\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\n5 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n100 100 200\\n6 2\\n21 74 25\\n44 71 80\\n46 28 96\\n1 74 24\\n81 83 16\\n55 31 1\", \"expected\": \"209\\n333\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"11\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 11 != 12\"}",
            "{\"output\": \"12\\n324\\n\", \"inputs\": \"2\\n5 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n100 100 200\\n6 2\\n21 74 25\\n44 71 80\\n46 28 96\\n1 74 24\\n81 83 16\\n55 31 1\", \"expected\": \"209\\n333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 209\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"9\\n\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 12\"}",
            "{\"output\": \"12\\n12\\n\", \"inputs\": \"2\\n5 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n100 100 200\\n6 2\\n21 74 25\\n44 71 80\\n46 28 96\\n1 74 24\\n81 83 16\\n55 31 1\", \"expected\": \"209\\n333\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 209\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"1\\n3 1\\n6 3 8\\n3 5 0\\n2 7 3\", \"expected\": \"12\"}"
        ],
        [
            "{\"output\": \"(14, '1 2 3 4 5')\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"8 (2, 4) (3, 5) (1, 4) (2, 5)\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"4 1 1 1 1 1\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"14 0 0 0 0 0\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"4\\n0 0 0 0 0\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 2\"}",
            "{\"output\": \"14 0 0 0 0 1\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"14\\n0 0 0 0 0\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 14 != 2\"}",
            "{\"output\": \"14 0 0 0 0 0\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"8 1 1 1 1 1\\n\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4\\n2 4\\n3 5\\n1 4\\n2 5\", \"expected\": \"2\\n2 0 1 0\"}"
        ],
        [
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'U'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 456\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '3 2 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'R'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TypeError('not all arguments converted during string formatting')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: duplicate argument 'A' in function definition (<string>, line 41)\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: 'R 8'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n1 2 3\\n4 5 6\\n3 2 2\\nU 7\\nR 8\\nL 9\", \"expected\": \"456\\n666\\n822\"}"
        ],
        [
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for @: 'list' and 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\"}",
            "{\"error\": \"TypeError(\\\"can't multiply sequence by non-int of type 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\"}",
            "{\"output\": \"0 0\\n0 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 0 2\"}",
            "{\"output\": \"0 1 \\n0 8 \\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 != 0 2\"}",
            "{\"output\": \"0 2 \\n0 1 \\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=1: 0 1 != 1 2\"}",
            "{\"error\": \"TypeError(\\\"can't multiply sequence by non-int of type 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for @: 'list' and 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\"}",
            "{\"output\": \"0 1 \\n0 2 \\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 != 0 2\"}",
            "{\"output\": \"0 1\\n0 2\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 1 != 0 2\"}",
            "{\"output\": \"0 0\\n0 0\\n\", \"inputs\": \"2 3\\n0 1\\n0 2\", \"expected\": \"0 2\\n1 2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 0 != 0 2\"}"
        ],
        [
            "{\"output\": \"391\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 391 != 593\"}",
            "{\"output\": \"532\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 532 != 593\"}",
            "{\"output\": \"325\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 325 != 593\"}",
            "{\"output\": \"532\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 532 != 593\"}",
            "{\"output\": \"391\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 391 != 593\"}",
            "{\"output\": \"532\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 532 != 593\"}",
            "{\"output\": \"391\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 391 != 593\"}",
            "{\"output\": \"391\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 391 != 593\"}",
            "{\"output\": \"1235\\n\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1235 != 593\"}",
            "{\"error\": \"NameError(\\\"name 'i' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 3\\n191\\n325\", \"expected\": \"593\"}"
        ],
        [
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\"}",
            "{\"output\": \"1 1\\n1 1\\n1 1\\n1 1\\n\", \"inputs\": \"4\\n3\\n16\\n1\\n55\", \"expected\": \"2 7\\n11 68\\n20250126 1\\n33 662\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 1 != 2 7\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}",
            "{\"error\": \"NameError(\\\"name 'B' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 4)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 4)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 4)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4 4 3 4\\n2 4\\n1 4\\n3 4\\n2 3\", \"expected\": \"3\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}"
        ],
        [
            "{\"output\": \"Yes\\n\", \"inputs\": \"3\\n0 0 0\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"12\\n0 1 0 1 1 1 1 0 1 1 1 0\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"Snuke\\n\", \"inputs\": \"10\\n10 12 7 2 13 6 10 15 6 14\", \"expected\": \"Fennec\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Fennec\\n\", \"inputs\": \"2\\n25 29\", \"expected\": \"Snuke\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Fennec != Snuke\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"10\\n10 12 7 2 13 6 10 15 6 14\", \"expected\": \"Fennec\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"error\": \"KeyError(0)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}",
            "{\"output\": \"Snuke\\n\", \"inputs\": \"3\\n1 9 2\", \"expected\": \"Fennec\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Snuke != Fennec\"}"
        ],
        [
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after 'if' statement on line 34 (<string>, line 35)\"}",
            "{\"error\": \"IndexError('tuple index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after 'if' statement on line 34 (<string>, line 35)\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 939634344\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"6\\n1 9 2 2 9\", \"expected\": \"939634344\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after 'if' statement on line 34 (<string>, line 35)\"}"
        ],
        [
            "{\"output\": \"2\\n\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 192\"}",
            "{\"error\": \"NameError(\\\"name 'MOD' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 192\"}",
            "{\"error\": \"NameError(\\\"name 'MOD' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 192\"}",
            "{\"error\": \"NameError(\\\"name 'MOD' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\"}",
            "{\"error\": \"NameError(\\\"name 'MOD' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 192\"}",
            "{\"error\": \"NameError(\\\"name 'MOD' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\"}",
            "{\"output\": \"60\\n\", \"inputs\": \"4 3 1 2 2 3\", \"expected\": \"192\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 60 != 192\"}"
        ],
        [
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '7 8\\\\\\\\n'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"output\": \"9\\n-1\\n-1\\n\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 11\"}",
            "{\"error\": \"TypeError(\\\"'int' object is not subscriptable\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '5\\\\\\\\n5 1 4 2 2\\\\\\\\n2 4\\\\\\\\n1 2\\\\\\\\n7 8\\\\\\\\n4 5\\\\\\\\n2 7\\\\\\\\n3\\\\\\\\n1 4\\\\\\\\n4 3\\\\\\\\n5 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '7 8'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"TypeError(\\\"unhashable type: 'list'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '5\\\\\\\\n5 1 4 2 2\\\\\\\\n2 4\\\\\\\\n1 2\\\\\\\\n7 8\\\\\\\\n4 5\\\\\\\\n2 7\\\\\\\\n3\\\\\\\\n1 4\\\\\\\\n4 3\\\\\\\\n5 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '5\\\\\\\\n5 1 4 2 2\\\\\\\\n2 4\\\\\\\\n1 2\\\\\\\\n7 8\\\\\\\\n4 5\\\\\\\\n2 7\\\\\\\\n3\\\\\\\\n1 4\\\\\\\\n4 3\\\\\\\\n5 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5\\n5 1 4 2 2\\n2 4\\n1 2\\n7 8\\n4 5\\n2 7\\n3\\n1 4\\n4 3\\n5 2\", \"expected\": \"11\\n6\\n-1\"}"
        ],
        [
            "{\"output\": \"0\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 14\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 14\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 14\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 14\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 14\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 14\"}",
            "{\"output\": \"12\\n\", \"inputs\": \"3\\n010\", \"expected\": \"14\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 12 != 14\"}"
        ],
        [
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"3\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=2: -1 != 5\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"4\\n-1\\n12\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"error\": \"TypeError(\\\"unsupported operand type(s) for +: 'int' and 'str'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}",
            "{\"output\": \"-1\\n-1\\n-1\\n\", \"inputs\": \"3\\n8\\n01001101\\n00001011\\n3\\n010\\n111\\n20\\n10100011011110101011\\n00010001111101100000\", \"expected\": \"3\\n-1\\n5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -1 != 3\"}"
        ],
        [
            "{\"output\": \"-10\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -10 != 8\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 8\"}",
            "{\"output\": \"-4\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -4 != 8\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 8\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 8\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 8\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 8\"}",
            "{\"output\": \"-4\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: -4 != 8\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 8\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"6\\n3 -1 -4 5 -9 2\", \"expected\": \"8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 8\"}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"3\\n3 2 1\", \"expected\": \"4\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 4\"}"
        ],
        [
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}",
            "{\"output\": \"19\\n\", \"inputs\": \"4\\n0 1 1 1\\n1 0 1 0\\n4 6 2 9\", \"expected\": \"16\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 19 != 16\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2\\n()\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"6\\n\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 6 != 2\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2\\n()\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2\\n()\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"6\\n(())()\", \"expected\": \"2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"780 574 134\\n010011100100010010100010101101111100101010111000010001100010010011000010010101010010100011100011101011010110010011110001010100100101111101...(truncated) ...010110011011000101111000000100010111100111010111110010110011110000001011100100000001001001001011000001111100000011110011001000000101010010110101100101\", \"expected\": \"No\\n\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"1 1 1\\n0\\n1\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"9 2 1\\n000111001\\n011000011\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3 2\\n1 2 1\\n1 2\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error\": \"KeyError(1)\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4 2\\n1 2 1 2\\n1 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}"
        ],
        [
            "{\"output\": \"No\\n\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\n\", \"inputs\": \"4\\n2 0 -1 3\\n3 -1 4 2\", \"expected\": \"Yes\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: No != Yes\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3\\n1 2 3\\n1 2 4\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3\\n1 2 3\\n1 2 4\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\n\", \"inputs\": \"3\\n1 2 3\\n1 2 4\", \"expected\": \"No\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: Yes != No\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"error\": \"EOFError('EOF when reading a line')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\"}",
            "{\"output\": \"Yes\\nB 1 1\\nR 1 2\\nR 2 2\\nR 2 1\\nYes\\nB 1 1\\nR 1 2\\nR 2 2\\nR 2 1\\nNo\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"Yes\\nYes\\nNo\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"No\\nYes\\nB 2 3\\nR 3 2\\nNo\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"output\": \"No\\nYes\\n1 1 1\\n1 1 1\\nNo\\n\", \"inputs\": \"3\\n2 3\\n1 1\\n4 0\", \"expected\": \"Yes\\nB 2 3\\nR 3 2 \\nB 2 2\\nB 3 3\\nR 2 4\\nNo\\nYes\\nR 1 1\\nR 1 2\\nR 2 2\\nR 2 1\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"5\\n0\\n0\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"4\\n4\\n11\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"4\\n4\\n11\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"1\\n0\\n0\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\"}",
            "{\"output\": \"4\\n4\\n11\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 3\"}",
            "{\"output\": \"5\\n0\\n0\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 3\"}",
            "{\"output\": \"2\\n3\\n10\\n\", \"inputs\": \"3\\n5\\n1 1 2 1 2\\n4\\n4 2 1 3\\n11\\n1 2 1 2 1 2 1 2 1 2 1\", \"expected\": \"3\\n4\\n8\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 3\"}"
        ],
        [
            "{\"error\": \"TimeoutException()\", \"error_code\": -3, \"error_message\": \"Time Limit Exceeded\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"NameError(\\\"name 'P' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '1 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '1 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"ValueError(\\\"invalid literal for int() with base 10: '1 2'\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error\": \"NameError(\\\"name 'P' is not defined\\\")\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3 2\\n1 1\\n1 2\\n1 3\", \"expected\": \"2\\n3\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}"
        ],
        [
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 5\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}",
            "{\"output\": \"3\\n\", \"inputs\": \"4\\n1 2 5 3\", \"expected\": \"5\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 3 != 5\"}"
        ],
        [
            "{\"output\": \"\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer: mismatched output length\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"9\\n9\\n12\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 9 != 2\"}",
            "{\"output\": \"18\\n18\\n18\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 2\"}",
            "{\"output\": \"0\\n1\\n2\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -5, \"error_message\": \"TestRunnerError\"}",
            "{\"output\": \"18\\n18\\n18\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 18 != 2\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 2, got 1)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}",
            "{\"output\": \"0\\n0\\n0\\n\", \"inputs\": \"3\\n3 3\\nAAB\\nAAB\\nBBB\\n3 3\\nBBA\\nABA\\nAAB\\n3 4\\nBAAB\\nBABA\\nBBAA\", \"expected\": \"2\\n0\\n2\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 2\"}"
        ],
        [
            "{\"output\": \"1\\n\", \"inputs\": \"4\\nBWWBWBWB\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4\\nBWWBWBWB\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 0\"}",
            "{\"output\": \"0\\n\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 0 != 1\"}",
            "{\"output\": \"1\\n\", \"inputs\": \"4\\nBWWBWBWB\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 1 != 0\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"4\\n\", \"inputs\": \"4\\nBWWBWBWB\", \"expected\": \"0\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 4 != 0\"}",
            "{\"output\": \"2\\n\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 2 != 1\"}",
            "{\"output\": \"5\\n\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\", \"error_code\": -2, \"error_message\": \"Wrong answer at output_line_idx=0: 5 != 1\"}",
            "{\"error_code\": -4, \"error_message\": \"Error during testing: expected an indented block after function definition on line 38 (<string>, line 38)\"}",
            "{\"error\": \"IndexError('list index out of range')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"2\\nBWBW\", \"expected\": \"1\"}"
        ],
        [
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('not enough values to unpack (expected 3, got 2)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}",
            "{\"error\": \"ValueError('too many values to unpack (expected 3)')\", \"error_code\": -4, \"error_message\": \"Runtime Error\", \"inputs\": \"5 4 2\\n4 2\\n1 3\\n3 5\\n2 4\\n1 3\\n2 4\", \"expected\": \"Yes\\nNo\"}"
        ]
    ]
]