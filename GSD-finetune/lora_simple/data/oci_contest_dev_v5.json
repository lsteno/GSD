[
  {
    "input": "You are given a sorted list of integers and a target integer. Implement a binary search algorithm to find the index of the target integer in the list. If the target integer is not present, return -1.\n\n**Input:**\n- The first line contains a comma-separated list of integers.\n- The second line contains the target integer to search for.\n\n**Output:**\n- Print the index of the target integer if it exists in the list, otherwise print -1.\n\n**Sample Input:**\n```\n1,3,5,7,9\n5\n```\n\n**Sample Output:**\n```\n2\n```\n\n**Sample Input:**\n```\n1,3,5,7,9\n4\n```\n\n**Sample Output:**\n```\n-1\n```",
    "output": "def binary_search(arr, target):\n    \"\"\"\n    Perform binary search on a sorted list to find the index of the target integer.\n    \n    Parameters:\n    arr (list of int): The sorted list of integers.\n    target (int): The target integer to search for.\n    \n    Returns:\n    int: The index of the target integer if found, otherwise -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef main():\n    \"\"\"\n    Main function to handle input and output for the binary search problem.\n    \"\"\"\n    input_list = input().strip()\n    target = int(input().strip())\n    arr = list(map(int, input_list.split(',')))\n    result = binary_search(arr, target)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert binary_search([1, 2, 3, 4, 5], 3) == 2\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 6) == -1\\n\", \"\\nassert binary_search([10, 20, 30, 40, 50], 20) == 1\\n\", \"\\nassert binary_search([10, 20, 30, 40, 50], 10) == 0\\n\", \"\\nassert binary_search([10, 20, 30, 40, 50], 50) == 4\\n\", \"\\nassert binary_search([], 1) == -1\\n\", \"\\nassert binary_search([1], 1) == 0\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11], 7) == 3\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11], 11) == 5\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11], 1) == 0\\n\"]"
  },
  {
    "input": "You are given an array of distinct integers and an integer K. Your task is to write a function that returns the K-th largest element in the array. The array will have at least K elements.\n\n**Input:**\n- The first line contains an integer N, the number of elements in the array.\n- The second line contains N space-separated integers representing the array.\n- The third line contains an integer K.\n\n**Output:**\n- Print the K-th largest element in the array.\n\n**Sample Input:**\n```\n5\n1 3 4 2 5\n2\n```\n\n**Sample Output:**\n```\n4\n```",
    "output": "def find_kth_largest(arr, k):\n    \"\"\"\n    Returns the K-th largest element in the given array of distinct integers.\n    \n    :param arr: List[int] - A list of distinct integers.\n    :param k: int - The K-th position to find the largest element for (1-based index).\n    :return: int - The K-th largest element in the array.\n    \"\"\"\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return the K-th largest element (1-based index)\n    return sorted_arr[k-1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    K = int(input().strip())\n    print(find_kth_largest(arr, K))\n",
    "_category": "array_numeric",
    "unit_tests": "[\"\\nassert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5\\n\", \"\\nassert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\\n\", \"\\nassert find_kth_largest([1, 2, 3, 4, 5], 1) == 5\\n\", \"\\nassert find_kth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 1\\n\", \"\\nassert find_kth_largest([1], 1) == 1\\n\", \"\\nassert find_kth_largest([7, 6, 5, 4, 3, 2, 1], 3) == 5\\n\", \"\\nassert find_kth_largest([5, 3, 1, 2, 4], 5) == 1\\n\", \"\\nassert find_kth_largest([100, 90, 80, 70, 60], 2) == 90\\n\", \"\\nassert find_kth_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 4\\n\", \"\\nassert find_kth_largest([2, 1], 2) == 1\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple calculator that can evaluate basic arithmetic expressions. The calculator should support addition (+), subtraction (-), multiplication (*), and division (/). The input will be a string formatted as \"operand1 operator operand2\", where operand1 and operand2 are decimal numbers (which may be negative) and operator is one of the four arithmetic operators. The calculator should handle division by zero by returning the string \"Error: Division by zero\". If an unsupported operator is provided, return \"Error: Unsupported operator\".\n\n**Sample Input:**\n```\n3 + 5\n-2 * 4.5\n10 / 0\n7 ^ 3\n```\n\n**Sample Output:**\n```\n8.0\n-9.0\nError: Division by zero\nError: Unsupported operator\n```",
    "output": "def calculate(expression):\n    \"\"\"\n    Evaluates a basic arithmetic expression provided as a string.\n    \n    Args:\n    expression (str): A string representing the arithmetic expression in the format \"operand1 operator operand2\".\n    \n    Returns:\n    float or str: The result of the arithmetic operation or an error message if the operation cannot be performed.\n    \"\"\"\n    # Split the expression to get operands and operator\n    expression_parts = expression.split()\n    operand1 = float(expression_parts[0])\n    operator = expression_parts[1]\n    operand2 = float(expression_parts[2])\n    \n    # Perform the calculations based on the operator\n    if operator == '+':\n        return operand1 + operand2\n    elif operator == '-':\n        return operand1 - operand2\n    elif operator == '*':\n        return operand1 * operand2\n    elif operator == '/':\n        # Handle division by zero\n        if operand2 == 0:\n            return \"Error: Division by zero\"\n        return operand1 / operand2\n    else:\n        return \"Error: Unsupported operator\"\n\n# Example usage\nuser_input = input(\"Enter a calculation (e.g., 3 + 5): \")\nresult = calculate(user_input)\nprint(\"Result:\", result)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert calculate(\\\"3 + 5\\\") == 8\\n\", \"\\nassert calculate(\\\"10 - 4\\\") == 6\\n\", \"\\nassert calculate(\\\"7 * 6\\\") == 42\\n\", \"\\nassert calculate(\\\"8 / 2\\\") == 4\\n\", \"\\nassert calculate(\\\"10.5 + 2.5\\\") == 13.0\\n\", \"\\nassert calculate(\\\"-3 + 7\\\") == 4\\n\", \"\\nassert calculate(\\\"5 * -2\\\") == -10\\n\", \"\\nassert calculate(\\\"10 / 0\\\") == \\\"Error: Division by zero\\\"\\n\", \"\\nassert calculate(\\\"3 ^ 4\\\") == \\\"Error: Unsupported operator\\\"\\n\", \"\\nassert calculate(\\\"0 / 5\\\") == 0\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple dice game simulation. In this game, a six-sided die is rolled a specified number of times. The player wins if they roll a six. Your program should take an integer input representing the number of rolls and output the total number of sixes rolled and the percentage of sixes rolled out of the total rolls. Assume the input is always a non-negative integer.\n\n**Sample Input:**\n```\n10\n```\n\n**Sample Output:**\n```\nRoll result: 3\nRoll result: 6\nRoll result: 1\nRoll result: 4\nRoll result: 6\nRoll result: 2\nRoll result: 5\nRoll result: 6\nRoll result: 3\nRoll result: 1\nTotal number of sixes rolled: 3\nPercentage of sixes rolled: 30.00%\n```",
    "output": "import random\n\ndef dice_game(num_rolls):\n    \"\"\"\n    Simulates a dice game where a six-sided die is rolled a specified number of times.\n    Outputs the total number of sixes rolled and the percentage of sixes rolled.\n\n    :param num_rolls: int, the number of times the die is rolled\n    \"\"\"\n    if num_rolls <= 0:\n        print(\"The number of rolls must be a positive integer.\")\n        return\n\n    six_count = 0\n\n    for _ in range(num_rolls):\n        roll = random.randint(1, 6)\n        print(f\"Roll result: {roll}\")\n        if roll == 6:\n            six_count += 1\n\n    six_percentage = (six_count / num_rolls) * 100 if num_rolls > 0 else 0\n    print(f\"Total number of sixes rolled: {six_count}\")\n    print(f\"Percentage of sixes rolled: {six_percentage:.2f}%\")\n\ndef main():\n    try:\n        num_rolls = int(input(\"Enter the number of rolls you want to perform: \"))\n        dice_game(num_rolls)\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer number of rolls.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nmock_randint.values = iter([6, 6, 6, 6, 6, 6])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1, 2, 3, 4, 5, 6])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1, 2, 3, 4, 5, 1])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([6, 1, 6, 2, 6, 3])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1, 1, 1, 1, 1, 1])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([6])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([6, 6, 6, 6, 6, 6, 6, 6, 6, 6])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])\\ndice_game()\\n\", \"\\nmock_randint.values = iter([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\\ndice_game()\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `validate_input` that determines whether a given string is a valid email address. The function should utilize regular expressions to perform this validation. An email address is considered valid if it adheres to the following format:\n\n- It consists of a local part, an \"@\" symbol, and a domain part.\n- The local part may include letters (both uppercase and lowercase), digits, underscores, periods, plus signs, and hyphens.\n- The domain part must include at least one period and may consist of letters, digits, and hyphens.\n\nYour function should return `True` if the input string is a valid email address, and `False` otherwise.\n\n**Sample Input and Output:**\n\n- Input: `\"example@domain.com\"`\n  - Output: `True`\n- Input: `\"example@sub.domain.com\"`\n  - Output: `True`\n- Input: `\"example.user+tag+sorting@example.com\"`\n  - Output: `True`\n- Input: `\"example-indeed@strange-example.com\"`\n  - Output: `True`\n- Input: `\"invalid-email\"`\n  - Output: `False`",
    "output": "import re\n\ndef validate_input(email):\n    \"\"\"\n    Validates if the given string is a valid email address using regular expressions.\n    \n    Parameters:\n    email (str): The email address to validate.\n    \n    Returns:\n    bool: True if the email is valid, False otherwise.\n    \"\"\"\n    pattern = re.compile(\n        r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    )\n    return bool(pattern.match(email))\n\n# Test cases\nprint(validate_input(\"example@domain.com\"))  # True\nprint(validate_input(\"example@sub.domain.com\"))  # True\nprint(validate_input(\"example.user+tag+sorting@example.com\"))  # True\nprint(validate_input(\"example-indeed@strange-example.com\"))  # True\nprint(validate_input(\"invalid-email\"))  # False\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input(\\\"example@domain.com\\\") == True\\n\", \"\\nassert validate_input(\\\"example@sub.domain.com\\\") == True\\n\", \"\\nassert validate_input(\\\"example.user+tag+sorting@example.com\\\") == True\\n\", \"\\nassert validate_input(\\\"example-indeed@strange-example.com\\\") == True\\n\", \"\\nassert validate_input(\\\"invalid-email\\\") == False\\n\", \"\\nassert validate_input(\\\"user@domain.co.uk\\\") == True\\n\", \"\\nassert validate_input(\\\"user.name@domain.com\\\") == True\\n\", \"\\nassert validate_input(\\\"user@domain\\\") == False\\n\", \"\\nassert validate_input(\\\"user@domain.c\\\") == False\\n\", \"\\nassert validate_input(\\\"user@domain.toolongtld\\\") == False\\n\"]"
  },
  {
    "input": "You are given a CSV file with a header row containing column names. Your task is to write a Python script that prompts the user to input the name of a column and calculates the average of the numeric values in that column. If the column does not exist or contains no numeric values, the script should handle these cases gracefully by printing an appropriate error message. The script should ignore any non-numeric values in the specified column.\n\n**Input:**\n- The first line of input is the name of the CSV file.\n- The second line of input is the name of the column for which the average should be calculated.\n\n**Output:**\n- If the column exists and contains numeric values, print the average value of the column.\n- If the column does not exist, print \"Error: Column '{column_name}' does not exist in the CSV file.\"\n- If the column exists but contains no numeric values, print \"No numeric values found in column '{column_name}'.\"\n- If the file does not exist, print \"Error: File '{file_name}' not found.\"\n- For any other unexpected errors, print \"An unexpected error occurred: {error_message}.\"\n\n**Sample Input:**\n```\ndata.csv\nAge\n```\n\n**Sample Output:**\n```\nThe average value in column 'Age' is: 30.5\n```",
    "output": "import csv\n\ndef calculate_average_from_csv(file_name, column_name):\n    \"\"\"\n    Calculate the average of numeric values in a specified column of a CSV file.\n\n    Parameters:\n    file_name (str): The name of the CSV file.\n    column_name (str): The name of the column to calculate the average for.\n\n    Returns:\n    None\n    \"\"\"\n    total_sum = 0.0\n    count = 0\n\n    try:\n        with open(file_name, mode='r') as file:\n            reader = csv.DictReader(file)\n            if column_name not in reader.fieldnames:\n                print(f\"Error: Column '{column_name}' does not exist in the CSV file.\")\n                return\n\n            for row in reader:\n                try:\n                    value = float(row[column_name])\n                    total_sum += value\n                    count += 1\n                except ValueError:\n                    continue\n\n            if count == 0:\n                print(f\"No numeric values found in column '{column_name}'.\")\n            else:\n                average = total_sum / count\n                print(f\"The average value in column '{column_name}' is: {average}\")\n    except FileNotFoundError:\n        print(f\"Error: File '{file_name}' not found.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == '__main__':\n    file_name = input(\"Enter the CSV file name: \")\n    column_name = input(\"Enter the column name to calculate the average: \")\n    calculate_average_from_csv(file_name, column_name)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"Age\\\") == None  # Assuming test.csv has a column \\\"Age\\\" with numeric values\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"Salary\\\") == None  # Assuming test.csv has a column \\\"Salary\\\" with numeric values\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"NonExistentColumn\\\") == None  # Assuming test.csv does not have a column \\\"NonExistentColumn\\\"\\n\", \"\\nassert calculate_average_from_csv(\\\"nonexistentfile.csv\\\", \\\"Age\\\") == None  # Assuming there is no file named \\\"nonexistentfile.csv\\\"\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"MixedData\\\") == None  # Assuming test.csv has a column \\\"MixedData\\\" with both numeric and non-numeric values\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"EmptyColumn\\\") == None  # Assuming test.csv has a column \\\"EmptyColumn\\\" with no numeric values\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"SingleValue\\\") == None  # Assuming test.csv has a column \\\"SingleValue\\\" with a single numeric value\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"AllZeros\\\") == None  # Assuming test.csv has a column \\\"AllZeros\\\" with all values as zero\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"NegativeValues\\\") == None  # Assuming test.csv has a column \\\"NegativeValues\\\" with negative numeric values\\n\", \"\\nassert calculate_average_from_csv(\\\"test.csv\\\", \\\"DecimalValues\\\") == None  # Assuming test.csv has a column \\\"DecimalValues\\\" with decimal numeric values\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple ATM system. The system should support the following operations:\n- **Deposit**: Add a specified amount to the account balance.\n- **Withdraw**: Subtract a specified amount from the account balance, provided the account has sufficient funds.\n- **Check Balance**: Display the current balance of the account.\n\nThe system should handle invalid account numbers and attempts to withdraw more than the available balance. Use a dictionary to store user accounts, where the keys are account numbers (strings) and the values are the account balances (floats).\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of operations.\n- The next `n` lines each describe an operation in the format:\n  - `deposit <account_number> <amount>`\n  - `withdraw <account_number> <amount>`\n  - `check_balance <account_number>`\n\n**Output:**\n- For each operation, print the appropriate message:\n  - For `deposit` and `withdraw`, print the amount transacted and the new balance.\n  - For `check_balance`, print the current balance.\n  - For invalid account numbers or insufficient funds, print an error message.\n\n**Sample Input:**\n```\n5\ndeposit 123456 200\nwithdraw 123456 150\ncheck_balance 123456\nwithdraw 123456 1000\ncheck_balance 987654\n```\n\n**Sample Output:**\n```\nDeposited: $200. New balance is: $1200.\nWithdrew: $150. New balance is: $1050.\nYour current balance is: $1050.\nInsufficient funds.\nInvalid account number.\n```",
    "output": "class ATM:\n    def __init__(self):\n        self.accounts = {\n            '123456': 1000,\n            '789012': 500,\n        }\n\n    def check_balance(self, account_number):\n        \"\"\"\n        Check and print the balance of the specified account.\n        :param account_number: str, the account number to check.\n        \"\"\"\n        if account_number in self.accounts:\n            print(f\"Your current balance is: ${self.accounts[account_number]}\")\n        else:\n            print(\"Invalid account number.\")\n\n    def deposit(self, account_number, amount):\n        \"\"\"\n        Deposit a specified amount into the specified account.\n        :param account_number: str, the account number to deposit into.\n        :param amount: float, the amount to deposit.\n        \"\"\"\n        if account_number in self.accounts:\n            if amount > 0:\n                self.accounts[account_number] += amount\n                print(f\"Deposited: ${amount}. New balance is: ${self.accounts[account_number]}.\")\n            else:\n                print(\"Deposit amount must be positive.\")\n        else:\n            print(\"Invalid account number.\")\n\n    def withdraw(self, account_number, amount):\n        \"\"\"\n        Withdraw a specified amount from the specified account.\n        :param account_number: str, the account number to withdraw from.\n        :param amount: float, the amount to withdraw.\n        \"\"\"\n        if account_number in self.accounts:\n            if amount > 0:\n                if self.accounts[account_number] >= amount:\n                    self.accounts[account_number] -= amount\n                    print(f\"Withdrew: ${amount}. New balance is: ${self.accounts[account_number]}.\")\n                else:\n                    print(\"Insufficient funds.\")\n            else:\n                print(\"Withdrawal amount must be positive.\")\n        else:\n            print(\"Invalid account number.\")\n\ndef main():\n    atm = ATM()\n    n = int(input())\n    for _ in range(n):\n        action, account_number, *rest = input().split()\n        if action == 'check_balance':\n            atm.check_balance(account_number)\n        elif action in ['deposit', 'withdraw']:\n            amount = float(rest[0])\n            if action == 'deposit':\n                atm.deposit(account_number, amount)\n            elif action == 'withdraw':\n                atm.withdraw(account_number, amount)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert ATM().accounts['123456'] == 1000\\n\", \"\\nassert ATM().accounts['789012'] == 500\\n\", \"\\natm = ATM(); atm.deposit('123456', 500); assert atm.accounts['123456'] == 1500\\n\", \"\\natm = ATM(); atm.deposit('789012', 250); assert atm.accounts['789012'] == 750\\n\", \"\\natm = ATM(); atm.withdraw('123456', 200); assert atm.accounts['123456'] == 800\\n\", \"\\natm = ATM(); atm.withdraw('789012', 100); assert atm.accounts['789012'] == 400\\n\", \"\\natm = ATM(); atm.withdraw('123456', 1500); assert atm.accounts['123456'] == 1000\\n\", \"\\natm = ATM(); atm.deposit('999999', 100); assert '999999' not in atm.accounts\\n\", \"\\natm = ATM(); atm.withdraw('999999', 100); assert '999999' not in atm.accounts\\n\", \"\\natm = ATM(); atm.check_balance('999999'); assert '999999' not in atm.accounts\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple vending machine simulation in Python. The vending machine offers three items: 'Soda', 'Chips', and 'Candy', priced at $1.25, $1.00, and $0.75 respectively. The user will input an amount of money and select an item. If the input amount is sufficient, the program should output the selected item and any change due. If the input amount is insufficient, the program should output an error message indicating the additional amount required. The program should continue to run until the user decides to exit by entering 0 as the amount of money.\n\n**Sample Input:**\n```\n2.00\nSoda\n1.00\nChips\n0.50\nCandy\n0\n```\n\n**Sample Output:**\n```\nHere is your Soda!\nHere is your change: $0.75\nHere is your Chips!\nInsufficient funds. $0.25 more is required.\nExiting the Vending Machine. Goodbye!\n```",
    "output": "def vending_machine():\n    \"\"\"\n    Simulates a simple vending machine that accepts user input for money and item selection.\n    The machine offers 'Soda', 'Chips', and 'Candy' at $1.25, $1.00, and $0.75 respectively.\n    The function continues to run until the user enters 0 to exit.\n    \"\"\"\n    items = {'Soda': 1.25, 'Chips': 1.00, 'Candy': 0.75}\n    \n    while True:\n        print(\"\\nWelcome to the Vending Machine!\")\n        print(f\"Items available: {', '.join(items.keys())}\")\n        print(f\"Prices: Soda - ${items['Soda']}, Chips - ${items['Chips']}, Candy - ${items['Candy']}\")\n        print(\"Enter 0 to exit.\")\n        \n        user_input = input(\"Please enter the amount of money: \")\n        try:\n            money = float(user_input)\n            if money == 0:\n                print(\"Exiting the Vending Machine. Goodbye!\")\n                break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid amount of money.\")\n            continue\n\n        choice = input(\"Please select an item (Soda/Chips/Candy): \").strip()\n        if choice not in items:\n            print(f\"Invalid selection. Please choose from: {', '.join(items.keys())}\")\n            continue\n        \n        item_price = items[choice]\n        if money < item_price:\n            print(f\"Insufficient funds. ${item_price - money:.2f} more is required.\")\n        else:\n            change = money - item_price\n            print(f\"Here is your {choice}!\")\n            if change > 0:\n                print(f\"Here is your change: ${change:.2f}\")\n\nvending_machine()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert vending_machine([\\\"1.25\\\", \\\"Soda\\\"]) == [\\\"Here is your Soda!\\\"]\\n\", \"\\nassert vending_machine([\\\"1.00\\\", \\\"Chips\\\"]) == [\\\"Here is your Chips!\\\"]\\n\", \"\\nassert vending_machine([\\\"0.75\\\", \\\"Candy\\\"]) == [\\\"Here is your Candy!\\\"]\\n\", \"\\nassert vending_machine([\\\"1.00\\\", \\\"Soda\\\"]) == [\\\"Insufficient funds. $0.25 more is required.\\\"]\\n\", \"\\nassert vending_machine([\\\"2.00\\\", \\\"Soda\\\"]) == [\\\"Here is your Soda!\\\", \\\"Here is your change: $0.75\\\"]\\n\", \"\\nassert vending_machine([\\\"abc\\\", \\\"Soda\\\"]) == [\\\"Invalid input. Please enter a valid amount of money.\\\"]\\n\", \"\\nassert vending_machine([\\\"1.00\\\", \\\"Chocolate\\\"]) == [\\\"Invalid selection. Please choose from: Soda, Chips, Candy\\\"]\\n\", \"\\nassert vending_machine([\\\"0\\\"]) == [\\\"Exiting the Vending Machine. Goodbye!\\\"]\\n\", \"\\nassert vending_machine([\\\"1.25\\\", \\\"Soda\\\", \\\"1.00\\\", \\\"Chips\\\"]) == [\\\"Here is your Soda!\\\", \\\"Here is your Chips!\\\"]\\n\", \"\\nassert vending_machine([\\\"1.25\\\", \\\"Soda\\\", \\\"0\\\"]) == [\\\"Here is your Soda!\\\", \\\"Exiting the Vending Machine. Goodbye!\\\"]\\n\"]"
  },
  {
    "input": "You are given a sorted array of integers and a target integer. Implement a binary search algorithm to find the index of the target integer in the array. If the target integer is not present in the array, return -1.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the array.\n- The second line contains `n` space-separated integers representing the sorted array.\n- The third line contains an integer `target`, the value to search for.\n\n**Output:**\n- Print the index of the target integer in the array, or -1 if the target integer is not present.\n\n**Sample Input:**\n```\n10\n1 2 3 4 5 6 7 8 9 10\n8\n```\n\n**Sample Output:**\n```\n7\n```",
    "output": "def binary_search(arr, target):\n    \"\"\"\n    Perform a binary search on a sorted array for the target value.\n\n    :param arr: A list of elements sorted in ascending order.\n    :param target: The value to search for.\n    :return: The index of the target value in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2  # Find the middle index\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    sorted_array = list(map(int, data[1:n+1]))\n    target_value = int(data[n+1])\n    \n    index = binary_search(sorted_array, target_value)\n    print(index)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 7\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 9\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == -1\\n\", \"\\nassert binary_search([], 1) == -1\\n\", \"\\nassert binary_search([1], 1) == 0\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9], 3) == 1\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9], 2) == -1\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9], 9) == 4\\n\"]"
  },
  {
    "input": "You are given a list of positive integers. Your task is to write a program that calculates the least common multiple (LCM) of all the integers in the list. The program should read a list of integers from the input and output the LCM of the list.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of integers in the list.\n- The second line contains `n` space-separated integers `a1, a2, ..., an` (1 \u2264 ai \u2264 10^9), the integers in the list.\n\n**Output:**\n- Print a single integer, the LCM of the list of integers.\n\n**Sample Input:**\n```\n3\n12 15 20\n```\n\n**Sample Output:**\n```\n60\n```",
    "output": "from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    \"\"\"Calculate the least common multiple of two integers a and b.\"\"\"\n    return abs(a * b) // gcd(a, b)\n\ndef lcm_list(numbers):\n    \"\"\"Calculate the least common multiple of a list of integers.\"\"\"\n    return reduce(lcm, numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    result = lcm_list(numbers)\n    print(result)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert lcm_list([12, 15, 20]) == 60\\n\", \"\\nassert lcm_list([1, 2, 3, 4, 5]) == 60\\n\", \"\\nassert lcm_list([7, 5, 3]) == 105\\n\", \"\\nassert lcm_list([21, 6, 8]) == 168\\n\", \"\\nassert lcm_list([10, 15, 25]) == 150\\n\", \"\\nassert lcm_list([1]) == 1\\n\", \"\\nassert lcm_list([0, 1, 2]) == 0\\n\", \"\\nassert lcm_list([13, 17, 19]) == 4199\\n\", \"\\nassert lcm_list([2, 4, 6, 8, 10]) == 120\\n\", \"\\nassert lcm_list([5, 10, 15, 20, 25]) == 300\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple simulation of the rock-paper-scissors game. Your program should read a single line of input representing the user's choice, which can be one of the three strings: \"rock\", \"paper\", or \"scissors\". The program should then randomly select a choice for the computer from the same set of options. Based on the rules of the game, determine the winner and output the user's choice, the computer's choice, and the result of the game (either \"You win!\", \"You lose!\", or \"It's a tie!\").\n\n**Input:**\n- A single line containing the user's choice: \"rock\", \"paper\", or \"scissors\".\n\n**Output:**\n- Three lines:\n  - The first line should display the user's choice.\n  - The second line should display the computer's choice.\n  - The third line should display the result of the game.\n\n**Sample Input:**\n```\nrock\n```\n\n**Sample Output:**\n```\nYour choice: rock\nComputer's choice: paper\nYou lose!\n```",
    "output": "import random\n\ndef get_computer_choice():\n    \"\"\"\n    Randomly selects and returns the computer's choice from \"rock\", \"paper\", or \"scissors\".\n    \"\"\"\n    choices = [\"rock\", \"paper\", \"scissors\"]\n    return random.choice(choices)\n\ndef determine_winner(user_choice, computer_choice):\n    \"\"\"\n    Determines the winner of the rock-paper-scissors game based on the user's and computer's choices.\n    \n    Parameters:\n    user_choice (str): The user's choice, one of \"rock\", \"paper\", or \"scissors\".\n    computer_choice (str): The computer's choice, one of \"rock\", \"paper\", or \"scissors\".\n    \n    Returns:\n    str: The result of the game, either \"You win!\", \"You lose!\", or \"It's a tie!\".\n    \"\"\"\n    if user_choice == computer_choice:\n        return \"It's a tie!\"\n    elif (user_choice == \"rock\" and computer_choice == \"scissors\") or \\\n         (user_choice == \"scissors\" and computer_choice == \"paper\") or \\\n         (user_choice == \"paper\" and computer_choice == \"rock\"):\n        return \"You win!\"\n    else:\n        return \"You lose!\"\n\ndef rock_paper_scissors():\n    \"\"\"\n    Simulates a game of rock-paper-scissors by reading the user's choice, generating the computer's choice,\n    and determining the winner. Outputs the choices and the result.\n    \"\"\"\n    user_choice = input(\"Enter your choice (rock, paper, or scissors): \").lower()\n    if user_choice not in [\"rock\", \"paper\", \"scissors\"]:\n        print(\"Invalid choice. Please enter rock, paper, or scissors.\")\n        return\n    \n    computer_choice = get_computer_choice()\n    print(f\"Your choice: {user_choice}\")\n    print(f\"Computer's choice: {computer_choice}\")\n    result = determine_winner(user_choice, computer_choice)\n    print(result)\n\nif __name__ == \"__main__\":\n    rock_paper_scissors()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert determine_winner(\\\"rock\\\", \\\"rock\\\") == \\\"It's a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"paper\\\") == \\\"It's a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"scissors\\\") == \\\"It's a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"rock\\\", \\\"scissors\\\") == \\\"You win!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"paper\\\") == \\\"You win!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"rock\\\") == \\\"You win!\\\"\\n\", \"\\nassert determine_winner(\\\"rock\\\", \\\"paper\\\") == \\\"You lose!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"rock\\\") == \\\"You lose!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"scissors\\\") == \\\"You lose!\\\"\\n\", \"\\nassert determine_winner(\\\"lizard\\\", \\\"spock\\\") == \\\"You lose!\\\"  # Invalid input, but should not cause an error\\n\"]"
  },
  {
    "input": "You are tasked with implementing a number guessing game. The program should generate a random integer between 1 and 100. The player has up to 10 attempts to guess the number. After each guess, the program should output \"Too low!\" if the guess is less than the target number, \"Too high!\" if the guess is greater, and \"Congratulations! You've guessed the number in X attempts.\" if the guess is correct, where X is the number of attempts made. If the player does not guess the number within 10 attempts, the program should output \"Sorry, you've exhausted your attempts. The correct number was Y. Try again!\", where Y is the target number.\n\n**Sample Input/Output:**\n\n**Input:**\n```\n50\n25\n75\n63\n69\n72\n70\n```\n**Output:**\n```\nToo low!\nToo low!\nToo high!\nToo low!\nToo low!\nToo low!\nCongratulations! You've guessed the number in 7 attempts.\n```\n\n**Input:**\n```\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n```\n**Output:**\n```\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nToo low!\nSorry, you've exhausted your attempts. The correct number was 55. Try again!\n```",
    "output": "import random\n\ndef number_guessing_game():\n    \"\"\"\n    Simulates a number guessing game where the user has to guess a number between 1 and 100.\n    The user has a maximum of 10 attempts. The function provides feedback after each guess\n    and congratulates the user if the number is guessed correctly within the attempts.\n    Otherwise, it reveals the correct number.\n    \"\"\"\n    number_to_guess = random.randint(1, 100)\n    attempts = 0\n    max_attempts = 10\n\n    print(\"Welcome to the Number Guessing Game!\")\n    print(f\"Guess a number between 1 and 100. You have {max_attempts} attempts.\")\n\n    while attempts < max_attempts:\n        try:\n            user_guess = int(input(\"Enter your guess: \"))\n            attempts += 1\n\n            if user_guess < number_to_guess:\n                print(\"Too low!\")\n            elif user_guess > number_to_guess:\n                print(\"Too high!\")\n            else:\n                print(f\"Congratulations! You've guessed the number in {attempts} attempts.\")\n                return\n\n        except ValueError:\n            print(\"Invalid input. Please enter a number between 1 and 100.\")\n\n    print(f\"Sorry, you've exhausted your attempts. The correct number was {number_to_guess}. Try again!\")\n\nif __name__ == \"__main__\":\n    number_guessing_game()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert \\\"Welcome to the Number Guessing Game!\\\" in simulate_game(\\\"50\\\\n50\\\\n\\\")\\n\", \"\\nassert \\\"Too low!\\\" in simulate_game(\\\"1\\\\n1\\\\n\\\")\\n\", \"\\nassert \\\"Too high!\\\" in simulate_game(\\\"100\\\\n100\\\\n\\\")\\n\", \"\\nassert \\\"Congratulations! You've guessed the number in 1 attempts.\\\" in simulate_game(\\\"50\\\\n\\\" if random.randint(1, 100) == 50 else \\\"50\\\\n50\\\\n\\\")\\n\", \"\\nassert \\\"Invalid input. Please enter a number between 1 and 100.\\\" in simulate_game(\\\"abc\\\\n50\\\\n\\\")\\n\", \"\\nassert \\\"Sorry, you've exhausted your attempts.\\\" in simulate_game(\\\"1\\\\n2\\\\n3\\\\n4\\\\n5\\\\n6\\\\n7\\\\n8\\\\n9\\\\n10\\\\n\\\")\\n\", \"\\nassert \\\"Guess a number between 1 and 100. You have 10 attempts.\\\" in simulate_game(\\\"50\\\\n\\\")\\n\", \"\\nassert \\\"Enter your guess: \\\" in simulate_game(\\\"50\\\\n\\\")\\n\", \"\\nassert \\\"Too low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\nToo low!\\\\n\\\" in simulate_game(\\\"1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n1\\\\n\\\")\\n\", \"\\nassert \\\"Too high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\nToo high!\\\\n\\\" in simulate_game(\\\"100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n100\\\\n\\\")\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple command-line interface for managing a to-do list. The program should support the following operations:\n\n1. **Add Task**: Add a new task to the to-do list.\n2. **Remove Task**: Remove a task from the to-do list using its index.\n3. **View Tasks**: Display all tasks in the to-do list.\n4. **Exit**: Terminate the program.\n\nTasks should be stored in a file named `todo_list.txt` to ensure persistence between program executions.\n\n**Input:**\n- The program will read commands from the user in the following format:\n  - `1 <task>`: Add a new task.\n  - `2 <index>`: Remove the task at the specified index.\n  - `3`: View all tasks.\n  - `4`: Exit the program.\n\n**Output:**\n- For each command, the program should output the appropriate response:\n  - After adding a task: `Task added: <task>`\n  - After removing a task: `Task removed: <task>`\n  - When viewing tasks: Display the list of tasks with their indices.\n  - When exiting: `Exiting. Have a nice day!`\n  - For invalid commands or indices: `Invalid choice.` or `Invalid task index.`\n\n**Sample Input:**\n```\n1 Buy groceries\n1 Walk the dog\n3\n2 1\n3\n4\n```\n\n**Sample Output:**\n```\nTask added: Buy groceries\nTask added: Walk the dog\nYour To-Do List:\n1. Buy groceries\n2. Walk the dog\nTask removed: Buy groceries\nYour To-Do List:\n1. Walk the dog\nExiting. Have a nice day!\n```",
    "output": "import os\n\nTODO_FILE = 'todo_list.txt'\n\ndef load_tasks():\n    \"\"\"\n    Load tasks from the file.\n    If the file does not exist, return an empty list.\n    \"\"\"\n    if not os.path.exists(TODO_FILE):\n        return []\n    with open(TODO_FILE, 'r') as file:\n        return file.read().splitlines()\n\ndef save_tasks(tasks):\n    \"\"\"\n    Save the list of tasks to the file.\n    \"\"\"\n    with open(TODO_FILE, 'w') as file:\n        file.write('\\n'.join(tasks))\n\ndef add_task(task, tasks):\n    \"\"\"\n    Add a new task to the list and save it.\n    \"\"\"\n    tasks.append(task)\n    save_tasks(tasks)\n    print(f'Task added: {task}')\n\ndef remove_task(task_index, tasks):\n    \"\"\"\n    Remove a task from the list by index and save the changes.\n    \"\"\"\n    if 0 <= task_index < len(tasks):\n        removed_task = tasks.pop(task_index)\n        save_tasks(tasks)\n        print(f'Task removed: {removed_task}')\n    else:\n        print('Invalid task index.')\n\ndef view_tasks(tasks):\n    \"\"\"\n    Display all tasks in the list.\n    \"\"\"\n    if tasks:\n        print('Your To-Do List:')\n        for index, task in enumerate(tasks, start=1):\n            print(f'{index}. {task}')\n    else:\n        print('Your To-Do List is empty.')\n\ndef main():\n    \"\"\"\n    Main function to run the to-do list manager.\n    \"\"\"\n    tasks = load_tasks()\n    print('Simple To-Do List Manager')\n    while True:\n        print('\\nOptions:')\n        print('1. Add Task')\n        print('2. Remove Task')\n        print('3. View Tasks')\n        print('4. Exit')\n        choice = input('Enter your choice (1-4): ')\n        if choice == '1':\n            task = input('Enter the task to add: ')\n            add_task(task, tasks)\n        elif choice == '2':\n            try:\n                task_index = int(input('Enter the task number to remove: ')) - 1  # Convert to 0-based index\n                remove_task(task_index, tasks)\n            except ValueError:\n                print('Please enter a valid number.')\n        elif choice == '3':\n            view_tasks(tasks)\n        elif choice == '4':\n            print('Exiting. Have a nice day!')\n            break\n        else:\n            print('Invalid choice. Please choose a valid option.')\n\nif __name__ == '__main__':\n    main()\n",
    "_category": "array_numeric",
    "unit_tests": "[\"\\nassert load_tasks() == []\\n\", \"\\nassert save_tasks(['Task 1', 'Task 2']) is None\\n\", \"\\nassert add_task('Task 3', ['Task 1', 'Task 2']) is None\\n\", \"\\nassert remove_task(1, ['Task 1', 'Task 2', 'Task 3']) is None\\n\", \"\\nassert view_tasks(['Task 1', 'Task 2']) is None\\n\", \"\\nassert add_task('Task 4', []) is None\\n\", \"\\nassert remove_task(0, ['Task 1']) is None\\n\", \"\\nassert view_tasks([]) is None\\n\", \"\\nassert add_task('Task 5', ['Task 1', 'Task 2', 'Task 3']) is None\\n\", \"\\nassert remove_task(2, ['Task 1', 'Task 2', 'Task 3']) is None\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python program that reads a CSV file specified by the user. The CSV file contains a single column of text data without a header row. Your program should count the occurrences of each word in the file, normalize the text by converting it to lowercase and removing punctuation, and then output the 10 most common words along with their counts. Handle potential errors such as the file not existing or being unreadable.\n\n**Input:**\n- The first line of input is the name of the CSV file.\n\n**Output:**\n- Print the 10 most common words and their counts in the format: `'word': count`\n- If the file does not exist or is unreadable, print an appropriate error message.\n\n**Sample Input:**\n```\nsample.csv\n```\n\n**Sample Output:**\n```\n'the': 15\n'and': 10\n'of': 8\n'to': 7\n'in': 6\n'a': 5\n'is': 4\n'it': 3\n'for': 3\n'on': 3\n```",
    "output": "import csv\nfrom collections import Counter\nimport string\n\ndef count_words_in_csv(file_name):\n    \"\"\"\n    Counts the occurrences of each word in a CSV file and prints the 10 most common words.\n    \n    Args:\n    file_name (str): The name of the CSV file to read.\n    \n    Returns:\n    None\n    \"\"\"\n    word_counter = Counter()\n    \n    try:\n        with open(file_name, mode='r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                if len(row) == 1:\n                    text = row[0]\n                    text = text.lower().translate(str.maketrans('', '', string.punctuation))\n                    words = text.split()\n                    word_counter.update(words)\n                else:\n                    print(\"Warning: Row contains more than one element and will be ignored.\")\n        \n        most_common_words = word_counter.most_common(10)\n        for word, count in most_common_words:\n            print(f\"'{word}': {count}\")\n\n    except FileNotFoundError:\n        print(\"Error: The CSV file could not be found.\")\n    except IOError:\n        print(\"Error: The CSV file could not be read.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\ndef main():\n    \"\"\"\n    Main function to prompt the user for a CSV file name and count words.\n    \n    Returns:\n    None\n    \"\"\"\n    file_name = input(\"Please enter the CSV file name: \")\n    count_words_in_csv(file_name)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert count_words_in_csv_with_mock(\\\"hello,world\\\\nhello\\\\nworld\\\") == [('hello', 2), ('world', 2)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\nsix\\\\nseven\\\\neight\\\\nnine\\\\nten\\\\neleven\\\") == [('one', 1), ('two', 1), ('three', 1), ('four', 1), ('five', 1), ('six', 1), ('seven', 1), ('eight', 1), ('nine', 1), ('ten', 1)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"repeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\\nrepeat\\\") == [('repeat', 10)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"a\\\\nb\\\\nc\\\\nd\\\\ne\\\\nf\\\\ng\\\\nh\\\\ni\\\\nj\\\\nk\\\") == [('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1), ('f', 1), ('g', 1), ('h', 1), ('i', 1), ('j', 1)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"punctuation,should!be@removed#correctly$\\\") == [('punctuation', 1), ('should', 1), ('be', 1), ('removed', 1), ('correctly', 1)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"case\\\\nCASE\\\\nCase\\\\ncase\\\") == [('case', 4)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"\\\") == []\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"singleword\\\") == [('singleword', 1)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"multiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\\nmultiple\\\") == [('multiple', 10)]\\n\", \"\\nassert count_words_in_csv_with_mock(\\\"ignore,extra,columns\\\\nvalid\\\") == [('valid', 1)]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `clean_input` that processes various types of input data according to specific rules. The function should handle the following cases:\n\n1. If the input `data` is a string, return a list containing the string with leading and trailing whitespace removed.\n2. If the input `data` is an iterable (e.g., list, tuple, set), recursively flatten the iterable, remove any elements that evaluate to False (e.g., None, False, 0, empty strings, etc.) after stripping leading and trailing whitespace, and return the resulting list of strings.\n3. If the input `data` is `None`, return an empty list.\n4. If the input `data` is of any other type, raise a `ValueError` with the message \"Input must be a string, iterable, or None\".\n\nYour function should be able to handle nested iterables and ensure that all elements in the final list are non-empty strings with no leading or trailing whitespace.\n\n**Sample Input and Output:**\n- `clean_input(\"  hello world  \")` should return `['hello world']`.\n- `clean_input([\"  hello \", None, \"world\", \"  \", [], (\"nested\", \" tuple\")])` should return `['hello', 'world', 'nested', 'tuple']`.\n- `clean_input((1, 2, 3, 0, False, \"test\", \"  \", [\"another\", \" test \"])))` should return `['1', '2', '3', 'test', 'another', 'test']`.\n- `clean_input(None)` should return `[]`.\n- `clean_input(123)` should raise a `ValueError`.",
    "output": "def clean_input(data):\n    \"\"\"\n    Processes the input data according to specific rules:\n    - If data is a string, returns a list with the string stripped of whitespace.\n    - If data is an iterable, recursively flattens it, removes Falsey elements after stripping, and returns a list of strings.\n    - If data is None, returns an empty list.\n    - Raises ValueError for any other input type.\n    \"\"\"\n    def _flatten(lst):\n        for item in lst:\n            if isinstance(item, (list, tuple, set)):\n                yield from _flatten(item)\n            else:\n                yield item\n\n    if isinstance(data, str):\n        return [data.strip()]\n\n    if data is None:\n        return []\n\n    if isinstance(data, (list, tuple, set)):\n        result = []\n        for item in _flatten(data):\n            stripped_item = str(item).strip()\n            if stripped_item:\n                result.append(stripped_item)\n        return result\n\n    raise ValueError(\"Input must be a string, iterable, or None\")\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert clean_input(\\\"  hello world  \\\") == ['hello world']\\n\", \"\\nassert clean_input([\\\"  hello \\\", None, \\\"world\\\", \\\"  \\\", [], (\\\"nested\\\", \\\" tuple\\\")]) == ['hello', 'world', 'nested', 'tuple']\\n\", \"\\nassert clean_input((1, 2, 3, 0, False, \\\"test\\\", \\\"  \\\", [\\\"another\\\", \\\" test \\\"])) == ['1', '2', '3', 'test', 'another', 'test']\\n\", \"\\nassert clean_input(None) == []\\n\", \"\\nassert clean_input(\\\"single\\\") == ['single']\\n\", \"\\nassert clean_input([\\\"  \\\", \\\"  \\\", \\\"  \\\"]) == []\\n\", \"\\nassert clean_input([[], (), set(), \\\"  valid  \\\"]) == ['valid']\\n\", \"\\nassert clean_input({\\\"key\\\": \\\"value\\\", \\\"another\\\": \\\"entry\\\"}) == ['key', 'value', 'another', 'entry']\\n\", \"\\nassert clean_input([[\\\"nested\\\", [\\\"deep\\\", \\\"list\\\"]], \\\"flat\\\"]) == ['nested', 'deep', 'list', 'flat']\\n\", \"\\nassert clean_input(123) == ValueError(\\\"Input must be a string, iterable, or None\\\")\\n\"]"
  },
  {
    "input": "You are given a list of `n` datetime strings in the format \"YYYY-MM-DD HH:MM:SS\". Your task is to write a function that converts these datetime strings into Unix timestamps in UTC. The function should handle both past and future dates accurately.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of datetime strings.\n- The next `n` lines contain the datetime strings in the format \"YYYY-MM-DD HH:MM:SS\".\n\n**Output:**\n- Print `n` lines, each containing the Unix timestamp corresponding to the respective datetime string.\n\n**Sample Input:**\n```\n3\n2023-01-01 00:00:00\n1970-01-01 00:00:00\n2025-12-31 23:59:59\n```\n\n**Sample Output:**\n```\n1672531200\n0\n1767244799\n```",
    "output": "import datetime\nimport calendar\n\ndef convert_to_unix_timestamps(datetime_strings):\n    \"\"\"\n    Convert a list of datetime strings in the format \"YYYY-MM-DD HH:MM:SS\" into Unix timestamps in UTC.\n\n    :param datetime_strings: A list of strings each representing a datetime in the format \"YYYY-MM-DD HH:MM:SS\"\n    :return: A list of Unix timestamps corresponding to the input datetime strings\n    \"\"\"\n    timestamps = []\n    for dt_str in datetime_strings:\n        dt = datetime.datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\")\n        dt = dt.replace(tzinfo=datetime.timezone.utc)\n        timestamp = calendar.timegm(dt.utctimetuple())\n        timestamps.append(timestamp)\n    return timestamps\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    datetime_strings = [input().strip() for _ in range(n)]\n    timestamps = convert_to_unix_timestamps(datetime_strings)\n    for timestamp in timestamps:\n        print(timestamp)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert convert_to_unix_timestamps([\\\"2023-01-01 00:00:00\\\"]) == [1672531200]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"1970-01-01 00:00:00\\\"]) == [0]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2024-02-29 12:34:56\\\"]) == [1709198096]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2000-01-01 00:00:00\\\"]) == [946684800]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2023-12-31 23:59:59\\\"]) == [1703999999]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2023-03-15 10:20:30\\\", \\\"2023-03-16 11:21:31\\\"]) == [1678863630, 1678950091]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2023-11-05 00:00:00\\\"]) == [1699123200]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2025-06-15 12:00:00\\\"]) == [1718419200]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2023-01-01 00:00:00\\\", \\\"1970-01-01 00:00:00\\\"]) == [1672531200, 0]\\n\", \"\\nassert convert_to_unix_timestamps([\\\"2023-01-01 00:00:00\\\", \\\"2023-01-01 00:00:00\\\"]) == [1672531200, 1672531200]\\n\"]"
  },
  {
    "input": "You are given an array of integers. Your task is to implement a sorting algorithm that sorts the array in ascending order. The algorithm must have a time complexity of O(n log n). You are not allowed to use any built-in sorting functions.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the array.\n- The second line contains `n` space-separated integers `a1, a2, ..., an` (0 \u2264 ai \u2264 10^9), the elements of the array.\n\n**Output:**\n- Print the sorted array in ascending order.\n\n**Sample Input:**\n```\n6\n12 11 13 5 6 7\n```\n\n**Sample Output:**\n```\n5 6 7 11 12 13\n```",
    "output": "def merge_sort(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order using the merge sort algorithm.\n    \n    Parameters:\n    arr (list): The list of integers to be sorted.\n    \n    Returns:\n    list: The sorted list of integers.\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n# Testing the function\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n    sorted_arr = merge_sort(arr)\n    print(\" \".join(map(str, sorted_arr)))\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert merge_sort([38, 27, 43, 3, 9, 82, 10]) == [3, 9, 10, 27, 38, 43, 82]\\n\", \"\\nassert merge_sort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9]\\n\", \"\\nassert merge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert merge_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert merge_sort([]) == []\\n\", \"\\nassert merge_sort([1]) == [1]\\n\", \"\\nassert merge_sort([7, 7, 7, 7]) == [7, 7, 7, 7]\\n\", \"\\nassert merge_sort([10, -1, 2, 5, 0, 6, 4, -5, 3]) == [-5, -1, 0, 2, 3, 4, 5, 6, 10]\\n\", \"\\nassert merge_sort([100, 200, 300, 400, 500, 600]) == [100, 200, 300, 400, 500, 600]\\n\", \"\\nassert merge_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple Rock-Paper-Scissors game for two players. Each player will input their choice ('rock', 'paper', or 'scissors'). The game rules are as follows:\n- Rock crushes scissors.\n- Scissors cut paper.\n- Paper covers rock.\n- If both players choose the same option, the game is a tie.\n\nYour program should output the choices made by each player and the result of the game (who wins or if it's a tie).\n\n**Input:**\n- Two lines of input, each containing a single word: 'rock', 'paper', or 'scissors'. The first line is Player 1's choice, and the second line is Player 2's choice.\n\n**Output:**\n- Three lines of output:\n  - The first line should state Player 1's choice.\n  - The second line should state Player 2's choice.\n  - The third line should state the result of the game.\n\n**Sample Input:**\n```\nrock\nscissors\n```\n\n**Sample Output:**\n```\nPlayer 1 chose: rock\nPlayer 2 chose: scissors\nPlayer 1 wins with rock!\n```",
    "output": "def get_player_choice(player_number):\n    \"\"\"\n    Prompts the player to enter their choice of 'rock', 'paper', or 'scissors'.\n    Ensures the input is valid and returns the choice in lowercase.\n    \n    :param player_number: The player number (1 or 2) whose choice is being requested.\n    :return: A valid choice ('rock', 'paper', or 'scissors') in lowercase.\n    \"\"\"\n    while True:\n        choice = input(f\"Player {player_number}, enter your choice (rock, paper, scissors): \").strip().lower()\n        if choice in ['rock', 'paper', 'scissors']:\n            return choice\n        else:\n            print(\"Invalid choice. Please choose between rock, paper, or scissors.\")\n\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winner of the Rock-Paper-Scissors game based on the choices of two players.\n    \n    :param choice1: The choice of Player 1 ('rock', 'paper', or 'scissors').\n    :param choice2: The choice of Player 2 ('rock', 'paper', or 'scissors').\n    :return: A string indicating the result of the game.\n    \"\"\"\n    if choice1 == choice2:\n        return \"The game is a tie!\"\n    elif (choice1 == 'rock' and choice2 == 'scissors') or \\\n         (choice1 == 'scissors' and choice2 == 'paper') or \\\n         (choice1 == 'paper' and choice2 == 'rock'):\n        return f\"Player 1 wins with {choice1}!\"\n    else:\n        return f\"Player 2 wins with {choice2}!\"\n\ndef main():\n    \"\"\"\n    Main function to run the Rock-Paper-Scissors game.\n    Prompts for player choices, determines the winner, and prints the results.\n    \"\"\"\n    print(\"Welcome to Rock-Paper-Scissors!\")\n    player1_choice = get_player_choice(1)\n    player2_choice = get_player_choice(2)\n\n    result = determine_winner(player1_choice, player2_choice)\n    print(\"\\nGame Result:\")\n    print(f\"Player 1 chose: {player1_choice}\")\n    print(f\"Player 2 chose: {player2_choice}\")\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert determine_winner(\\\"rock\\\", \\\"scissors\\\") == \\\"Player 1 wins with rock!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"rock\\\") == \\\"Player 2 wins with rock!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"rock\\\") == \\\"Player 1 wins with paper!\\\"\\n\", \"\\nassert determine_winner(\\\"rock\\\", \\\"paper\\\") == \\\"Player 2 wins with paper!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"paper\\\") == \\\"Player 1 wins with scissors!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"scissors\\\") == \\\"Player 2 wins with scissors!\\\"\\n\", \"\\nassert determine_winner(\\\"rock\\\", \\\"rock\\\") == \\\"The game is a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"scissors\\\", \\\"scissors\\\") == \\\"The game is a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"paper\\\", \\\"paper\\\") == \\\"The game is a tie!\\\"\\n\", \"\\nassert determine_winner(\\\"rock\\\", \\\"lizard\\\") == \\\"The game is a tie!\\\"  # This is incorrect and should be an invalid input case, but since the function does not handle invalid inputs, we assume it will tie incorrectly.\\n\"]"
  },
  {
    "input": "You are given a list of `n` integers and a positive integer `k`. Your task is to implement a function that finds the `k` smallest elements in the list using a heap data structure. The function should return these elements in ascending order.\n\n**Input:**\n- The first line contains two integers `n` and `k` (1 \u2264 k \u2264 n \u2264 10^5).\n- The second line contains `n` space-separated integers representing the list of integers.\n\n**Output:**\n- Print a single line containing `k` space-separated integers, which are the `k` smallest elements in ascending order.\n\n**Sample Input:**\n```\n7 3\n5 1 9 3 7 2 8\n```\n\n**Sample Output:**\n```\n1 2 3\n```",
    "output": "import heapq\n\ndef k_smallest_elements(nums, k):\n    \"\"\"\n    Finds the k smallest elements in a list using a heap data structure.\n\n    Parameters:\n    nums (list of int): The list of integers.\n    k (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The k smallest elements in ascending order.\n    \"\"\"\n    return heapq.nsmallest(k, nums)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    nums = list(map(int, input().split()))\n    print(*k_smallest_elements(nums, k))\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert k_smallest_elements([5, 1, 9, 3, 7, 2, 8], 3) == [1, 2, 3]\\n\", \"\\nassert k_smallest_elements([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]\\n\", \"\\nassert k_smallest_elements([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\\n\", \"\\nassert k_smallest_elements([5, 5, 5, 5, 5], 3) == [5, 5, 5]\\n\", \"\\nassert k_smallest_elements([9, 8, 7, 6, 5, 4, 3, 2, 1], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\", \"\\nassert k_smallest_elements([100, 200, 300], 0) == []\\n\", \"\\nassert k_smallest_elements([], 3) == []\\n\", \"\\nassert k_smallest_elements([1], 1) == [1]\\n\", \"\\nassert k_smallest_elements([3, 1, 2], 2) == [1, 2]\\n\", \"\\nassert k_smallest_elements([-1, -2, -3, -4, -5], 3) == [-5, -4, -3]\\n\"]"
  },
  {
    "input": "You are given a series of integers, one per line. For each integer `n`, determine the smallest integer greater than `n` that is a power of 2. A power of 2 is defined as any integer that can be expressed as `2^k` for some non-negative integer `k`. Output the result for each integer on a new line.\n\n**Input:**\n- The first line contains an integer `T` (1 \u2264 T \u2264 100), the number of test cases.\n- Each of the next `T` lines contains a single integer `n` (-10^9 \u2264 n \u2264 10^9).\n\n**Output:**\n- For each test case, output the smallest integer greater than `n` that is a power of 2.\n\n**Sample Input:**\n```\n3\n5\n16\n-3\n```\n\n**Sample Output:**\n```\n8\n32\n1\n```",
    "output": "import sys\n\ndef next_power_of_2(n):\n    \"\"\"\n    Returns the smallest integer greater than n that is a power of 2.\n    If n is already a power of 2, returns the next power of 2.\n    \"\"\"\n    if n < 0:\n        return 1  # The smallest power of 2 greater than any negative number is 1\n    if (n & (n - 1)) == 0:\n        return n << 1\n    return 1 << (n - 1).bit_length()\n\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    T = int(input[0])\n    results = []\n    for i in range(1, T + 1):\n        n = int(input[i])\n        results.append(next_power_of_2(n))\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert next_power_of_2(0) == 1\\n\", \"\\nassert next_power_of_2(1) == 2\\n\", \"\\nassert next_power_of_2(2) == 4\\n\", \"\\nassert next_power_of_2(3) == 4\\n\", \"\\nassert next_power_of_2(4) == 8\\n\", \"\\nassert next_power_of_2(5) == 8\\n\", \"\\nassert next_power_of_2(15) == 16\\n\", \"\\nassert next_power_of_2(16) == 32\\n\", \"\\nassert next_power_of_2(31) == 32\\n\", \"\\nassert next_power_of_2(32) == 64\\n\"]"
  },
  {
    "input": "You are given a list of `n` strings, where each string consists of lowercase English letters. Your task is to determine the longest common prefix shared by all the strings. If no common prefix exists, return an empty string.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of strings.\n- The next `n` lines contain the strings, each consisting of at most 100 lowercase English letters.\n\n**Output:**\n- A single line containing the longest common prefix. If no common prefix exists, output an empty string.\n\n**Sample Input:**\n```\n3\nflower\nflow\nflight\n```\n\n**Sample Output:**\n```\nfl\n```",
    "output": "def longest_common_prefix(strs):\n    \"\"\"\n    Finds the longest common prefix among a list of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Example usage\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    words = [input().strip() for _ in range(n)]\n    print(longest_common_prefix(words))\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert longest_common_prefix([\\\"flower\\\", \\\"flow\\\", \\\"flight\\\"]) == \\\"fl\\\"\\n\", \"\\nassert longest_common_prefix([\\\"dog\\\", \\\"racecar\\\", \\\"car\\\"]) == \\\"\\\"\\n\", \"\\nassert longest_common_prefix([\\\"interspecies\\\", \\\"interstellar\\\", \\\"interstate\\\"]) == \\\"inters\\\"\\n\", \"\\nassert longest_common_prefix([\\\"throne\\\", \\\"throne\\\"]) == \\\"throne\\\"\\n\", \"\\nassert longest_common_prefix([\\\"prefix\\\", \\\"prefixes\\\", \\\"preposition\\\"]) == \\\"pre\\\"\\n\", \"\\nassert longest_common_prefix([]) == \\\"\\\"\\n\", \"\\nassert longest_common_prefix([\\\"a\\\"]) == \\\"a\\\"\\n\", \"\\nassert longest_common_prefix([\\\"ab\\\", \\\"a\\\"]) == \\\"a\\\"\\n\", \"\\nassert longest_common_prefix([\\\"hello\\\", \\\"hell\\\", \\\"heaven\\\", \\\"heavy\\\"]) == \\\"he\\\"\\n\", \"\\nassert longest_common_prefix([\\\"abc\\\", \\\"def\\\", \\\"ghi\\\"]) == \\\"\\\"\\n\"]"
  },
  {
    "input": "You are tasked with writing a program that calculates the average of a list of numbers. Your program should consist of two functions: `average` and `main`. The `average` function should take a list of numbers as input and return the average value. The `main` function should repeatedly prompt the user to enter a list of numbers, call the `average` function, and print the result. The program should handle invalid inputs gracefully by prompting the user again until a valid list of numbers is provided.\n\n**Sample Input:**\n```\n1 2 3 4 5\n```\n\n**Sample Output:**\n```\nThe average is: 3.0\n```\n\n**Sample Input:**\n```\na b c\n```\n\n**Sample Output:**\n```\nInvalid input: could not convert string to float: 'a'. Please enter a valid list of numbers.\n```\n\n**Sample Input:**\n```\n10 20 30\n```\n\n**Sample Output:**\n```\nThe average is: 20.0\n```",
    "output": "def average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers.\n    \n    :param numbers: List of numbers (floats or integers)\n    :return: Average of the numbers\n    \"\"\"\n    return sum(numbers) / len(numbers)\n\ndef main():\n    \"\"\"\n    Main function to prompt the user for a list of numbers, calculate the average,\n    and print the result. Handles invalid inputs by prompting the user again.\n    \"\"\"\n    while True:\n        try:\n            user_input = input(\"Enter a list of numbers separated by spaces: \")\n            numbers = [float(num) for num in user_input.split()]\n            if not numbers:\n                raise ValueError(\"The list cannot be empty.\")\n            avg = average(numbers)\n            print(f\"The average is: {avg}\")\n            break\n        except ValueError as e:\n            print(f\"Invalid input: {e}. Please enter a valid list of numbers.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert average([1, 2, 3, 4, 5]) == 3.0\\n\", \"\\nassert average([10, 20, 30]) == 20.0\\n\", \"\\nassert average([5]) == 5.0\\n\", \"\\nassert average([1.5, 2.5, 3.5]) == 2.5\\n\", \"\\nassert average([-1, -2, -3, -4]) == -2.5\\n\", \"\\nassert average([0, 0, 0, 0]) == 0.0\\n\", \"\\nassert average([100, 200, 300, 400, 500]) == 300.0\\n\", \"\\nassert average([1.1, 2.2, 3.3, 4.4, 5.5]) == 3.3\\n\", \"\\nassert average([10, -10, 20, -20]) == 0.0\\n\", \"\\nassert average([1e6, 2e6, 3e6]) == 2e6\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `validate_input(s)` that determines whether a given string `s` represents a valid mathematical expression. The expression can include integers, floating-point numbers, arithmetic operations, parentheses, and a selection of built-in mathematical functions such as `abs()`, `max()`, `min()`, `round()`, `pow()`, and `sum()`. Additionally, the expression may contain nested and chained ternary conditional operators in the format `condition ? true_expr : false_expr`. The ternary operator should follow Python's syntax rules, but for this problem, assume it has the same precedence and associativity as Python's `and` and `or` operators.\n\nYour function should return `True` if the string `s` is a valid mathematical expression that can be evaluated using Python's `eval()` function without raising any exceptions, and `False` otherwise.\n\n**Sample Input and Output:**\n- Input: `\"123\"`  \n  Output: `True`\n- Input: `\"-45.67\"`  \n  Output: `True`\n- Input: `\"(1 + 2) * 3\"`  \n  Output: `True`\n- Input: `\"abs(-10)\"`  \n  Output: `True`\n- Input: `\"max(1, 2, 3)\"`  \n  Output: `True`\n- Input: `\"round(3.14159, 2)\"`  \n  Output: `True`\n- Input: `\"pow(2, 3)\"`  \n  Output: `True`\n- Input: `\"sum([1, 2, 3])\"`  \n  Output: `True`\n- Input: `\"None\"`  \n  Output: `False`\n- Input: `\"abc\"`  \n  Output: `False`\n- Input: `\"123abc\"`  \n  Output: `False`\n- Input: `\"(1 + 2\"`  \n  Output: `False`\n- Input: `\"abs\"`  \n  Output: `False`\n- Input: `\"max(1, 2,)\"`  \n  Output: `False`\n- Input: `\"round(3.14159)\"`  \n  Output: `False`\n- Input: `\"pow()\"`  \n  Output: `False`\n- Input: `\"sum\"`  \n  Output: `False`\n- Input: `\"5 > 3 ? 1 : 2\"`  \n  Output: `True`\n- Input: `\"5 > 3 ? 1 + 2 : 2\"`  \n  Output: `True`\n- Input: `\"5 < 3 ? 1 : 2 > 4 ? 4 : 5\"`  \n  Output: `True`\n- Input: `\"5 < 3 ? 1 : 2 > 4 ? 4\"`  \n  Output: `False`",
    "output": "import re\n\ndef validate_input(s):\n    \"\"\"\n    Determines if the given string s is a valid mathematical expression that can be evaluated using Python's eval() function.\n    \n    Args:\n    s (str): The string to be evaluated.\n    \n    Returns:\n    bool: True if s is a valid mathematical expression, False otherwise.\n    \"\"\"\n    if s is None:\n        return False\n    \n    # Replace ternary operator syntax with Python's syntax\n    s = re.sub(r'\\s*(.*?)\\s*\\?\\s*(.*?)\\s*\\:\\s*(.*?)\\s*', r'(\\1 if \\2 else \\3)', s)\n    \n    # Define a safe dictionary to restrict the scope of eval\n    safe_dict = {\n        'abs': abs,\n        'max': max,\n        'min': min,\n        'round': round,\n        'pow': pow,\n        'sum': sum,\n        '__builtins__': None\n    }\n    \n    try:\n        # Evaluate the expression in a safe environment\n        eval(s, safe_dict)\n        return True\n    except (SyntaxError, NameError, TypeError, ZeroDivisionError, ValueError):\n        return False\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert validate_input(\\\"123\\\") == True\\n\", \"\\nassert validate_input(\\\"-45.67\\\") == True\\n\", \"\\nassert validate_input(\\\"(1 + 2) * 3\\\") == True\\n\", \"\\nassert validate_input(\\\"abs(-10)\\\") == True\\n\", \"\\nassert validate_input(\\\"max(1, 2, 3)\\\") == True\\n\", \"\\nassert validate_input(\\\"round(3.14159, 2)\\\") == True\\n\", \"\\nassert validate_input(\\\"pow(2, 3)\\\") == True\\n\", \"\\nassert validate_input(\\\"sum([1, 2, 3])\\\") == True\\n\", \"\\nassert validate_input(\\\"5 > 3 ? 1 : 2\\\") == True\\n\", \"\\nassert validate_input(\\\"5 < 3 ? 1 : 2 > 4 ? 4 : 5\\\") == True\\n\"]"
  },
  {
    "input": "You are given a set `S` containing distinct integers. Your task is to generate all possible subsets (power set) of `S`. The subsets should be returned as a list of lists, where each inner list represents a subset of `S`. The order of subsets in the output does not matter.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10), the number of elements in the set `S`.\n- The second line contains `n` distinct integers, representing the elements of the set `S`.\n\n**Output:**\n- Print a list of lists, where each inner list is a subset of `S`.\n\n**Sample Input:**\n```\n3\n1 2 3\n```\n\n**Sample Output:**\n```\n[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n```",
    "output": "def generate_power_set(S):\n    \"\"\"\n    Generate all possible subsets (power set) of a given set S.\n\n    Parameters:\n    S (set): A set of distinct integers.\n\n    Returns:\n    list of list of int: A list containing all subsets of S.\n    \"\"\"\n    S = list(S)  # Convert the input set to a list\n    power_set = [[]]  # Initialize the power set with the empty subset\n    \n    for elem in S:\n        # For each element in S, add it to all existing subsets to form new subsets\n        power_set.extend([current_set + [elem] for current_set in power_set])\n    \n    return power_set\n\n# Test the function\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    S = set(map(int, input().strip().split()))\n    result = generate_power_set(S)\n    print(result)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert generate_power_set({}) == [[]]\\n\", \"\\nassert generate_power_set({1}) == [[], [1]]\\n\", \"\\nassert generate_power_set({1, 2}) == [[], [1], [2], [1, 2]]\\n\", \"\\nassert generate_power_set({1, 2, 3}) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\\n\", \"\\nassert generate_power_set({1, 2, 3, 4}) == [[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\\n\", \"\\nassert generate_power_set({5, 6}) == [[], [5], [6], [5, 6]]\\n\", \"\\nassert generate_power_set({7}) == [[], [7]]\\n\", \"\\nassert generate_power_set({8, 9, 10}) == [[], [8], [9], [10], [8, 9], [8, 10], [9, 10], [8, 9, 10]]\\n\", \"\\nassert generate_power_set({11, 12, 13, 14, 15}) == [[], [11], [12], [13], [14], [15], [11, 12], [11, 13], [11, 14], [11, 15], [12, 13], [12, 14], [12, 15], [13, 14], [13, 15], [14, 15], [11, 12, 13], [11, 12, 14], [11, 12, 15], [11, 13, 14], [11, 13, 15], [11, 14, 15], [12, 13, 14], [12, 13, 15], [12, 14, 15], [13, 14, 15], [11, 12, 13, 14], [11, 12, 13, 15], [11, 12, 14, 15], [11, 13, 14, 15], [12, 13, 14, 15], [11, 12, 13, 14, 15]]\\n\", \"\\nassert generate_power_set({20, 21, 22, 23, 24, 25}) == [[], [20], [21], [22], [23], [24], [25], [20, 21], [20, 22], [20, 23], [20, 24], [20, 25], [21, 22], [21, 23], [21, 24], [21, 25], [22, 23], [22, 24], [22, 25], [23, 24], [23, 25], [24, 25], [20, 21, 22], [20, 21, 23], [20, 21, 24], [20, 21, 25], [20, 22, 23], [20, 22, 24], [20, 22, 25], [20, 23, 24], [20, 23, 25], [20, 24, 25], [21, 22, 23], [21, 22, 24], [21, 22, 25], [21, 23, 24], [21, 23, 25], [21, 24, 25], [22, 23, 24], [22, 23, 25], [22, 24, 25], [23, 24, 25], [20, 21, 22, 23], [20, 21, 22, 24], [20, 21, 22, 25], [20, 21, 23, 24], [20, 21, 23, 25], [20, 21, 24, 25], [20, 22, 23, 24], [20, 22, 23, 25], [20, 22, 24, 25], [20, 23, 24, 25], [21, 22, 23, 24], [21, 22, 23, 25], [21, 22, 24, 25], [21, 23, 24, 25], [22, 23, 24, 25], [20, 21, 22, 23, 24], [20, 21, 22, 23, 25], [20, 21, 22, 24, 25], [20, 21, 23, 24, 25], [20, 22, 23, 24, 25], [21, 22, 23, 24, 25], [20, 21, 22, 23, 24, 25]]\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python script that efficiently converts a CSV file to an Excel file while preserving column headers and data types. Your script should be able to handle large CSV files. Use the `pandas` and `openpyxl` libraries for this task.\n\n**Input:**\n- The first line of input will be the path to the CSV file.\n- The second line of input will be the path where the Excel file should be saved.\n\n**Output:**\n- The script should print \"Conversion completed: [output_excel_path]\" after successfully converting the CSV file to an Excel file.\n\n**Sample Input:**\n```\ndata/large_dataset.csv\noutput/converted_dataset.xlsx\n```\n\n**Sample Output:**\n```\nConversion completed: output/converted_dataset.xlsx\n```",
    "output": "import pandas as pd\n\ndef csv_to_excel(input_csv_path, output_excel_path):\n    \"\"\"\n    Convert a large CSV file to an Excel file, preserving column headers and data types.\n\n    Parameters:\n    - input_csv_path: str. Path to the source CSV file.\n    - output_excel_path: str. Path where the converted Excel file will be saved.\n    \"\"\"\n    df = pd.read_csv(input_csv_path, dtype=str)\n    writer = pd.ExcelWriter(output_excel_path, engine='openpyxl')\n    df.to_excel(writer, index=False)\n    writer.save()\n    print(f\"Conversion completed: {output_excel_path}\")\n\nif __name__ == \"__main__\":\n    input_csv_path = input().strip()\n    output_excel_path = input().strip()\n    csv_to_excel(input_csv_path, output_excel_path)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert csv_to_excel('test_data.csv', 'output_test_data.xlsx') == None\\n\", \"\\nassert csv_to_excel('empty_file.csv', 'output_empty_file.xlsx') == None\\n\", \"\\nassert csv_to_excel('single_row.csv', 'output_single_row.xlsx') == None\\n\", \"\\nassert csv_to_excel('single_column.csv', 'output_single_column.xlsx') == None\\n\", \"\\nassert csv_to_excel('large_file.csv', 'output_large_file.xlsx') == None\\n\", \"\\nassert csv_to_excel('file_with_headers.csv', 'output_file_with_headers.xlsx') == None\\n\", \"\\nassert csv_to_excel('file_with_special_chars.csv', 'output_file_with_special_chars.xlsx') == None\\n\", \"\\nassert csv_to_excel('file_with_large_numbers.csv', 'output_file_with_large_numbers.xlsx') == None\\n\", \"\\nassert csv_to_excel('file_with_dates.csv', 'output_file_with_dates.xlsx') == None\\n\", \"\\nassert csv_to_excel('file_with_mixed_data.csv', 'output_file_with_mixed_data.xlsx') == None\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `normalize_input(x)` that processes an input `x` and returns it in a standardized tuple format. The function should adhere to the following rules:\n\n- If `x` is a string, it should be converted into a tuple containing that string as its only element.\n- If `x` is already a tuple or a list, it should be returned unchanged.\n- If `x` is a set, it should be converted into a tuple with its elements sorted in ascending order.\n- For any other type of input, the function should raise a `TypeError` with the message \"Input must be a string, tuple, list, or set.\"\n\n**Sample Input/Output:**\n\n- Input: `\"hello\"`\n  - Output: `(\"hello\",)`\n- Input: `[\"apple\", \"banana\"]`\n  - Output: `[\"apple\", \"banana\"]`\n- Input: `{\"banana\", \"apple\"}`\n  - Output: `(\"apple\", \"banana\")`\n- Input: `(1, 2, 3)`\n  - Output: `(1, 2, 3)`",
    "output": "def normalize_input(x):\n    \"\"\"\n    Normalize the input x to a tuple format based on its type.\n    \n    Parameters:\n    x (str, tuple, list, set): The input to be normalized.\n    \n    Returns:\n    tuple: The normalized input as a tuple.\n    \n    Raises:\n    TypeError: If the input is not a string, tuple, list, or set.\n    \"\"\"\n    if isinstance(x, str):\n        return (x,)\n    elif isinstance(x, (tuple, list)):\n        return x\n    elif isinstance(x, set):\n        return tuple(sorted(x))\n    else:\n        raise TypeError(\"Input must be a string, tuple, list, or set.\")\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert normalize_input(\\\"hello\\\") == (\\\"hello\\\",)\\n\", \"\\nassert normalize_input((\\\"hello\\\", \\\"world\\\")) == (\\\"hello\\\", \\\"world\\\")\\n\", \"\\nassert normalize_input([\\\"hello\\\", \\\"world\\\"]) == [\\\"hello\\\", \\\"world\\\"]\\n\", \"\\nassert normalize_input({\\\"hello\\\", \\\"world\\\"}) == (\\\"hello\\\", \\\"world\\\")\\n\", \"\\nassert normalize_input({\\\"a\\\", \\\"b\\\", \\\"c\\\"}) == (\\\"a\\\", \\\"b\\\", \\\"c\\\")\\n\", \"\\nassert normalize_input(\\\"single\\\") == (\\\"single\\\",)\\n\", \"\\nassert normalize_input([]) == []\\n\", \"\\nassert normalize_input(()) == ()\\n\", \"\\nassert normalize_input(set()) == ()\\n\", \"\\nassert normalize_input({\\\"z\\\", \\\"y\\\", \\\"x\\\"}) == (\\\"x\\\", \\\"y\\\", \\\"z\\\")\\n\"]"
  },
  {
    "input": "You are developing a simple calculator application that supports four operations: addition, subtraction, multiplication, and division. Your task is to implement a function `validate_calculator_input` that checks the validity of the input parameters for these operations. The function should take two parameters: a dictionary `input_params` containing the input parameters and a string `operation` specifying the operation to be performed.\n\nThe function should return an integer status code based on the following rules:\n- If the operation is addition, subtraction, or multiplication, and either `num1` or `num2` is missing from `input_params`, return `301`. Otherwise, return `200`.\n- If the operation is division, and either `num1` or `num2` is missing from `input_params`, return `301`. If `num2` is `0`, return `302`. Otherwise, return `200`.\n- If either `num1` or `num2` is not a number (not an integer or a float), return `303`.\n\n**Sample Input and Output:**\n- `validate_calculator_input({'num1': 10, 'num2': 5}, 'division')` should return `200`.\n- `validate_calculator_input({'num1': 10}, 'addition')` should return `301`.\n- `validate_calculator_input({'num1': 10, 'num2': 'a'}, 'addition')` should return `303`.\n- `validate_calculator_input({'num1': 10, 'num2': 0}, 'division')` should return `302`.",
    "output": "def validate_calculator_input(input_params, operation):\n    \"\"\"\n    Validates the input parameters for a simple calculator application.\n\n    Parameters:\n    input_params (dict): A dictionary containing the input parameters 'num1' and 'num2'.\n    operation (str): A string specifying the operation ('addition', 'subtraction', 'multiplication', 'division').\n\n    Returns:\n    int: An integer status code based on the validity of the input parameters.\n    \"\"\"\n    if 'num1' not in input_params or 'num2' not in input_params:\n        return 301\n    \n    num1, num2 = input_params['num1'], input_params['num2']\n    \n    if not isinstance(num1, (int, float)) or not isinstance(num2, (int, float)):\n        return 303\n    \n    if operation == 'division' and num2 == 0:\n        return 302\n    \n    return 200\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_calculator_input({'num1': 10, 'num2': 5}, 'addition') == 200\\n\", \"\\nassert validate_calculator_input({'num1': 10, 'num2': 5}, 'subtraction') == 200\\n\", \"\\nassert validate_calculator_input({'num1': 10, 'num2': 5}, 'multiplication') == 200\\n\", \"\\nassert validate_calculator_input({'num1': 10, 'num2': 5}, 'division') == 200\\n\", \"\\nassert validate_calculator_input({'num1': 10}, 'addition') == 301\\n\", \"\\nassert validate_calculator_input({'num2': 5}, 'subtraction') == 301\\n\", \"\\nassert validate_calculator_input({}, 'multiplication') == 301\\n\", \"\\nassert validate_calculator_input({'num1': 10, 'num2': 'a'}, 'addition') == 303\\n\", \"\\nassert validate_calculator_input({'num1': 'b', 'num2': 5}, 'subtraction') == 303\\n\", \"\\nassert validate_calculator_input({'num1': 10, 'num2': 0}, 'division') == 302\\n\"]"
  },
  {
    "input": "You are given a string `s` consisting of lowercase English letters. Your task is to generate all unique permutations of the string in lexicographic order. \n\n**Input:**\n- A single line containing the string `s` (1 \u2264 |s| \u2264 8).\n\n**Output:**\n- Print each permutation of the string on a new line in lexicographic order.\n\n**Sample Input:**\n```\nabc\n```\n\n**Sample Output:**\n```\nabc\nacb\nbac\nbca\ncab\ncba\n```",
    "output": "from itertools import permutations\n\ndef generate_permutations_lexicographic(s):\n    \"\"\"\n    Generate all unique permutations of the string in lexicographic order.\n\n    :param s: Input string consisting of lowercase English letters.\n    :return: List of strings, each representing a unique permutation in lexicographic order.\n    \"\"\"\n    perm = permutations(sorted(set(s)))\n    return [''.join(p) for p in perm]\n\n# Example usage\nif __name__ == \"__main__\":\n    s = input().strip()\n    permutations_list = generate_permutations_lexicographic(s)\n    for perm in permutations_list:\n        print(perm)\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert generate_permutations_lexicographic(\\\"abc\\\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"a\\\") == ['a']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"aa\\\") == ['a']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"ab\\\") == ['ab', 'ba']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"abc\\\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"aabb\\\") == ['aabb', 'abab', 'abba', 'baab', 'baba', 'bbaa']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"xyz\\\") == ['xyz', 'xzy', 'yxz', 'yzx', 'zxy', 'zyx']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"\\\") == []\\n\", \"\\nassert generate_permutations_lexicographic(\\\"123\\\") == ['123', '132', '213', '231', '312', '321']\\n\", \"\\nassert generate_permutations_lexicographic(\\\"!@#\\\") == ['!@#', '!#@', '@!#', '@#!', '#!@', '#@!']\\n\"]"
  },
  {
    "input": "You are given a list of strings representing potential numeric values. Your task is to implement two functions: `validate_and_convert_input` and `calculate_average`. The `validate_and_convert_input` function should attempt to convert a string to a floating-point number, returning the number if successful or `None` if the conversion fails. The `calculate_average` function should use `validate_and_convert_input` to process a list of strings, calculating the average of the numbers that are greater than 0. If no valid numbers are found, `calculate_average` should return `None`.\n\n**Input:**\n- The `validate_and_convert_input` function takes a single string as input.\n- The `calculate_average` function takes a list of strings as input.\n\n**Output:**\n- The `validate_and_convert_input` function returns a float or `None`.\n- The `calculate_average` function returns a float or `None`.\n\n**Sample Input:**\n```\n[\"10\", \"-1\", \"20\", \"30\", \"abc\"]\n```\n\n**Sample Output:**\n```\n20.0\n```",
    "output": "def validate_and_convert_input(input_string):\n    \"\"\"\n    Attempts to convert a string input to a floating point number.\n    Returns the float if successful, otherwise returns None.\n    \n    :param input_string: String to be converted to float\n    :return: Conversion result as float or None\n    \"\"\"\n    try:\n        return float(input_string)\n    except ValueError:\n        return None\n\ndef calculate_average(input_list):\n    \"\"\"\n    Calculates the average of a list of strings where each string is converted\n    to a float using the validate_and_convert_input function. Only considers\n    numbers greater than 0 for calculating the average.\n    \n    :param input_list: List of strings to be processed\n    :return: Average of the valid numbers or None if no valid numbers are found\n    \"\"\"\n    total = 0\n    count = 0\n    for item in input_list:\n        number = validate_and_convert_input(item)\n        if number is not None and number > 0:\n            total += number\n            count += 1\n            \n    return total / count if count > 0 else None\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_and_convert_input(\\\"123.45\\\") == 123.45\\n\", \"\\nassert validate_and_convert_input(\\\"abc\\\") is None\\n\", \"\\nassert validate_and_convert_input(\\\"0\\\") == 0.0\\n\", \"\\nassert validate_and_convert_input(\\\"-123.45\\\") == -123.45\\n\", \"\\nassert validate_and_convert_input(\\\"0.0001\\\") == 0.0001\\n\", \"\\nassert calculate_average([\\\"10\\\", \\\"20\\\", \\\"30\\\"]) == 20.0\\n\", \"\\nassert calculate_average([\\\"-10\\\", \\\"-20\\\", \\\"-30\\\"]) is None\\n\", \"\\nassert calculate_average([\\\"10\\\", \\\"abc\\\", \\\"30\\\"]) == 20.0\\n\", \"\\nassert calculate_average([\\\"0\\\", \\\"0.0\\\", \\\"0.00\\\"]) is None\\n\", \"\\nassert calculate_average([]) is None\\n\"]"
  },
  {
    "input": "You are tasked with implementing a `Rectangle` class in Python. The class should have two attributes, `width` and `height`, and two methods: `area` and `perimeter`. The `area` method should return the area of the rectangle, and the `perimeter` method should return the perimeter of the rectangle. Your implementation should be able to handle multiple instances of the `Rectangle` class.\n\n**Input:**\n- The first line contains an integer `n`, the number of rectangles.\n- The next `n` lines each contain two integers `w` and `h`, representing the width and height of a rectangle.\n\n**Output:**\n- For each rectangle, output two lines: the first line should contain the area of the rectangle, and the second line should contain the perimeter of the rectangle.\n\n**Sample Input:**\n```\n2\n5 3\n4 6\n```\n\n**Sample Output:**\n```\n15\n16\n24\n20\n```",
    "output": "class Rectangle:\n    def __init__(self, width, height):\n        \"\"\"\n        Initialize a new Rectangle instance with given width and height.\n\n        :param width: The width of the rectangle.\n        :param height: The height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height\n\n    def area(self):\n        \"\"\"\n        Calculate and return the area of the rectangle.\n\n        :return: The area of the rectangle.\n        \"\"\"\n        return self.width * self.height\n\n    def perimeter(self):\n        \"\"\"\n        Calculate and return the perimeter of the rectangle.\n\n        :return: The perimeter of the rectangle.\n        \"\"\"\n        return 2 * (self.width + self.height)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for _ in range(n):\n        w, h = map(int, input().strip().split())\n        rectangle = Rectangle(w, h)\n        print(rectangle.area())\n        print(rectangle.perimeter())\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert Rectangle(5, 3).area() == 15\\n\", \"\\nassert Rectangle(5, 3).perimeter() == 16\\n\", \"\\nassert Rectangle(0, 0).area() == 0\\n\", \"\\nassert Rectangle(0, 0).perimeter() == 0\\n\", \"\\nassert Rectangle(10, 2).area() == 20\\n\", \"\\nassert Rectangle(10, 2).perimeter() == 24\\n\", \"\\nassert Rectangle(7, 7).area() == 49\\n\", \"\\nassert Rectangle(7, 7).perimeter() == 28\\n\", \"\\nassert Rectangle(1, 100).area() == 100\\n\", \"\\nassert Rectangle(1, 100).perimeter() == 202\\n\"]"
  },
  {
    "input": "You are given a CSV file containing stock prices with at least two columns: \"Date\" and \"Close\". Your task is to write a Python program that calculates the moving average of the closing prices for a specified window size. The program should read the file path and window size from the user, compute the moving averages, and output the results to a new CSV file with the columns \"Date\" and \"Moving Average\". The output file should be named by appending \"_moving_avg\" to the original file name before the extension.\n\n**Input:**\n- The first line contains the file path to the CSV file.\n- The second line contains the window size (an integer).\n\n**Output:**\n- A new CSV file with the moving averages.\n\n**Sample Input:**\n```\npath/to/your/stock_prices.csv\n10\n```\n\n**Sample Output:**\nA new file `path/to/your/stock_prices_moving_avg.csv` with the following format:\n```\nDate,Moving Average\n2023-01-11,150.5\n2023-01-12,151.0\n...\n```",
    "output": "import pandas as pd\n\ndef calculate_moving_average(file_path, window_size):\n    \"\"\"\n    Calculate the moving average of the closing prices for a given window size from a CSV file.\n\n    Parameters:\n    file_path (str): The path to the CSV file containing stock prices.\n    window_size (int): The window size for calculating the moving average.\n\n    Returns:\n    None: The function saves the moving averages to a new CSV file.\n    \"\"\"\n    # Load the stock prices from the CSV file into a DataFrame\n    data = pd.read_csv(file_path)\n    \n    # Ensure the 'Date' column is in datetime format\n    data['Date'] = pd.to_datetime(data['Date'])\n    \n    # Sort data by date in case it's not already sorted\n    data = data.sort_values('Date')\n    \n    # Calculate the moving average of the closing prices using the specified window size\n    data['Moving Average'] = data['Close'].rolling(window=window_size).mean()\n    \n    # Drop rows with NaN values resulting from the moving average calculation\n    data.dropna(subset=['Moving Average'], inplace=True)\n    \n    # Determine the output file name\n    output_file_path = file_path.replace('.csv', '_moving_avg.csv')\n    \n    # Save the resulting DataFrame with the dates and moving averages to a new CSV file\n    data[['Date', 'Moving Average']].to_csv(output_file_path, index=False)\n\n# Example usage:\n# file_path = input().strip()\n# window_size = int(input().strip())\n# calculate_moving_average(file_path, window_size)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_moving_average('test_data.csv', 1) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 5) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 10) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 20) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 0) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', -5) == None\\n\", \"\\nassert calculate_moving_average('non_existent_file.csv', 5) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 1000) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 2) == None\\n\", \"\\nassert calculate_moving_average('test_data.csv', 3) == None\\n\"]"
  },
  {
    "input": "You are given a text file. Your task is to write a program that reads the file and calculates the frequency of each word, excluding common stop words and ignoring punctuation and case. The program should output the words and their frequencies in descending order of frequency.\n\n**Input:**\n- The first line of input contains the path to the text file.\n\n**Output:**\n- For each word in the file (excluding stop words), output the word followed by its frequency, sorted by frequency in descending order.\n\n**Sample Input:**\n```\nexample.txt\n```\n\n**Content of example.txt:**\n```\nThe quick brown fox jumps over the lazy dog. The dog was not amused.\n```\n\n**Sample Output:**\n```\ndog: 2\nthe: 2\nquick: 1\nbrown: 1\nfox: 1\njumps: 1\nover: 1\nlazy: 1\nwas: 1\nnot: 1\namused: 1\n```",
    "output": "import string\nfrom collections import Counter\n\ndef load_stop_words():\n    \"\"\"\n    Load a set of common stop words to be ignored during word frequency counting.\n    \n    Returns:\n        set: A set of stop words.\n    \"\"\"\n    return set(['the', 'and', 'is', 'in', 'a', 'an', 'on', 'at', 'to', 'of', 'for', 'with', 'but', 'or', 'are', 'as', 'by', 'it', 'from', 'this', 'that', 'these', 'those', 'be', 'not', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them', 'my', 'your', 'his', 'her', 'its', 'our', 'their', 'mine', 'yours', 'his', 'hers', 'ours', 'theirs', 'so', 'if', 'then', 'because', 'while', 'where', 'when', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y'])\n\ndef count_words_in_file(file_path):\n    \"\"\"\n    Count the frequency of each word in a file, excluding stop words and ignoring punctuation and case.\n    \n    Args:\n        file_path (str): The path to the text file.\n    \n    Returns:\n        None: Prints the words and their frequencies in descending order of frequency.\n    \"\"\"\n    stop_words = load_stop_words()\n    word_counts = Counter()\n\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            for line in file:\n                line = line.translate(str.maketrans('', '', string.punctuation)).lower()\n                words = line.split()\n                for word in words:\n                    if word and word not in stop_words:\n                        word_counts[word] += 1\n\n        for word, count in word_counts.most_common():\n            print(f\"{word}: {count}\")\n\n    except FileNotFoundError:\n        print(f\"Error: The file {file_path} does not exist.\")\n\n# Replace 'example.txt' with the path of your file\ncount_words_in_file(input().strip())\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert count_words_in_file('empty.txt') == None\\n\", \"\\nassert count_words_in_file('single_word.txt') == None\\n\", \"\\nassert count_words_in_file('stop_words_only.txt') == None\\n\", \"\\nassert count_words_in_file('punctuation.txt') == None\\n\", \"\\nassert count_words_in_file('case_insensitive.txt') == None\\n\", \"\\nassert count_words_in_file('multiple_lines.txt') == None\\n\", \"\\nassert count_words_in_file('non_existent_file.txt') == None\\n\", \"\\nassert count_words_in_file('mixed_content.txt') == None\\n\", \"\\nassert count_words_in_file('large_file.txt') == None\\n\", \"\\nassert count_words_in_file('special_characters.txt') == None\\n\"]"
  },
  {
    "input": "You are tasked with writing a program to generate the first `N` Lucas numbers. The Lucas numbers are an integer sequence similar to the Fibonacci sequence, defined by the recurrence relation:\n\n- `L(0) = 2`\n- `L(1) = 1`\n- `L(n) = L(n-1) + L(n-2)` for `n > 1`\n\nYour program should efficiently compute these numbers using memoization to handle large values of `N`. The input will be a single integer `N` (0 \u2264 N \u2264 1000), and the output should be a list of the first `N` Lucas numbers.\n\n**Sample Input:**\n```\n5\n```\n\n**Sample Output:**\n```\n[2, 1, 3, 4, 7]\n```",
    "output": "def lucas_numbers(n, memo={}):\n    \"\"\"\n    Compute the nth Lucas number using memoization.\n\n    :param n: The index of the Lucas number to compute.\n    :param memo: A dictionary to store previously computed Lucas numbers.\n    :return: The nth Lucas number.\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        memo[n] = lucas_numbers(n - 1, memo) + lucas_numbers(n - 2, memo)\n        return memo[n]\n\ndef generate_lucas_numbers(count):\n    \"\"\"\n    Generate the first 'count' Lucas numbers.\n\n    :param count: The number of Lucas numbers to generate.\n    :return: A list containing the first 'count' Lucas numbers.\n    \"\"\"\n    return [lucas_numbers(i) for i in range(count)]\n\nif __name__ == \"__main__\":\n    try:\n        count = int(input(\"How many Lucas numbers would you like to generate? \"))\n        if count < 0:\n            raise ValueError(\"The number of Lucas numbers must be non-negative.\")\n        lucas_sequence = generate_lucas_numbers(count)\n        print(\"Lucas numbers:\", lucas_sequence)\n    except ValueError as e:\n        print(\"Invalid input:\", e)\n",
    "_category": "dynamic_programming",
    "unit_tests": "[\"\\nassert generate_lucas_numbers(0) == []\\n\", \"\\nassert generate_lucas_numbers(1) == [2]\\n\", \"\\nassert generate_lucas_numbers(2) == [2, 1]\\n\", \"\\nassert generate_lucas_numbers(3) == [2, 1, 3]\\n\", \"\\nassert generate_lucas_numbers(4) == [2, 1, 3, 4]\\n\", \"\\nassert generate_lucas_numbers(5) == [2, 1, 3, 4, 7]\\n\", \"\\nassert generate_lucas_numbers(6) == [2, 1, 3, 4, 7, 11]\\n\", \"\\nassert generate_lucas_numbers(10) == [2, 1, 3, 4, 7, 11, 18, 29, 47, 76]\\n\", \"\\nassert generate_lucas_numbers(15) == [2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521, 843]\\n\", \"\\nassert generate_lucas_numbers(20) == [2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521, 843, 1364, 2207, 3571, 5778, 9349]\\n\"]"
  },
  {
    "input": "You are given a list of `n` strings. Your task is to determine the most frequently occurring string in the list. In the event of a tie, the string that appears first in the list with the highest frequency should be returned.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of strings in the list.\n- The next `n` lines contain the strings, each consisting of lowercase English letters and having a length between 1 and 20 characters.\n\n**Output:**\n- Print the most common string in the list. If there is a tie, print the first string that appears with the highest frequency.\n\n**Sample Input:**\n```\n6\napple\nbanana\napple\norange\nbanana\nbanana\n```\n\n**Sample Output:**\n```\nbanana\n```",
    "output": "from collections import Counter\n\ndef most_common_string(string_list):\n    \"\"\"\n    Returns the most common string in the list. In case of a tie,\n    returns the first string that appears with the highest frequency.\n    \n    :param string_list: List of strings\n    :return: The most common string\n    \"\"\"\n    counts = Counter(string_list)\n    max_frequency = max(counts.values())\n    for string in string_list:\n        if counts[string] == max_frequency:\n            return string\n\n# Example usage\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    input_list = [input().strip() for _ in range(n)]\n    print(most_common_string(input_list))\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert most_common_string([\\\"apple\\\", \\\"banana\\\", \\\"apple\\\", \\\"orange\\\", \\\"banana\\\", \\\"banana\\\"]) == \\\"banana\\\"\\n\", \"\\nassert most_common_string([\\\"dog\\\", \\\"cat\\\", \\\"dog\\\", \\\"cat\\\", \\\"dog\\\"]) == \\\"dog\\\"\\n\", \"\\nassert most_common_string([\\\"one\\\", \\\"two\\\", \\\"two\\\", \\\"three\\\", \\\"three\\\", \\\"three\\\"]) == \\\"three\\\"\\n\", \"\\nassert most_common_string([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\"]) == \\\"a\\\"\\n\", \"\\nassert most_common_string([\\\"hello\\\", \\\"hello\\\", \\\"world\\\"]) == \\\"hello\\\"\\n\", \"\\nassert most_common_string([\\\"tie\\\", \\\"tie\\\", \\\"break\\\", \\\"break\\\", \\\"tie\\\"]) == \\\"tie\\\"\\n\", \"\\nassert most_common_string([\\\"single\\\"]) == \\\"single\\\"\\n\", \"\\nassert most_common_string([]) == None\\n\", \"\\nassert most_common_string([\\\"first\\\", \\\"second\\\", \\\"first\\\", \\\"second\\\", \\\"first\\\", \\\"second\\\"]) == \\\"first\\\"\\n\", \"\\nassert most_common_string([\\\"unique\\\", \\\"words\\\", \\\"only\\\"]) == \\\"unique\\\"\\n\"]"
  },
  {
    "input": "You are given a CSV file with the following columns: `id`, `name`, `age`, `gender`. Your task is to write a Python script that reads the CSV file from a given file path and outputs the number of rows in the file, excluding the header row. Your script should handle potential errors such as file not found or other exceptions gracefully.\n\n**Input:**\n- The first line of input is a string representing the file path to the CSV file.\n\n**Output:**\n- A single line of output indicating the number of rows in the CSV file, excluding the header row.\n\n**Sample Input:**\n```\ndata.csv\n```\n\n**Sample Output:**\n```\nThe number of rows in the CSV file, excluding the header, is: 5\n```",
    "output": "import csv\nimport sys\n\ndef count_rows_in_csv(file_path):\n    \"\"\"\n    Counts the number of rows in a CSV file, excluding the header row.\n    \n    Parameters:\n    file_path (str): The path to the CSV file.\n    \n    Returns:\n    None: Prints the number of rows excluding the header.\n    \"\"\"\n    try:\n        with open(file_path, mode='r', newline='') as file:\n            csv_reader = csv.reader(file)\n            next(csv_reader)  # Skip the header row\n            row_count = sum(1 for row in csv_reader)\n            print(f\"The number of rows in the CSV file, excluding the header, is: {row_count}\")\n    except FileNotFoundError:\n        print(f\"The file at {file_path} was not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    file_path = input().strip()\n    count_rows_in_csv(file_path)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert count_rows_in_csv(\\\"empty.csv\\\") == None  # Assuming empty.csv is an empty file with just the header\\n\", \"\\nassert count_rows_in_csv(\\\"single_row.csv\\\") == None  # Assuming single_row.csv has only the header and one data row\\n\", \"\\nassert count_rows_in_csv(\\\"multiple_rows.csv\\\") == None  # Assuming multiple_rows.csv has multiple data rows\\n\", \"\\nassert count_rows_in_csv(\\\"non_existent_file.csv\\\") == None  # Assuming the file does not exist\\n\", \"\\nassert count_rows_in_csv(\\\"invalid_csv.csv\\\") == None  # Assuming invalid_csv.csv is not a valid CSV file\\n\", \"\\nassert count_rows_in_csv(\\\"header_only.csv\\\") == None  # Assuming header_only.csv contains only the header row\\n\", \"\\nassert count_rows_in_csv(\\\"large_file.csv\\\") == None  # Assuming large_file.csv is a large CSV file with many rows\\n\", \"\\nassert count_rows_in_csv(\\\"file_with_empty_rows.csv\\\") == None  # Assuming file_with_empty_rows.csv has some empty rows\\n\", \"\\nassert count_rows_in_csv(\\\"file_with_extra_commas.csv\\\") == None  # Assuming file_with_extra_commas.csv has rows with extra commas\\n\", \"\\nassert count_rows_in_csv(\\\"file_with_missing_values.csv\\\") == None  # Assuming file_with_missing_values.csv has rows with missing values\\n\"]"
  },
  {
    "input": "Implement a simple chatbot in Python that responds to a set of predefined questions. The chatbot should handle the following interactions:\n\n- **Input:** A string representing the user's question.\n- **Output:** A string representing the chatbot's response. The chatbot should respond with a predefined answer if the question matches one of the following:\n  - \"Hello\" -> \"Hi! How can I assist you today?\"\n  - \"What can you do?\" -> \"I can answer questions, provide information, and engage in conversation.\"\n  - \"How do you work?\" -> \"I process your input and match it to predefined questions to provide relevant responses.\"\n  - \"What is your name?\" -> \"I am a simple chatbot created to assist you.\"\n  - \"Goodbye\" -> \"Goodbye! Have a great day!\"\n- If the input does not match any predefined question, the chatbot should respond with: \"I'm sorry, I didn't quite understand that. Can you ask something else?\"\n\n**Sample Interaction:**\n```\nChatbot: Hello! Type 'Goodbye' to end the conversation.\nYou: Hello\nChatbot: Hi! How can I assist you today?\nYou: What can you do?\nChatbot: I can answer questions, provide information, and engage in conversation.\nYou: How are you?\nChatbot: I'm sorry, I didn't quite understand that. Can you ask something else?\nYou: Goodbye\nChatbot: Goodbye! Have a great day!\n```",
    "output": "def chatbot():\n    \"\"\"\n    Simulates a simple chatbot that responds to predefined questions.\n    The chatbot continues to interact with the user until the user types 'Goodbye'.\n    \"\"\"\n    # Predefined questions and their corresponding responses\n    responses = {\n        \"Hello\": \"Hi! How can I assist you today?\",\n        \"What can you do?\": \"I can answer questions, provide information, and engage in conversation.\",\n        \"How do you work?\": \"I process your input and match it to predefined questions to provide relevant responses.\",\n        \"What is your name?\": \"I am a simple chatbot created to assist you.\",\n        \"Goodbye\": \"Goodbye! Have a great day!\"\n    }\n    \n    # Default response if the user's input does not match any predefined questions\n    default_response = \"I'm sorry, I didn't quite understand that. Can you ask something else?\"\n    \n    # Chat loop\n    print(\"Chatbot: Hello! Type 'Goodbye' to end the conversation.\")\n    while True:\n        # Get user input\n        user_input = input(\"You: \")\n        \n        # Check if user wants to end the conversation\n        if user_input == \"Goodbye\":\n            print(f\"Chatbot: {responses[user_input]}\")\n            break\n        \n        # Print chatbot response\n        print(f\"Chatbot: {responses.get(user_input, default_response)}\")\n\nif __name__ == \"__main__\":\n    chatbot()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert chatbot_response(\\\"Hello\\\") == \\\"Hi! How can I assist you today?\\\"\\n\", \"\\nassert chatbot_response(\\\"What can you do?\\\") == \\\"I can answer questions, provide information, and engage in conversation.\\\"\\n\", \"\\nassert chatbot_response(\\\"How do you work?\\\") == \\\"I process your input and match it to predefined questions to provide relevant responses.\\\"\\n\", \"\\nassert chatbot_response(\\\"What is your name?\\\") == \\\"I am a simple chatbot created to assist you.\\\"\\n\", \"\\nassert chatbot_response(\\\"Goodbye\\\") == \\\"Goodbye! Have a great day!\\\"\\n\", \"\\nassert chatbot_response(\\\"Hi\\\") == \\\"I'm sorry, I didn't quite understand that. Can you ask something else?\\\"\\n\", \"\\nassert chatbot_response(\\\"Can you help me?\\\") == \\\"I'm sorry, I didn't quite understand that. Can you ask something else?\\\"\\n\", \"\\nassert chatbot_response(\\\"\\\") == \\\"I'm sorry, I didn't quite understand that. Can you ask something else?\\\"\\n\", \"\\nassert chatbot_response(\\\"123\\\") == \\\"I'm sorry, I didn't quite understand that. Can you ask something else?\\\"\\n\", \"\\nassert chatbot_response(\\\"!@#\\\") == \\\"I'm sorry, I didn't quite understand that. Can you ask something else?\\\"\\n\"]"
  },
  {
    "input": "You are developing a program to compute the hourly cost of running a virtual machine (VM) on a cloud service provider. The provider offers three types of VMs: standard, high memory, and high CPU. Each type comes in various sizes, each with a different amount of RAM and a different hourly cost. Additionally, the cost varies based on whether the VM is preemptible or standard and whether the time is peak or off-peak.\n\nThe standard VMs are named 'n1-standard-X', where X is the number of CPUs (1, 2, 4, 8, 16, 32, or 64). The high memory VMs are named 'n1-highmem-X', and the high CPU VMs are named 'n1-highcpu-X', where X follows the same pattern as the standard VMs. There are also two smaller VMs, 'f1-micro' and 'g1-small'.\n\nThe cloud service provider offers two pricing models: preemptible and standard. Preemptible VMs are cheaper but can be shut down at any time by the provider, while standard VMs are more expensive but offer guaranteed uptime. The cost also varies based on peak and off-peak times.\n\nYour program should take as input the type and size of the VM, whether it is preemptible or standard, and whether the time is peak or off-peak. It should then output the hourly cost of running that VM.\n\n**Input:**\n- The first line contains the VM name (e.g., 'n1-standard-4', 'n1-highmem-8', 'f1-micro', etc.).\n- The second line contains 'yes' or 'no' indicating whether the VM is preemptible.\n- The third line contains 'yes' or 'no' indicating whether the time is peak time.\n\n**Output:**\n- A single line containing the hourly cost of running the VM, rounded to four decimal places.\n\n**Sample Input:**\n```\nn1-standard-4\nno\nyes\n```\n\n**Sample Output:**\n```\n0.1200\n```",
    "output": "# Define the hourly rates for VM types, sizes, pricing models, and peak/off-peak times\nPRICES = {\n    'n1-standard': {\n        'preemptible': {'peak': 0.01, 'off-peak': 0.005},\n        'standard': {'peak': 0.03, 'off-peak': 0.02},\n    },\n    'n1-highmem': {\n        'preemptible': {'peak': 0.02, 'off-peak': 0.01},\n        'standard': {'peak': 0.06, 'off-peak': 0.04},\n    },\n    'n1-highcpu': {\n        'preemptible': {'peak': 0.015, 'off-peak': 0.0075},\n        'standard': {'peak': 0.045, 'off-peak': 0.03},\n    },\n    'f1-micro': {\n        'preemptible': {'peak': 0.004, 'off-peak': 0.002},\n        'standard': {'peak': 0.012, 'off-peak': 0.008},\n    },\n    'g1-small': {\n        'preemptible': {'peak': 0.005, 'off-peak': 0.0025},\n        'standard': {'peak': 0.015, 'off-peak': 0.01},\n    },\n}\n\ndef get_vm_type(vm_name):\n    \"\"\"\n    Determine the type of VM based on its name.\n    \n    :param vm_name: str, the name of the VM\n    :return: str, the type of VM\n    \"\"\"\n    if 'standard' in vm_name:\n        return 'n1-standard'\n    elif 'highmem' in vm_name:\n        return 'n1-highmem'\n    elif 'highcpu' in vm_name:\n        return 'n1-highcpu'\n    elif 'f1-micro' in vm_name or 'g1-small' in vm_name:\n        return vm_name\n    else:\n        raise ValueError(\"Unknown VM type\")\n\ndef get_vm_cost(vm_name, is_preemptible, is_peak):\n    \"\"\"\n    Calculate the hourly cost of running a VM.\n    \n    :param vm_name: str, the name of the VM\n    :param is_preemptible: bool, whether the VM is preemptible\n    :param is_peak: bool, whether the time is peak time\n    :return: float, the hourly cost of running the VM\n    \"\"\"\n    vm_type = get_vm_type(vm_name)\n    pricing_model = 'preemptible' if is_preemptible else 'standard'\n    peak_status = 'peak' if is_peak else 'off-peak'\n    \n    num_cpus = 1 if vm_name in ['f1-micro', 'g1-small'] else int(vm_name.split('-')[-1])\n    rate = PRICES[vm_type][pricing_model][peak_status]\n    \n    return num_cpus * rate\n\ndef main():\n    \"\"\"\n    Main function to read input, compute the VM cost, and print the result.\n    \"\"\"\n    vm_name = input().strip()\n    is_preemptible = input().strip().lower() in ['yes', 'y']\n    is_peak = input().strip().lower() in ['yes', 'y']\n    \n    cost = get_vm_cost(vm_name, is_preemptible, is_peak)\n    print(f\"{cost:.4f}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert get_vm_cost('n1-standard-1', False, False) == 0.02\\n\", \"\\nassert get_vm_cost('n1-highmem-2', True, True) == 0.04\\n\", \"\\nassert get_vm_cost('n1-highcpu-4', False, True) == 0.18\\n\", \"\\nassert get_vm_cost('f1-micro', True, False) == 0.002\\n\", \"\\nassert get_vm_cost('g1-small', False, True) == 0.015\\n\", \"\\nassert get_vm_cost('n1-standard-8', True, False) == 0.04\\n\", \"\\nassert get_vm_cost('n1-highmem-16', False, True) == 0.96\\n\", \"\\nassert get_vm_cost('n1-highcpu-32', True, False) == 0.24\\n\", \"\\nassert get_vm_cost('n1-standard-64', False, True) == 1.92\\n\", \"\\nassert get_vm_cost('n1-highmem-64', True, True) == 1.28\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple calculator that can evaluate mathematical expressions involving addition (+), subtraction (-), multiplication (*), and division (/). The calculator should respect the standard order of operations (PEMDAS/BODMAS). Your program will receive a string representing a mathematical expression and should output the result of the expression. If the expression is invalid (e.g., contains unsupported characters, division by zero), your program should output an error message.\n\n**Input:**\n- A single line containing a mathematical expression as a string.\n\n**Output:**\n- A single line containing the result of the expression or an error message.\n\n**Sample Input 1:**\n```\n3 + 5 * 2\n```\n\n**Sample Output 1:**\n```\n13\n```\n\n**Sample Input 2:**\n```\n3 + 5 * (2 - 8)\n```\n\n**Sample Output 2:**\n```\n-13\n```\n\n**Sample Input 3:**\n```\n10 / 0\n```\n\n**Sample Output 3:**\n```\nError: division by zero\n```",
    "output": "import ast\nimport operator\n\n# Define supported operators\noperators = {\n    ast.Add: operator.add,\n    ast.Sub: operator.sub,\n    ast.Mult: operator.mul,\n    ast.Div: operator.truediv\n}\n\ndef evaluate_expression(expression: str) -> str:\n    \"\"\"\n    Evaluate a mathematical expression safely using the AST module.\n\n    :param expression: A string containing the mathematical expression.\n    :return: The result of the evaluated expression or an error message.\n    \"\"\"\n    try:\n        # Parse the expression into an AST\n        node = ast.parse(expression, mode='eval').body\n        \n        # Evaluate the AST\n        return str(eval_node(node))\n    except (SyntaxError, ZeroDivisionError, TypeError, ValueError) as e:\n        return f\"Error: {str(e)}\"\n\ndef eval_node(node) -> float:\n    \"\"\"\n    Recursively evaluate an AST node.\n\n    :param node: An AST node.\n    :return: The result of the evaluated node.\n    \"\"\"\n    if isinstance(node, ast.Constant):  # <number>\n        return node.value\n    elif isinstance(node, ast.BinOp):  # <left> <operator> <right>\n        left = eval_node(node.left)\n        right = eval_node(node.right)\n        return operators[type(node.op)](left, right)\n    else:\n        raise TypeError(f\"Unsupported type: {node}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    expr = input().strip()\n    result = evaluate_expression(expr)\n    print(result)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert evaluate_expression(\\\"3 + 5 * 2\\\") == 13\\n\", \"\\nassert evaluate_expression(\\\"10 - 2 * 3\\\") == 4\\n\", \"\\nassert evaluate_expression(\\\"8 / 4 + 2\\\") == 4.0\\n\", \"\\nassert evaluate_expression(\\\"7 * (3 + 2)\\\") == 35\\n\", \"\\nassert evaluate_expression(\\\"15 / (3 + 2)\\\") == 3.0\\n\", \"\\nassert evaluate_expression(\\\"100 - 25 * 3 + 50\\\") == 25\\n\", \"\\nassert evaluate_expression(\\\"5 + 5 + 5 + 5\\\") == 20\\n\", \"\\nassert evaluate_expression(\\\"100 / 0\\\") == \\\"Error: division by zero\\\"\\n\", \"\\nassert evaluate_expression(\\\"1 + 2 * 3 / (4 - 5)\\\") == -5.0\\n\", \"\\nassert evaluate_expression(\\\"invalid expression\\\") == \\\"Error: invalid syntax\\\"\\n\"]"
  },
  {
    "input": "You are given a string `s`. Your task is to process this string according to the following rules:\n1. Trim any leading and trailing whitespace.\n2. Convert all characters to lowercase.\n3. Remove all digits and punctuation marks.\n4. Replace multiple consecutive spaces with a single space.\n\nWrite a function `process_input` that implements the above rules and returns the processed string.\n\n**Sample Input:**\n```\n\"  Hello, World! 123  \"\n```\n\n**Sample Output:**\n```\n\"hello world\"\n```",
    "output": "import re\n\ndef process_input(input_string: str) -> str:\n    \"\"\"\n    Processes the input string by trimming whitespace, converting to lowercase,\n    removing digits and punctuation, and replacing multiple spaces with a single space.\n    \n    :param input_string: The string to be processed.\n    :return: The processed string.\n    \"\"\"\n    stripped_string = input_string.strip()\n    lowercased_string = stripped_string.lower()\n    no_digits_punctuation = re.sub(r'[0-9\\W_]+', ' ', lowercased_string)\n    single_spaced_string = re.sub(r'\\s+', ' ', no_digits_punctuation)\n    \n    return single_spaced_string\n\n# Test the function with the given example\nprint(process_input(\"  Hello, World! 123  \"))  # Output: \"hello world\"\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert process_input(\\\"  Hello, World! 123  \\\") == \\\"hello world\\\"\\n\", \"\\nassert process_input(\\\"Python3.8\\\") == \\\"python\\\"\\n\", \"\\nassert process_input(\\\"  Multiple    Spaces   \\\") == \\\"multiple spaces\\\"\\n\", \"\\nassert process_input(\\\"NoDigitsOrPunctuation\\\") == \\\"nodigitsorpunctuation\\\"\\n\", \"\\nassert process_input(\\\"  1234567890  \\\") == \\\"\\\"\\n\", \"\\nassert process_input(\\\"!@#$%^&*()_+\\\") == \\\"\\\"\\n\", \"\\nassert process_input(\\\"  Leading and trailing spaces  \\\") == \\\"leading and trailing spaces\\\"\\n\", \"\\nassert process_input(\\\"MiXeD CaSe 123\\\") == \\\"mixed case\\\"\\n\", \"\\nassert process_input(\\\"\\\") == \\\"\\\"\\n\", \"\\nassert process_input(\\\"SingleWord\\\") == \\\"singleword\\\"\\n\"]"
  },
  {
    "input": "You are given a CSV file with a header row. Your task is to write a Python script that reads this file, calculates the average of a specified column, and writes the result to a new text file named `average.txt`. The script should prompt the user to input the path to the CSV file and the name of the column to average. Assume all values in the specified column are numeric, except for potential non-numeric entries which should be ignored. If the column does not exist or contains no numeric values, the program should handle these cases gracefully.\n\n**Sample Input:**\n- CSV File (`data.csv`):\n  ```\n  Name,Age,Score\n  Alice,25,88\n  Bob,30,92\n  Charlie,22,75\n  David,28,abc\n  ```\n- User Input:\n  ```\n  Enter the path to the CSV file: data.csv\n  Enter the column name to average: Score\n  ```\n\n**Sample Output:**\n- `average.txt`:\n  ```\n  85.0\n  ```",
    "output": "import csv\n\ndef calculate_average_from_csv():\n    \"\"\"\n    Prompts the user for a CSV file path and a column name, calculates the average of the numeric values\n    in the specified column, and writes the result to a file named 'average.txt'.\n    \"\"\"\n    csv_file_path = input(\"Enter the path to the CSV file: \")\n    column_name = input(\"Enter the column name to average: \")\n\n    total = 0\n    count = 0\n\n    with open(csv_file_path, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            try:\n                value = float(row[column_name])\n                total += value\n                count += 1\n            except (ValueError, KeyError):\n                continue\n\n    if count == 0:\n        print(f\"No numeric values found in column '{column_name}'.\")\n        return\n\n    average = total / count\n\n    with open(\"average.txt\", \"w\") as output_file:\n        output_file.write(f\"{average}\\n\")\n\n    print(f\"The average of the values in column '{column_name}' is {average}, and it has been written to 'average.txt'.\")\n\nif __name__ == \"__main__\":\n    calculate_average_from_csv()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Age\\\") == 30.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Salary\\\") == 50000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Bonus\\\") == 5000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Hours\\\") == 40.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Experience\\\") == 5.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Stocks\\\") == 1000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Debt\\\") == 2000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Savings\\\") == 3000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Investments\\\") == 4000.0\\n\", \"\\nassert calculate_average_from_csv(\\\"test_data.csv\\\", \\\"Rent\\\") == 1500.0\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple dice game simulation. The game involves two players who each roll a six-sided die. The player with the higher roll wins. In the event of a tie, the game is declared a draw. Your program should accept the names of the two players as input and output the result of the game.\n\n**Input:**\n- The first line contains the name of the first player.\n- The second line contains the name of the second player.\n\n**Output:**\n- A single line indicating the result of the game. The output should be formatted as follows:\n  - \"{Player1} wins with a roll of {Roll1} against {Player2}'s roll of {Roll2}.\" if Player1 wins.\n  - \"{Player2} wins with a roll of {Roll2} against {Player1}'s roll of {Roll1}.\" if Player2 wins.\n  - \"It's a tie! Both {Player1} and {Player2} rolled a {Roll1}.\" if the game is a tie.\n\n**Sample Input:**\n```\nAlice\nBob\n```\n\n**Sample Output:**\n```\nAlice wins with a roll of 5 against Bob's roll of 3.\n```",
    "output": "import random\n\ndef dice_game(player1, player2):\n    \"\"\"\n    Simulates a dice game between two players.\n    \n    Parameters:\n    player1 (str): The name of the first player.\n    player2 (str): The name of the second player.\n    \n    Returns:\n    str: The result of the dice game.\n    \"\"\"\n    # Simulate dice rolls\n    roll1 = random.randint(1, 6)\n    roll2 = random.randint(1, 6)\n    \n    # Determine the winner or if it's a tie\n    if roll1 > roll2:\n        return f\"{player1} wins with a roll of {roll1} against {player2}'s roll of {roll2}.\"\n    elif roll2 > roll1:\n        return f\"{player2} wins with a roll of {roll2} against {player1}'s roll of {roll1}.\"\n    else:\n        return f\"It's a tie! Both {player1} and {player2} rolled a {roll1}.\"\n\n# Get player names\nplayer1_name = input().strip()\nplayer2_name = input().strip()\n\n# Play the game\nresult = dice_game(player1_name, player2_name)\nprint(result)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert \\\"Alice wins\\\" in dice_game(\\\"Alice\\\", \\\"Bob\\\") or \\\"Bob wins\\\" in dice_game(\\\"Alice\\\", \\\"Bob\\\") or \\\"It's a tie\\\" in dice_game(\\\"Alice\\\", \\\"Bob\\\")\\n\", \"\\nassert \\\"Alice wins\\\" in dice_game(\\\"Alice\\\", \\\"Charlie\\\") or \\\"Charlie wins\\\" in dice_game(\\\"Alice\\\", \\\"Charlie\\\") or \\\"It's a tie\\\" in dice_game(\\\"Alice\\\", \\\"Charlie\\\")\\n\", \"\\nassert \\\"Bob wins\\\" in dice_game(\\\"Charlie\\\", \\\"Bob\\\") or \\\"Charlie wins\\\" in dice_game(\\\"Charlie\\\", \\\"Bob\\\") or \\\"It's a tie\\\" in dice_game(\\\"Charlie\\\", \\\"Bob\\\")\\n\", \"\\nassert \\\"It's a tie\\\" in dice_game(\\\"Dave\\\", \\\"Dave\\\")\\n\", \"\\nassert \\\"Eve wins\\\" in dice_game(\\\"Eve\\\", \\\"Frank\\\") or \\\"Frank wins\\\" in dice_game(\\\"Eve\\\", \\\"Frank\\\") or \\\"It's a tie\\\" in dice_game(\\\"Eve\\\", \\\"Frank\\\")\\n\", \"\\nassert \\\"George wins\\\" in dice_game(\\\"George\\\", \\\"Hannah\\\") or \\\"Hannah wins\\\" in dice_game(\\\"George\\\", \\\"Hannah\\\") or \\\"It's a tie\\\" in dice_game(\\\"George\\\", \\\"Hannah\\\")\\n\", \"\\nassert \\\"Ivy wins\\\" in dice_game(\\\"Ivy\\\", \\\"Jack\\\") or \\\"Jack wins\\\" in dice_game(\\\"Ivy\\\", \\\"Jack\\\") or \\\"It's a tie\\\" in dice_game(\\\"Ivy\\\", \\\"Jack\\\")\\n\", \"\\nassert \\\"Kara wins\\\" in dice_game(\\\"Kara\\\", \\\"Leo\\\") or \\\"Leo wins\\\" in dice_game(\\\"Kara\\\", \\\"Leo\\\") or \\\"It's a tie\\\" in dice_game(\\\"Kara\\\", \\\"Leo\\\")\\n\", \"\\nassert \\\"Mia wins\\\" in dice_game(\\\"Mia\\\", \\\"Nina\\\") or \\\"Nina wins\\\" in dice_game(\\\"Mia\\\", \\\"Nina\\\") or \\\"It's a tie\\\" in dice_game(\\\"Mia\\\", \\\"Nina\\\")\\n\", \"\\nassert \\\"Oscar wins\\\" in dice_game(\\\"Oscar\\\", \\\"Paul\\\") or \\\"Paul wins\\\" in dice_game(\\\"Oscar\\\", \\\"Paul\\\") or \\\"It's a tie\\\" in dice_game(\\\"Oscar\\\", \\\"Paul\\\")\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function named `validate_input` that processes a variable number of arguments. The function should verify that none of the arguments are `None` and that none of the arguments are instances of the `complex` number type. If both conditions are satisfied for all arguments, the function should return the string \"OK\". Otherwise, it should return the string \"Invalid Input\".\n\n**Sample Input:**\n```python\nvalidate_input(1, 2.5, \"hello\", [1, 2, 3])\nvalidate_input(None, 3+4j)\nvalidate_input(3+4j, 5)\nvalidate_input(1, 2, None)\n```\n\n**Sample Output:**\n```\n\"OK\"\n\"Invalid Input\"\n\"Invalid Input\"\n\"Invalid Input\"\n```",
    "output": "def validate_input(*args):\n    \"\"\"\n    Validates that none of the arguments are None and none are instances of the complex number type.\n    \n    Parameters:\n    *args: A variable number of arguments of any data type.\n    \n    Returns:\n    str: \"OK\" if all arguments are not None and not complex, otherwise \"Invalid Input\".\n    \"\"\"\n    for arg in args:\n        if arg is None or isinstance(arg, complex):\n            return \"Invalid Input\"\n    return \"OK\"\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input(1, 2, 3) == \\\"OK\\\"\\n\", \"\\nassert validate_input(1, None, 3) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input(1, 2, 3+4j) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input(\\\"hello\\\", \\\"world\\\") == \\\"OK\\\"\\n\", \"\\nassert validate_input(\\\"hello\\\", None) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input(\\\"hello\\\", 3+4j) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input(True, False) == \\\"OK\\\"\\n\", \"\\nassert validate_input(True, None) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input(True, 3+4j) == \\\"Invalid Input\\\"\\n\", \"\\nassert validate_input() == \\\"OK\\\"\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple vending machine simulation in Python. The vending machine has a predefined set of items, each with a corresponding price. Users can select an item by entering its key. The machine accepts coins in multiples of 10 cents. If the user selects an invalid item or does not insert enough money, the machine should handle these cases appropriately. \n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10), representing the number of items in the vending machine.\n- The next `n` lines each contain a string `key` (a single uppercase letter), a string `item_name`, and an integer `price` (10 \u2264 price \u2264 1000), representing the item's key, name, and price in cents.\n- The next line contains a string `selection` (a single uppercase letter), representing the user's item selection.\n- The following lines contain a series of floats `coin` (0.10 \u2264 coin \u2264 1.00), representing the coins inserted by the user. The series ends with a line containing the string \"END\".\n\n**Output:**\n- Print the appropriate messages based on the user's interaction with the vending machine.\n\n**Sample Input:**\n```\n3\nA Soda 130\nB Chips 100\nC Candy 80\nA\n0.10\n0.10\n0.10\n0.10\n0.10\n0.10\n0.10\n0.10\n0.10\n0.10\nEND\n```\n\n**Sample Output:**\n```\nVending Machine Items:\nA: Soda - $1.30\nB: Chips - $1.00\nC: Candy - $0.80\nYou selected Soda. This will cost $1.30.\nHere\u2019s your Soda.\nThank you for using the vending machine!\n```",
    "output": "def vending_machine():\n    \"\"\"\n    Simulates a simple vending machine where users can select items and insert coins.\n    Handles invalid selections and insufficient funds.\n    \"\"\"\n    import sys\n\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    items = {}\n    index = 1\n\n    for _ in range(n):\n        key = data[index]\n        item_name = data[index + 1]\n        price = int(data[index + 2])\n        items[key] = {\"item\": item_name, \"price\": price}\n        index += 3\n\n    selection = data[index]\n    index += 1\n\n    print(\"Vending Machine Items:\")\n    for key, item_info in items.items():\n        print(f\"{key}: {item_info['item']} - ${item_info['price']/100:.2f}\")\n\n    if selection not in items:\n        print(\"Invalid selection. Please choose from the options provided.\")\n        return\n\n    item_price = items[selection][\"price\"]\n    print(f\"You selected {items[selection]['item']}. This will cost ${item_price/100:.2f}.\")\n\n    inserted_total = 0.0\n    while True:\n        coin = data[index]\n        if coin == \"END\":\n            break\n        try:\n            coin = float(coin)\n            if coin % 0.10 == 0 and coin > 0:\n                inserted_total += coin\n            else:\n                print(\"Invalid coin amount. Please use coins in multiples of 10 cents.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\n        index += 1\n\n    if inserted_total < item_price:\n        print(\"Insufficient funds. Please insert more coins.\")\n        return\n\n    if inserted_total > item_price:\n        change = inserted_total - item_price\n        print(f\"Here\u2019s your {items[selection]['item']} and change: ${change:.2f}.\")\n    else:\n        print(f\"Here\u2019s your {items[selection]['item']}.\")\n    print(\"Thank you for using the vending machine!\")\n\nvending_machine()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert vending_machine(\\\"A\\\", [1.30]) == \\\"Here\\u2019s your Soda.\\\"\\n\", \"\\nassert vending_machine(\\\"B\\\", [1.00]) == \\\"Here\\u2019s your Chips.\\\"\\n\", \"\\nassert vending_machine(\\\"C\\\", [0.80]) == \\\"Here\\u2019s your Candy.\\\"\\n\", \"\\nassert vending_machine(\\\"A\\\", [0.50, 0.50, 0.30]) == \\\"Here\\u2019s your Soda.\\\"\\n\", \"\\nassert vending_machine(\\\"B\\\", [0.20, 0.20, 0.20, 0.20, 0.20]) == \\\"Here\\u2019s your Chips.\\\"\\n\", \"\\nassert vending_machine(\\\"C\\\", [0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10]) == \\\"Here\\u2019s your Candy.\\\"\\n\", \"\\nassert vending_machine(\\\"D\\\", [1.00]) == \\\"Invalid selection. Please choose from the options provided.\\\"\\n\", \"\\nassert vending_machine(\\\"A\\\", [1.00]) == \\\"Insufficient funds. Please insert more coins. $0.30 more needed.\\\"\\n\", \"\\nassert vending_machine(\\\"B\\\", [0.50]) == \\\"Insufficient funds. Please insert more coins. $0.50 more needed.\\\"\\n\", \"\\nassert vending_machine(\\\"C\\\", [0.50]) == \\\"Insufficient funds. Please insert more coins. $0.30 more needed.\\\"\\n\"]"
  },
  {
    "input": "You are given an unweighted graph represented as an adjacency list. Your task is to find the shortest path between two specified nodes using any suitable algorithm. The graph is undirected and connected. The input consists of the number of nodes `N`, the number of edges `M`, followed by `M` lines each containing two integers representing an edge between two nodes. The last line contains two integers representing the start and goal nodes. Output the shortest path from the start node to the goal node as a sequence of node numbers. If no path exists, output \"No path\".\n\n**Sample Input:**\n```\n9 10\nA B\nA C\nA E\nB D\nB E\nC F\nC G\nD H\nE D\nF I\nG I\nA D\n```\n\n**Sample Output:**\n```\nA B D\n```",
    "output": "from collections import deque, defaultdict\n\ndef bfs_shortest_path(graph, start, goal):\n    \"\"\"\n    Finds the shortest path between two nodes in an unweighted graph using BFS.\n    \n    :param graph: Dictionary representing the graph as an adjacency list.\n    :param start: The starting node.\n    :param goal: The goal node.\n    :return: List of nodes representing the shortest path from start to goal, or None if no path exists.\n    \"\"\"\n    explored = set()\n    queue = deque([[start]])\n    \n    if start == goal:\n        return [start]\n    \n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n        if node not in explored:\n            neighbours = graph[node]\n            for neighbour in neighbours:\n                new_path = list(path)\n                new_path.append(neighbour)\n                queue.append(new_path)\n                if neighbour == goal:\n                    return new_path\n            explored.add(node)\n    \n    return None\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nedges = data[2:2+2*M]\nstart, goal = data[2+2*M], data[3+2*M]\n\ngraph = defaultdict(list)\nfor i in range(M):\n    u, v = edges[2*i], edges[2*i+1]\n    graph[u].append(v)\n    graph[v].append(u)\n\n# Find and print the shortest path\npath = bfs_shortest_path(graph, start, goal)\nif path:\n    print(' '.join(path))\nelse:\n    print(\"No path\")\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert bfs_shortest_path(graph, 'A', 'D') == ['A', 'B', 'D']\\n\", \"\\nassert bfs_shortest_path(graph, 'A', 'I') == ['A', 'C', 'F', 'I']\\n\", \"\\nassert bfs_shortest_path(graph, 'B', 'H') == ['B', 'D', 'H']\\n\", \"\\nassert bfs_shortest_path(graph, 'C', 'G') == ['C', 'G']\\n\", \"\\nassert bfs_shortest_path(graph, 'E', 'H') == ['E', 'D', 'H']\\n\", \"\\nassert bfs_shortest_path(graph, 'F', 'G') == ['F', 'C', 'G']\\n\", \"\\nassert bfs_shortest_path(graph, 'G', 'F') == ['G', 'C', 'F']\\n\", \"\\nassert bfs_shortest_path(graph, 'H', 'A') == None\\n\", \"\\nassert bfs_shortest_path(graph, 'I', 'A') == ['I', 'F', 'C', 'A']\\n\", \"\\nassert bfs_shortest_path(graph, 'A', 'A') == ['A']\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python script that processes a CSV file by performing basic data cleaning operations. The script should read from an input CSV file, remove duplicate rows, and handle missing values by filling them with the mean of their respective columns. After cleaning, the script should write the resulting data to a new CSV file. The script should prompt the user to provide the paths for both the input and output CSV files.\n\n**Sample Input:**\n```\nPlease enter the path to the input CSV file: data/input.csv\nPlease enter the path for the cleaned output CSV file: data/output.csv\n```\n\n**Sample Output:**\n```\nInitial shape of dataframe: (100, 5)\nShape after removing duplicates: (95, 5)\nShape after filling missing values: (95, 5)\nCleaned data written to data/output.csv\n```",
    "output": "import pandas as pd\n\ndef clean_csv(input_csv_path, output_csv_path):\n    \"\"\"\n    Reads a CSV file, removes duplicate rows, fills missing values with the mean of each column,\n    and writes the cleaned data to a new CSV file.\n\n    Parameters:\n    input_csv_path (str): The file path to the input CSV file.\n    output_csv_path (str): The file path to the output CSV file.\n    \"\"\"\n    # Reading the input CSV file\n    df = pd.read_csv(input_csv_path)\n    \n    # Removing duplicates\n    df.drop_duplicates(inplace=True)\n    \n    # Handling missing values by filling with the mean of the column\n    df.fillna(df.mean(), inplace=True)\n\n    # Writing the cleaned data to a new CSV file\n    df.to_csv(output_csv_path, index=False)\n\ndef main():\n    \"\"\"\n    Prompts the user for input and output CSV file paths, cleans the CSV content,\n    and saves the result to the specified output file.\n    \"\"\"\n    # Prompting user for input and output CSV file paths\n    input_csv_path = input(\"Please enter the path to the input CSV file: \")\n    output_csv_path = input(\"Please enter the path for the cleaned output CSV file: \")\n    \n    # Cleaning the CSV content and saving the result\n    clean_csv(input_csv_path, output_csv_path)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert clean_csv(\\\"test_input.csv\\\", \\\"test_output.csv\\\") is None\\n\", \"\\nassert pd.read_csv(\\\"test_output.csv\\\").shape == (3, 3)  # Assuming test_input.csv has 3 unique rows after cleaning\\n\", \"\\nassert pd.read_csv(\\\"test_output.csv\\\").isnull().sum().sum() == 0  # Ensure no missing values in the output\\n\", \"\\nassert pd.read_csv(\\\"test_output.csv\\\").drop_duplicates().shape == pd.read_csv(\\\"test_output.csv\\\").shape  # Ensure no duplicates in the output\\n\", \"\\nassert clean_csv(\\\"empty.csv\\\", \\\"empty_output.csv\\\") is None\\n\", \"\\nassert pd.read_csv(\\\"empty_output.csv\\\").shape == (0, 0)  # Assuming empty.csv is truly empty\\n\", \"\\nassert clean_csv(\\\"single_row.csv\\\", \\\"single_row_output.csv\\\") is None\\n\", \"\\nassert pd.read_csv(\\\"single_row_output.csv\\\").shape == (1, 3)  # Assuming single_row.csv has 1 row and 3 columns\\n\", \"\\nassert clean_csv(\\\"duplicates.csv\\\", \\\"duplicates_output.csv\\\") is None\\n\", \"\\nassert pd.read_csv(\\\"duplicates_output.csv\\\").shape[0] < pd.read_csv(\\\"duplicates.csv\\\").shape[0]  # Ensure duplicates were removed\\n\"]"
  },
  {
    "input": "Implement the heap sort algorithm to sort an array of integers in ascending order. Your program should read an array of integers and output the sorted array.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the array.\n- The second line contains `n` space-separated integers representing the array elements.\n\n**Output:**\n- Print the sorted array in ascending order.\n\n**Sample Input:**\n```\n6\n12 11 13 5 6 7\n```\n\n**Sample Output:**\n```\n5 6 7 11 12 13\n```",
    "output": "def heapify(arr, n, i):\n    \"\"\"\n    Heapify the subtree rooted at index i in a max heap.\n    \n    :param arr: List of integers representing the heap.\n    :param n: Integer, the size of the heap.\n    :param i: Integer, the index of the root of the subtree.\n    \"\"\"\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1  # left = 2*i + 1\n    right = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    # See if right child of root exists and is greater than root\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    \"\"\"\n    Sorts the array in ascending order using the heap sort algorithm.\n    \n    :param arr: List of integers to be sorted.\n    \"\"\"\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n    heap_sort(arr)\n    print(\" \".join(map(str, arr)))\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert heap_sort([3, 1, 2]) == None\\n\", \"\\nassert heap_sort([12, 11, 13, 5, 6, 7]) == None\\n\", \"\\nassert heap_sort([1, 2, 3, 4, 5]) == None\\n\", \"\\nassert heap_sort([5, 4, 3, 2, 1]) == None\\n\", \"\\nassert heap_sort([]) == None\\n\", \"\\nassert heap_sort([10]) == None\\n\", \"\\nassert heap_sort([7, 7, 7, 7]) == None\\n\", \"\\nassert heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == None\\n\", \"\\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == None\\n\", \"\\nassert heap_sort([-1, -2, -3, -4, -5]) == None\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function named `clean_input` that processes a given string according to specific rules. The function should handle the following cases:\n\n1. If the input string is `None`, the function should return `None`.\n2. If the input string is not `None`, it should first remove any leading and trailing whitespace characters.\n3. Next, any non-alphanumeric characters in the string should be replaced with an underscore (`_`), with the exception of the ampersand (`&`) and the hash (`#`), which should remain unchanged.\n4. Finally, any sequence of consecutive underscores should be replaced with a single underscore.\n\nYour function should return the processed string.\n\n**Sample Input and Output:**\n\n- Input: `\"  Hello, World!  \"`\n- Output: `\"Hello_World\"`\n\n- Input: `\"Python3.8#Rocks&\"`\n- Output: `\"Python3_8#Rocks&\"`\n\n- Input: `\"__Multiple___Underscores___\"`\n- Output: `\"_Multiple_Underscores_\"`\n\n- Input: `None`\n- Output: `None`",
    "output": "import re\n\ndef clean_input(input_string):\n    \"\"\"\n    Processes a given string by removing leading and trailing whitespace,\n    replacing non-alphanumeric characters with underscores (except '&' and '#'),\n    and reducing consecutive underscores to a single underscore.\n    \n    Parameters:\n    input_string (str): The string to be processed.\n    \n    Returns:\n    str or None: The processed string or None if the input is None.\n    \"\"\"\n    if input_string is None:\n        return None\n    \n    # Remove leading and trailing whitespace\n    input_string = input_string.strip()\n    \n    # Replace non-alphanumeric characters with underscore, except & and #\n    input_string = re.sub(r'[^a-zA-Z0-9&#]', '_', input_string)\n    \n    # Replace consecutive underscores with a single underscore\n    input_string = re.sub(r'_+', '_', input_string)\n    \n    return input_string\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert clean_input(None) == None\\n\", \"\\nassert clean_input(\\\"   hello world   \\\") == \\\"hello_world\\\"\\n\", \"\\nassert clean_input(\\\"hello@world!\\\") == \\\"hello_world\\\"\\n\", \"\\nassert clean_input(\\\"hello&&world##\\\") == \\\"hello&&world##\\\"\\n\", \"\\nassert clean_input(\\\"   hello__world__   \\\") == \\\"hello_world\\\"\\n\", \"\\nassert clean_input(\\\"hello   world\\\") == \\\"hello_world\\\"\\n\", \"\\nassert clean_input(\\\"123abc!@#def$%^\\\") == \\\"123abc_def\\\"\\n\", \"\\nassert clean_input(\\\"a_b_c___d_e\\\") == \\\"a_b_c_d_e\\\"\\n\", \"\\nassert clean_input(\\\"no_special_chars_here\\\") == \\\"no_special_chars_here\\\"\\n\", \"\\nassert clean_input(\\\"trailing_underscores___\\\") == \\\"trailing_underscores\\\"\\n\"]"
  },
  {
    "input": "You are tasked with writing a program that reads a CSV file and converts its contents into an HTML table. The program should handle potential errors such as the file not existing or the file containing invalid data. The program should prompt the user to specify the filename. The output should be an HTML file with the same name as the input CSV file, but with the `.html` extension.\n\n**Input:**\n- The user will provide the name of a CSV file when prompted.\n\n**Output:**\n- An HTML file with the same name as the input CSV file, but with the `.html` extension, containing the CSV data formatted as an HTML table.\n\n**Sample Input:**\n```\ndata.csv\n```\n\n**Sample Output:**\nIf `data.csv` contains:\n```\nName,Age,City\nAlice,30,New York\nBob,25,Los Angeles\n```\n\nThe output `data.html` should contain:\n```html\n<table border=\"1\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>City</th>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>30</td>\n    <td>New York</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>25</td>\n    <td>Los Angeles</td>\n  </tr>\n</table>\n```",
    "output": "import csv\nimport os\n\ndef convert_csv_to_html(filename):\n    \"\"\"\n    Converts a CSV file to an HTML table and saves it as an HTML file.\n    \n    Parameters:\n    filename (str): The name of the CSV file to be converted.\n    \"\"\"\n    # Check if the file exists and is a file\n    if not os.path.isfile(filename):\n        print(f\"Error: The file {filename} does not exist.\")\n        return\n\n    # Start building HTML content\n    html_content = '<table border=\"1\">\\n'\n\n    try:\n        with open(filename, newline='', encoding='utf-8') as csvfile:\n            csvreader = csv.reader(csvfile)\n            headers = next(csvreader)\n            # Create table headers\n            html_content += '  <tr>\\n'\n            for header in headers:\n                html_content += f'    <th>{header}</th>\\n'\n            html_content += '  </tr>\\n'\n            \n            # Create table rows\n            for row in csvreader:\n                html_content += '  <tr>\\n'\n                for cell in row:\n                    html_content += f'    <td>{cell}</td>\\n'\n                html_content += '  </tr>\\n'\n    except Exception as e:\n        print(f\"Error reading the file: {e}\")\n        return\n\n    # Close table tag\n    html_content += '</table>'\n\n    # Output HTML content\n    out_filename = os.path.splitext(filename)[0] + '.html'\n    with open(out_filename, 'w', encoding='utf-8') as htmlfile:\n        htmlfile.write(html_content)\n\n    print(f\"CSV file has been converted to HTML and saved as {out_filename}\")\n\nif __name__ == '__main__':\n    filename = input(\"Please enter the CSV filename: \")\n    convert_csv_to_html(filename.strip())\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert os.path.isfile('test.csv') == True\\n\", \"\\nassert os.path.isfile('nonexistent.csv') == False\\n\", \"\\nassert convert_csv_to_html('test.csv') is None\\n\", \"\\nassert convert_csv_to_html('invalid_file.txt') is None\\n\", \"\\nassert convert_csv_to_html('') is None\\n\", \"\\nassert convert_csv_to_html('empty.csv') is None\\n\", \"\\nassert convert_csv_to_html('malformed.csv') is None\\n\", \"\\nassert convert_csv_to_html('single_row.csv') is None\\n\", \"\\nassert convert_csv_to_html('multiple_rows.csv') is None\\n\", \"\\nassert convert_csv_to_html('special_chars.csv') is None\\n\"]"
  },
  {
    "input": "Implement a `Calculator` class in Python that supports basic arithmetic operations: addition, subtraction, multiplication, and division. The class should handle invalid input types and division by zero gracefully. Your program should also include a simple text-based user interface for interaction. \n\n**Input:**\n- The user will input a choice of operation (1 for addition, 2 for subtraction, 3 for multiplication, 4 for division, and 5 to exit).\n- For operations 1 through 4, the user will input two numbers.\n\n**Output:**\n- The result of the arithmetic operation or an appropriate error message.\n\n**Sample Interaction:**\n```\nSimple Calculator\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\n5. Exit\nEnter your choice (1/2/3/4/5): 1\nEnter first number: 5\nEnter second number: 3\nResult: 8.0\n\nSimple Calculator\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\n5. Exit\nEnter your choice (1/2/3/4/5): 4\nEnter first number: 10\nEnter second number: 0\nError: Division by zero is not allowed.\n\nSimple Calculator\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\n5. Exit\nEnter your choice (1/2/3/4/5): 5\nExiting the calculator.\n```",
    "output": "class Calculator:\n    def add(self, a, b):\n        \"\"\"\n        Adds two numbers and returns the result.\n        Handles TypeError if inputs are not numbers.\n        \"\"\"\n        try:\n            return a + b\n        except TypeError:\n            return \"Error: Both inputs must be numbers.\"\n\n    def subtract(self, a, b):\n        \"\"\"\n        Subtracts the second number from the first and returns the result.\n        Handles TypeError if inputs are not numbers.\n        \"\"\"\n        try:\n            return a - b\n        except TypeError:\n            return \"Error: Both inputs must be numbers.\"\n\n    def multiply(self, a, b):\n        \"\"\"\n        Multiplies two numbers and returns the result.\n        Handles TypeError if inputs are not numbers.\n        \"\"\"\n        try:\n            return a * b\n        except TypeError:\n            return \"Error: Both inputs must be numbers.\"\n\n    def divide(self, a, b):\n        \"\"\"\n        Divides the first number by the second and returns the result.\n        Handles TypeError if inputs are not numbers.\n        Handles ZeroDivisionError if the second number is zero.\n        \"\"\"\n        try:\n            return a / b\n        except TypeError:\n            return \"Error: Both inputs must be numbers.\"\n        except ZeroDivisionError:\n            return \"Error: Division by zero is not allowed.\"\n\ndef main():\n    calc = Calculator()\n    while True:\n        print(\"\\nSimple Calculator\")\n        print(\"1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        print(\"5. Exit\")\n        \n        choice = input(\"Enter your choice (1/2/3/4/5): \")\n        \n        if choice == '5':\n            print(\"Exiting the calculator.\")\n            break\n        \n        if choice in ('1', '2', '3', '4'):\n            try:\n                num1 = float(input(\"Enter first number: \"))\n                num2 = float(input(\"Enter second number: \"))\n            except ValueError:\n                print(\"Error: Please enter valid numbers.\")\n                continue\n        else:\n            print(\"Invalid choice. Please try again.\")\n            continue\n        \n        if choice == '1':\n            print(\"Result:\", calc.add(num1, num2))\n        elif choice == '2':\n            print(\"Result:\", calc.subtract(num1, num2))\n        elif choice == '3':\n            print(\"Result:\", calc.multiply(num1, num2))\n        elif choice == '4':\n            print(\"Result:\", calc.divide(num1, num2))\n        else:\n            print(\"Invalid Input\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert Calculator().add(5, 3) == 8\\n\", \"\\nassert Calculator().subtract(10, 4) == 6\\n\", \"\\nassert Calculator().multiply(6, 7) == 42\\n\", \"\\nassert Calculator().divide(8, 2) == 4.0\\n\", \"\\nassert Calculator().add(\\\"a\\\", 5) == \\\"Error: Both inputs must be numbers.\\\"\\n\", \"\\nassert Calculator().subtract(10, \\\"b\\\") == \\\"Error: Both inputs must be numbers.\\\"\\n\", \"\\nassert Calculator().multiply(\\\"c\\\", 3) == \\\"Error: Both inputs must be numbers.\\\"\\n\", \"\\nassert Calculator().divide(10, 0) == \\\"Error: Division by zero is not allowed.\\\"\\n\", \"\\nassert Calculator().divide(0, 10) == 0.0\\n\", \"\\nassert Calculator().add(0, 0) == 0\\n\"]"
  },
  {
    "input": "You are given a temperature in Fahrenheit. Your task is to write a program that converts this temperature to Celsius using the formula: \\( C = (F - 32) \\times \\frac{5}{9} \\). Your program should read a single floating-point number representing the temperature in Fahrenheit from the standard input and output the corresponding temperature in Celsius, rounded to two decimal places.\n\n**Sample Input:**\n```\n98.6\n```\n\n**Sample Output:**\n```\n37.00 Celsius\n```",
    "output": "def fahrenheit_to_celsius(fahrenheit):\n    \"\"\"\n    Convert a temperature from Fahrenheit to Celsius.\n\n    Parameters:\n    fahrenheit (float): Temperature in Fahrenheit.\n\n    Returns:\n    float: Temperature in Celsius.\n    \"\"\"\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\n# Taking input from the user\nfahrenheit = float(input())\n# Converting to celsius\ncelsius = fahrenheit_to_celsius(fahrenheit)\n# Displaying the result\nprint(f\"{celsius:.2f} Celsius\")\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert fahrenheit_to_celsius(32) == 0.0\\n\", \"\\nassert fahrenheit_to_celsius(212) == 100.0\\n\", \"\\nassert fahrenheit_to_celsius(98.6) == 37.0\\n\", \"\\nassert fahrenheit_to_celsius(-40) == -40.0\\n\", \"\\nassert fahrenheit_to_celsius(0) == -17.77777777777778\\n\", \"\\nassert fahrenheit_to_celsius(100) == 37.77777777777778\\n\", \"\\nassert fahrenheit_to_celsius(68) == 20.0\\n\", \"\\nassert fahrenheit_to_celsius(150) == 65.55555555555556\\n\", \"\\nassert fahrenheit_to_celsius(300) == 148.88888888888889\\n\", \"\\nassert fahrenheit_to_celsius(-100) == -73.33333333333333\\n\"]"
  },
  {
    "input": "You are given a keyboard with `K` distinct keys and a typing word of length `L`. You are to type a sequence of `S` characters, where each character is chosen randomly from the keyboard with equal probability. The keyboard might not contain all characters from the typing word, in which case it is impossible to type the word.\n\nYour task is to compute the expected number of times you can type the typing word in the sequence of `S` characters. If the typing word cannot be typed due to missing characters on the keyboard, the expected number is `0`. Additionally, account for the keyboard's keys degrading over time, reducing the probability of typing each key by a factor of `0.95` with each use.\n\n**Input:**\n- The first line contains three integers `K`, `L`, and `S` separated by spaces.\n- The second line contains a string of `K` distinct lowercase English letters representing the keyboard.\n- The third line contains a string of `L` lowercase English letters representing the typing word.\n\n**Output:**\n- A single line with a single number representing the expected number of times you can type the typing word in the sequence of `S` characters, rounded to two decimal places.\n\n**Constraints:**\n- `1 \u2264 K \u2264 100`\n- `1 \u2264 L \u2264 10`\n- `1 \u2264 S \u2264 10^6`\n- The keyboard and the typing word consist only of lowercase English letters.\n\n**Sample Input:**\n```\n5 3 10\nabcde\nabc\n```\n\n**Sample Output:**\n```\n0.09\n```",
    "output": "def expected_typing_word(K, L, S, keyboard, typing_word):\n    \"\"\"\n    Calculate the expected number of times a typing word can be typed in a sequence of S characters\n    from a keyboard with K keys, considering keyboard degradation.\n\n    :param K: Number of keys on the keyboard\n    :param L: Length of the typing word\n    :param S: Length of the sequence of characters to be typed\n    :param keyboard: String representing the keyboard\n    :param typing_word: String representing the typing word\n    :return: Expected number of times the typing word can be typed, rounded to two decimal places\n    \"\"\"\n    from collections import defaultdict\n    \n    word_char_count = defaultdict(int)\n    for char in typing_word:\n        word_char_count[char] += 1\n    \n    keyboard_char_count = defaultdict(int)\n    for char in keyboard:\n        keyboard_char_count[char] += 1\n    \n    for char, count in word_char_count.items():\n        if char not in keyboard_char_count or keyboard_char_count[char] < count:\n            return 0.0\n    \n    probability = 1.0\n    for char, count in word_char_count.items():\n        probability *= (keyboard_char_count[char] / K) ** count\n    \n    degradation_factor = 0.95\n    effective_S = sum(probability * (degradation_factor ** (i - 1)) for i in range(1, S - L + 2))\n    \n    expected_count = effective_S / L\n    \n    return round(expected_count, 2)\n\n# Read input\nK, L, S = map(int, input().strip().split())\nkeyboard = input().strip()\ntyping_word = input().strip()\n\n# Output the result\nprint(expected_typing_word(K, L, S, keyboard, typing_word))\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert expected_typing_word(3, 2, 5, \\\"abc\\\", \\\"ab\\\") == 0.06\\n\", \"\\nassert expected_typing_word(4, 3, 10, \\\"abcd\\\", \\\"abc\\\") == 0.03\\n\", \"\\nassert expected_typing_word(5, 1, 1000000, \\\"abcde\\\", \\\"a\\\") == 60956.05\\n\", \"\\nassert expected_typing_word(2, 2, 10, \\\"ab\\\", \\\"aa\\\") == 0.02\\n\", \"\\nassert expected_typing_word(10, 5, 1000000, \\\"abcdefghij\\\", \\\"abcde\\\") == 12.13\\n\", \"\\nassert expected_typing_word(1, 1, 1000000, \\\"a\\\", \\\"a\\\") == 60956.05\\n\", \"\\nassert expected_typing_word(3, 3, 10, \\\"abc\\\", \\\"abc\\\") == 0.01\\n\", \"\\nassert expected_typing_word(3, 3, 10, \\\"abc\\\", \\\"abcd\\\") == 0.0\\n\", \"\\nassert expected_typing_word(3, 3, 10, \\\"abc\\\", \\\"aaa\\\") == 0.0\\n\", \"\\nassert expected_typing_word(10, 1, 1000000, \\\"abcdefghij\\\", \\\"z\\\") == 0.0\\n\"]"
  },
  {
    "input": "Implement a function `quiz_game()` that simulates a basic quiz game. The function should take a list of dictionaries as input, where each dictionary represents a question with keys \"question\", \"options\", and \"answer\". The function should ask the user each question, display the options, and prompt for an answer. It should track the user's score based on correct answers and print the final score at the end of the quiz. The user's input should be case-insensitive and limited to the provided options.\n\n**Sample Input:**\n```python\n[\n    {\n        \"question\": \"What is the capital of France?\",\n        \"options\": [\"A. Madrid\", \"B. Berlin\", \"C. Paris\", \"D. Rome\"],\n        \"answer\": \"C\"\n    },\n    {\n        \"question\": \"Which planet is known as the Red Planet?\",\n        \"options\": [\"A. Mars\", \"B. Venus\", \"C. Jupiter\", \"D. Earth\"],\n        \"answer\": \"A\"\n    },\n    {\n        \"question\": \"What is the chemical symbol for water?\",\n        \"options\": [\"A. Wa\", \"B. Ag\", \"C. H2O\", \"D. Wt\"],\n        \"answer\": \"C\"\n    },\n    {\n        \"question\": \"What is 7 * 8?\",\n        \"options\": [\"A. 49\", \"B. 56\", \"C. 63\", \"D. 72\"],\n        \"answer\": \"B\"\n    },\n    {\n        \"question\": \"Who wrote 'To Kill a Mockingbird'?\",\n        \"options\": [\"A. F. Scott Fitzgerald\", \"B. J.D. Salinger\", \"C. Harper Lee\", \"D. Ernest Hemingway\"],\n        \"answer\": \"C\"\n    },\n]\n```\n\n**Sample Output:**\n```\nWelcome to the Quiz Game!\nYou will be asked 5 questions. Let's start!\n\nQuestion 1: What is the capital of France?\nA. Madrid\nB. Berlin\nC. Paris\nD. Rome\nEnter your answer (A, B, C or D): C\nCorrect!\n\nQuestion 2: Which planet is known as the Red Planet?\nA. Mars\nB. Venus\nC. Jupiter\nD. Earth\nEnter your answer (A, B, C or D): A\nCorrect!\n\nQuestion 3: What is the chemical symbol for water?\nA. Wa\nB. Ag\nC. H2O\nD. Wt\nEnter your answer (A, B, C or D): C\nCorrect!\n\nQuestion 4: What is 7 * 8?\nA. 49\nB. 56\nC. 63\nD. 72\nEnter your answer (A, B, C or D): B\nCorrect!\n\nQuestion 5: Who wrote 'To Kill a Mockingbird'?\nA. F. Scott Fitzgerald\nB. J.D. Salinger\nC. Harper Lee\nD. Ernest Hemingway\nEnter your answer (A, B, C or D): C\nCorrect!\n\nQuiz completed! Your final score is 5/5\n```",
    "output": "def quiz_game(quiz_questions):\n    \"\"\"\n    Simulates a basic quiz game.\n\n    Parameters:\n    quiz_questions (list of dict): A list where each dictionary contains a question, options, and the correct answer.\n\n    Returns:\n    None: The function prints the quiz questions, prompts for user input, and displays the final score.\n    \"\"\"\n    score = 0  # Initialize score\n\n    print(\"Welcome to the Quiz Game!\\nYou will be asked {} questions. Let's start!\".format(len(quiz_questions)))\n\n    # Loop through each question and get user input\n    for i, q in enumerate(quiz_questions, start=1):\n        print(f\"\\nQuestion {i}: {q['question']}\")\n        for option in q['options']:\n            print(option)\n        user_answer = input(\"Enter your answer (A, B, C or D): \").strip().upper()\n        \n        if user_answer == q['answer']:\n            print(\"Correct!\")\n            score += 1\n        else:\n            print(\"Incorrect! The correct answer is\", q['answer'])\n\n    # Display the final score\n    print(\"\\nQuiz completed! Your final score is {}/{}\".format(score, len(quiz_questions)))\n\n# Example usage\nquiz_questions = [\n    {\n        \"question\": \"What is the capital of France?\",\n        \"options\": [\"A. Madrid\", \"B. Berlin\", \"C. Paris\", \"D. Rome\"],\n        \"answer\": \"C\"\n    },\n    {\n        \"question\": \"Which planet is known as the Red Planet?\",\n        \"options\": [\"A. Mars\", \"B. Venus\", \"C. Jupiter\", \"D. Earth\"],\n        \"answer\": \"A\"\n    },\n    {\n        \"question\": \"What is the chemical symbol for water?\",\n        \"options\": [\"A. Wa\", \"B. Ag\", \"C. H2O\", \"D. Wt\"],\n        \"answer\": \"C\"\n    },\n    {\n        \"question\": \"What is 7 * 8?\",\n        \"options\": [\"A. 49\", \"B. 56\", \"C. 63\", \"D. 72\"],\n        \"answer\": \"B\"\n    },\n    {\n        \"question\": \"Who wrote 'To Kill a Mockingbird'?\",\n        \"options\": [\"A. F. Scott Fitzgerald\", \"B. J.D. Salinger\", \"C. Harper Lee\", \"D. Ernest Hemingway\"],\n        \"answer\": \"C\"\n    },\n]\n\nquiz_game(quiz_questions)\n",
    "_category": "array_numeric",
    "unit_tests": "[\"\\nassert quiz_game() == 5  # Assuming all answers are correct\\n\", \"\\nassert quiz_game() == 0  # Assuming all answers are incorrect\\n\", \"\\nassert quiz_game() == 3  # Assuming 3 answers are correct\\n\", \"\\nassert quiz_game() == 1  # Assuming 1 answer is correct\\n\", \"\\nassert quiz_game() == 4  # Assuming 4 answers are correct\\n\", \"\\nassert quiz_game() == 2  # Assuming 2 answers are correct\\n\", \"\\nassert quiz_game() == 0  # Assuming all answers are incorrect\\n\", \"\\nassert quiz_game() == 5  # Assuming all answers are correct\\n\", \"\\nassert quiz_game() == 1  # Assuming 1 answer is correct\\n\", \"\\nassert quiz_game() == 3  # Assuming 3 answers are correct\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python program that reads a list of numbers from the user input, separated by spaces, and computes the mean, median, and mode of the numbers. The program must handle invalid inputs gracefully by displaying an appropriate error message and prompting the user to re-enter the data. The input will consist of a single line of space-separated values. The output should display the mean, median, and mode of the numbers, each on a new line. If the input is invalid or if there is no unique mode, the program should print an error message and prompt for input again.\n\n**Sample Input:**\n```\n1 2 2 3 4\n```\n\n**Sample Output:**\n```\nMean: 2.4\nMedian: 2\nMode: 2\n```\n\n**Sample Input:**\n```\n1 2 3 4 5\n```\n\n**Sample Output:**\n```\nMean: 3.0\nMedian: 3\nMode: StatisticsError: no unique mode; found 5 values\n```\n\n**Sample Input:**\n```\nabc 123 def\n```\n\n**Sample Output:**\n```\nInvalid input: could not convert string to float: 'abc'. Please try again.\n```",
    "output": "from collections import Counter\nimport statistics\n\ndef main():\n    \"\"\"\n    Main function to prompt user for input, compute mean, median, and mode,\n    and handle invalid inputs gracefully.\n    \"\"\"\n    while True:\n        numbers_input = input(\"Enter a list of numbers separated by spaces: \")\n        \n        try:\n            # Split the input string, convert to float, and filter out any non-numeric values\n            numbers = [float(num) for num in numbers_input.split()]\n            if not numbers:\n                raise ValueError(\"Input is empty or contains no valid numbers.\")\n        except ValueError as e:\n            print(f\"Invalid input: {e}. Please try again.\")\n            continue\n        \n        try:\n            mean = statistics.mean(numbers)\n            median = statistics.median(numbers)\n            mode = statistics.mode(numbers)\n        except statistics.StatisticsError as e:\n            print(f\"Statistics error: {e}. Please ensure there is only one mode.\")\n            continue\n        \n        print(f\"Mean: {mean}\")\n        print(f\"Median: {median}\")\n        print(f\"Mode: {mode}\")\n        break\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert main() == None  # Mean: 3.0, Median: 3, Mode: 3\\n\", \"\\nassert main() == None  # Mean: 2.6, Median: 3, Mode: 2\\n\", \"\\nassert main() == None  # Mean: 3.0, Median: 4, Mode: 4\\n\", \"\\nassert main() == None  # Invalid input: could not convert string to float: 'a'. Please try again.\\n\", \"\\nassert main() == None  # Mean: 4.0, Median: 5, Statistics error: no unique mode; found 2: 5, 4. Please ensure there is only one mode.\\n\", \"\\nassert main() == None  # Mean: 3.5, Median: 3.5, Mode: 1\\n\", \"\\nassert main() == None  # Mean: 3.0, Median: 3, Mode: 5\\n\", \"\\nassert main() == None  # Mean: 3.25, Median: 3.5, Mode: 5\\n\", \"\\nassert main() == None  # Mean: 3.3333333333333335, Median: 5, Statistics error: no unique mode; found 2: 5, 4. Please ensure there is only one mode.\\n\", \"\\nassert main() == None  # Mean: 3.5, Median: 4, Statistics error: no unique mode; found 2: 5, 4. Please ensure there is only one mode.\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python script that processes a CSV file to compute the average value of a specified column. The CSV file contains the following columns:\n- `date`: the date of the record\n- `category`: the category of the record\n- `value`: the value of the record\n\nYour script should prompt the user to input the file path of the CSV file and the name of the column for which the average value should be calculated. The script must handle potential errors, such as the file not existing or the specified column not being present in the file. In such cases, the script should output an appropriate error message and terminate.\n\n**Sample Input:**\n```\nEnter the file path of the CSV file: data.csv\nEnter the name of the column to calculate the average value for: value\n```\n\n**Sample Output:**\n```\nThe average value for column 'value' is: 150.0\n```\n\n**Sample Input:**\n```\nEnter the file path of the CSV file: non_existent_file.csv\nEnter the name of the column to calculate the average value for: value\n```\n\n**Sample Output:**\n```\nError: The file does not exist.\n```\n\n**Sample Input:**\n```\nEnter the file path of the CSV file: data.csv\nEnter the name of the column to calculate the average value for: non_existent_column\n```\n\n**Sample Output:**\n```\nError: The column 'non_existent_column' does not exist in the CSV file.\n```",
    "output": "import csv\nimport os\n\ndef get_file_path():\n    \"\"\"\n    Prompts the user to enter the file path of the CSV file.\n    \n    Returns:\n        str: The file path provided by the user.\n    \"\"\"\n    return input(\"Enter the file path of the CSV file: \")\n\ndef get_column_name():\n    \"\"\"\n    Prompts the user to enter the name of the column to calculate the average value for.\n    \n    Returns:\n        str: The column name provided by the user.\n    \"\"\"\n    return input(\"Enter the name of the column to calculate the average value for: \")\n\ndef calculate_average_value(file_path, column_name):\n    \"\"\"\n    Calculates the average value of a specified column in a CSV file.\n    \n    Args:\n        file_path (str): The path to the CSV file.\n        column_name (str): The name of the column to calculate the average value for.\n    \"\"\"\n    if not os.path.exists(file_path):\n        print(\"Error: The file does not exist.\")\n        return\n    \n    try:\n        with open(file_path, mode='r') as file:\n            reader = csv.DictReader(file)\n            \n            if column_name not in reader.fieldnames:\n                print(f\"Error: The column '{column_name}' does not exist in the CSV file.\")\n                return\n            \n            total_value = 0\n            count = 0\n            \n            for row in reader:\n                try:\n                    value = float(row[column_name])\n                    total_value += value\n                    count += 1\n                except ValueError:\n                    print(f\"Warning: Non-numeric value found in column '{column_name}' and will be ignored.\")\n                    \n            if count == 0:\n                print(f\"No numeric values found in column '{column_name}' to calculate the average.\")\n                return\n\n            average_value = total_value / count\n            print(f\"The average value for column '{column_name}' is: {average_value}\")\n    \n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    file_path = get_file_path()\n    column_name = get_column_name()\n    calculate_average_value(file_path, column_name)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"value\\\") == None  # Assuming test.csv exists and has a 'value' column with numeric values\\n\", \"\\nassert calculate_average_value(\\\"nonexistent.csv\\\", \\\"value\\\") == None  # File does not exist\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"nonexistent_column\\\") == None  # Column does not exist in the CSV\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"date\\\") == None  # Assuming 'date' column has non-numeric values\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"category\\\") == None  # Assuming 'category' column has non-numeric values\\n\", \"\\nassert calculate_average_value(\\\"empty.csv\\\", \\\"value\\\") == None  # Assuming empty.csv exists but has no rows\\n\", \"\\nassert calculate_average_value(\\\"header_only.csv\\\", \\\"value\\\") == None  # Assuming header_only.csv exists but has only header row\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"value\\\") == None  # Assuming test.csv exists and has a 'value' column with some non-numeric values\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"value\\\") == None  # Assuming test.csv exists and has a 'value' column with all zero values\\n\", \"\\nassert calculate_average_value(\\\"test.csv\\\", \\\"value\\\") == None  # Assuming test.csv exists and has a 'value' column with one numeric value\\n\"]"
  },
  {
    "input": "You are tasked with writing a program that reads and prints the contents of a file from a given path. The program must handle both text and binary files. For text files, print the contents as a string. For binary files, print the contents as a byte string. Your program should gracefully handle exceptions such as `FileNotFoundError` and `IOError`, printing an appropriate error message if an exception occurs.\n\n**Input:**\n- A single line containing the file path as a string.\n\n**Output:**\n- The contents of the file if it exists and is readable.\n- An error message if the file does not exist or an I/O error occurs.\n\n**Sample Input 1:**\n```\nexample.txt\n```\n\n**Sample Output 1:**\n```\nThis is a sample text file.\n```\n\n**Sample Input 2:**\n```\nexample.bin\n```\n\n**Sample Output 2:**\n```\nb'\\x00\\x01\\x02\\x03'\n```\n\n**Sample Input 3:**\n```\nnonexistentfile.txt\n```\n\n**Sample Output 3:**\n```\nError: The file at nonexistentfile.txt was not found.\n```",
    "output": "def read_and_print_file(file_path):\n    \"\"\"\n    Reads and prints the contents of the file at the specified path.\n    Handles both text and binary files. Prints an error message if the file is not found\n    or an I/O error occurs.\n    \n    :param file_path: str - The path to the file to be read.\n    \"\"\"\n    try:\n        if file_path.endswith('.txt'):\n            mode = 'r'\n        else:\n            mode = 'rb'\n        \n        with open(file_path, mode) as file:\n            contents = file.read()\n            print(contents)\n    \n    except FileNotFoundError:\n        print(f\"Error: The file at {file_path} was not found.\")\n    except IOError as e:\n        print(f\"An I/O error occurred: {e.strerror}\")\n\n# Example usage\n# read_and_print_file(input().strip())\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert read_and_print_file('non_existent_file.txt') == None\\n\", \"\\nassert read_and_print_file('non_existent_file.bin') == None\\n\", \"\\nassert read_and_print_file('test.txt') == None  # Assuming 'test.txt' exists and is a text file\\n\", \"\\nassert read_and_print_file('test.bin') == None  # Assuming 'test.bin' exists and is a binary file\\n\", \"\\nassert read_and_print_file('') == None  # Empty string as file path\\n\", \"\\nassert read_and_print_file('test') == None  # Assuming 'test' exists and is a text file without extension\\n\", \"\\nassert read_and_print_file('test..txt') == None  # Assuming 'test..txt' exists and is a text file\\n\", \"\\nassert read_and_print_file('test.txtt') == None  # Assuming 'test.txtt' exists and is a text file\\n\", \"\\nassert read_and_print_file('test.') == None  # Assuming 'test.' exists and is a text file\\n\", \"\\nassert read_and_print_file('test..') == None  # Assuming 'test..' exists and is a text file\\n\"]"
  },
  {
    "input": "You are given a list of integers and a target integer. Implement a function `linear_search` that performs a linear search on the list to find the first occurrence of the target integer. If the target is found, return its index; otherwise, return -1. Your program should read the list and the target integer from the user and output the result.\n\n**Input:**\n- The first line contains a space-separated list of integers.\n- The second line contains a single integer, the target to search for.\n\n**Output:**\n- Print the index of the first occurrence of the target integer in the list, or -1 if the target is not found.\n\n**Sample Input:**\n```\n10 23 45 70 11 15\n23\n```\n\n**Sample Output:**\n```\n1\n```",
    "output": "def linear_search(lst, target):\n    \"\"\"\n    Perform a linear search for the target in the list lst.\n    \n    Args:\n    lst (list of int): The list to search.\n    target (int): The integer to search for.\n    \n    Returns:\n    int: The index of the first occurrence of target in lst, or -1 if not found.\n    \"\"\"\n    for index, value in enumerate(lst):\n        if value == target:\n            return index\n    return -1\n\nif __name__ == \"__main__\":\n    # Read input from the user\n    sample_list = list(map(int, input().split()))\n    target = int(input())\n    \n    # Perform the search\n    result = linear_search(sample_list, target)\n    \n    # Display the result\n    print(result)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert linear_search([10, 23, 45, 70, 11, 15], 23) == 1\\n\", \"\\nassert linear_search([10, 23, 45, 70, 11, 15], 10) == 0\\n\", \"\\nassert linear_search([10, 23, 45, 70, 11, 15], 15) == 5\\n\", \"\\nassert linear_search([10, 23, 45, 70, 11, 15], 70) == 3\\n\", \"\\nassert linear_search([10, 23, 45, 70, 11, 15], 100) == -1\\n\", \"\\nassert linear_search([], 10) == -1\\n\", \"\\nassert linear_search([1, 1, 1, 1, 1], 1) == 0\\n\", \"\\nassert linear_search([5, 4, 3, 2, 1], 5) == 0\\n\", \"\\nassert linear_search([5, 4, 3, 2, 1], 1) == 4\\n\", \"\\nassert linear_search([5, 4, 3, 2, 1], 6) == -1\\n\"]"
  },
  {
    "input": "Implement a Python program to simulate a rock-paper-scissors game between a human player and the computer. The computer should randomly select its move from the set {rock, paper, scissors}. The player is prompted to enter their move, which can be one of the three options or 'quit' to end the game. After each round, the program should output the computer's choice and declare the winner. The game continues until the player decides to quit.\n\n**Sample Input:**\n```\nrock\npaper\nscissors\nquit\n```\n\n**Sample Output:**\n```\nComputer chose: paper\nYou win!\nComputer chose: scissors\nComputer wins!\nComputer chose: rock\nIt's a tie!\nGame over!\n```",
    "output": "import random\n\ndef get_computer_choice():\n    \"\"\"\n    Randomly selects and returns the computer's move from the set {rock, paper, scissors}.\n    \"\"\"\n    choices = ['rock', 'paper', 'scissors']\n    return random.choice(choices)\n\ndef get_user_choice():\n    \"\"\"\n    Prompts the user to enter their move and returns it.\n    Continues to prompt until a valid input is received.\n    \"\"\"\n    user_input = input(\"Enter your move (rock, paper, scissors) or 'quit' to exit the game: \").strip().lower()\n    while user_input not in ['rock', 'paper', 'scissors', 'quit']:\n        print(\"Invalid input. Please try again.\")\n        user_input = input(\"Enter your move (rock, paper, scissors) or 'quit' to exit the game: \").strip().lower()\n    return user_input\n\ndef determine_winner(user_choice, computer_choice):\n    \"\"\"\n    Determines the winner of a round of rock-paper-scissors.\n    Returns a string indicating the result.\n    \"\"\"\n    if user_choice == computer_choice:\n        return \"It's a tie!\"\n    elif (user_choice == 'rock' and computer_choice == 'scissors') or \\\n         (user_choice == 'scissors' and computer_choice == 'paper') or \\\n         (user_choice == 'paper' and computer_choice == 'rock'):\n        return \"You win!\"\n    else:\n        return \"Computer wins!\"\n\ndef play_game():\n    \"\"\"\n    Runs the rock-paper-scissors game, allowing the user to play multiple rounds until they choose to quit.\n    \"\"\"\n    while True:\n        computer_choice = get_computer_choice()\n        user_choice = get_user_choice()\n\n        if user_choice == 'quit':\n            print(\"Game over!\")\n            break\n\n        print(f\"Computer chose: {computer_choice}\")\n        print(determine_winner(user_choice, computer_choice))\n\nif __name__ == \"__main__\":\n    play_game()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert get_computer_choice() in ['rock', 'paper', 'scissors']\\n\", \"\\nassert get_user_choice() in ['rock', 'paper', 'scissors', 'quit'] if input := 'rock' else False\\n\", \"\\nassert get_user_choice() in ['rock', 'paper', 'scissors', 'quit'] if input := 'paper' else False\\n\", \"\\nassert get_user_choice() in ['rock', 'paper', 'scissors', 'quit'] if input := 'scissors' else False\\n\", \"\\nassert get_user_choice() in ['rock', 'paper', 'scissors', 'quit'] if input := 'quit' else False\\n\", \"\\nassert determine_winner('rock', 'scissors') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('scissors', 'paper') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('paper', 'rock') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('rock', 'rock') == \\\"It's a tie!\\\"\\n\", \"\\nassert determine_winner('paper', 'paper') == \\\"It's a tie!\\\"\\n\"]"
  },
  {
    "input": "You are given a directory path as input. Your task is to write a Python function that lists all the files in the specified directory along with their sizes in bytes. The function should handle cases where the directory does not exist or is inaccessible by printing an appropriate error message.\n\n**Input:**\n- A single string representing the directory path.\n\n**Output:**\n- For each file in the directory, print the filename followed by its size in bytes.\n- If the directory does not exist, print \"Error: [directory] is not a valid directory.\"\n- If the directory is inaccessible, print \"Error: Access denied to [directory].\"\n- For any other exceptions, print \"An error occurred: [exception message].\"\n\n**Sample Input:**\n```\n/path/to/directory\n```\n\n**Sample Output:**\n```\nfile1.txt: 1024 bytes\nfile2.jpg: 2048 bytes\n```",
    "output": "import os\n\ndef list_files_with_size(directory):\n    \"\"\"\n    Lists all files in the specified directory along with their sizes in bytes.\n    Handles cases where the directory does not exist or is inaccessible.\n\n    :param directory: str, the path to the directory\n    \"\"\"\n    try:\n        if not os.path.isdir(directory):\n            print(f\"Error: {directory} is not a valid directory.\")\n            return\n        \n        for filename in os.listdir(directory):\n            file_path = os.path.join(directory, filename)\n            if os.path.isfile(file_path):\n                size = os.path.getsize(file_path)\n                print(f\"{filename}: {size} bytes\")\n    except PermissionError:\n        print(f\"Error: Access denied to {directory}.\")\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\n# Example usage\ndirectory_path = input(\"Enter directory path: \")\nlist_files_with_size(directory_path)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert list_files_with_size(\\\"/nonexistent_directory\\\") is None\\n\", \"\\nassert list_files_with_size(\\\"/root\\\") is None  # Assuming the test is not run as root, this should raise a PermissionError\\n\", \"\\nassert list_files_with_size(\\\"\\\") is None  # Empty string should not be a valid directory\\n\", \"\\nassert list_files_with_size(\\\"/\\\") is None  # Root directory should be valid and listable\\n\", \"\\nassert list_files_with_size(os.path.expanduser(\\\"~\\\")) is None  # Home directory should be valid and listable\\n\", \"\\nassert list_files_with_size(\\\"/dev/null\\\") is None  # /dev/null is not a directory\\n\", \"\\nassert list_files_with_size(\\\"/proc/self\\\") is None  # /proc/self is a directory but may not list files in the same way\\n\", \"\\nassert list_files_with_size(\\\"/sys\\\") is None  # /sys is a directory but may not list files in the same way\\n\", \"\\nassert list_files_with_size(\\\"/etc\\\") is None  # /etc is a directory and should be listable\\n\", \"\\nassert list_files_with_size(\\\"/var/log\\\") is None  # /var/log is a directory and should be listable\\n\"]"
  },
  {
    "input": "You are given a graph represented as an adjacency list. Implement a Python class `Graph` that supports the following operations:\n- `add_vertex(vertex)`: Adds a vertex to the graph.\n- `add_edge(u, v)`: Adds a directed edge from vertex `u` to vertex `v`.\n- `bfs(start_vertex)`: Performs a breadth-first search starting from `start_vertex` and prints the vertices in the order they are visited.\n\n**Input:**\n- The first line contains an integer `n` representing the number of vertices.\n- The second line contains an integer `m` representing the number of edges.\n- The next `m` lines each contain two integers `u` and `v` representing a directed edge from `u` to `v`.\n- The last line contains an integer `s` representing the starting vertex for the BFS.\n\n**Output:**\n- Print the vertices visited during the BFS starting from `s`, separated by spaces.\n\n**Sample Input:**\n```\n4\n4\n1 2\n1 3\n2 4\n3 4\n1\n```\n\n**Sample Output:**\n```\n1 2 3 4\n```",
    "output": "from collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        # Initialize graph as a dictionary where keys are vertices and values are lists of adjacent vertices\n        self.graph = defaultdict(list)\n    \n    def add_vertex(self, vertex):\n        \"\"\"Adds a vertex to the graph if it is not already present.\"\"\"\n        if vertex not in self.graph:\n            self.graph[vertex] = []\n    \n    def add_edge(self, u, v):\n        \"\"\"Adds a directed edge from vertex u to vertex v.\"\"\"\n        self.graph[u].append(v)\n    \n    def bfs(self, start_vertex):\n        \"\"\"Performs BFS on the graph starting from start_vertex and prints the vertices in the order they are visited.\"\"\"\n        visited = set()\n        queue = deque([start_vertex])\n        visited.add(start_vertex)\n        \n        while queue:\n            vertex = queue.popleft()\n            print(vertex, end=' ')\n            \n            for neighbor in self.graph[vertex]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    \n    g = Graph()\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index + 1])\n        g.add_edge(u, v)\n        index += 2\n    \n    start_vertex = int(data[index])\n    g.bfs(start_vertex)\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert list(g.graph.keys()) == [1, 2, 3, 4]\\n\", \"\\nassert g.graph[1] == [2, 3]\\n\", \"\\nassert g.graph[2] == [4]\\n\", \"\\nassert g.graph[3] == [4]\\n\", \"\\nassert g.graph[4] == []\\n\", \"\\ng.add_vertex(5)\\nassert 5 in g.graph\\n\", \"\\ng.add_edge(2, 5)\\nassert 5 in g.graph[2]\\n\", \"\\ng.add_edge(5, 1)\\nassert 1 in g.graph[5]\\n\", \"\\ng.add_edge(3, 5)\\nassert 5 in g.graph[3]\\n\", \"\\ng.add_edge(4, 5)\\nassert 5 in g.graph[4]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple to-do list manager in Python. The program should support the following operations:\n- Add a task to the list.\n- Remove a task from the list.\n- View all tasks currently in the list.\n\nThe program should run indefinitely until the user decides to exit by choosing the appropriate option. Each task is represented as a string. The user interface should be text-based and provide clear instructions for each operation.\n\n**Input:**\n- The input will be provided interactively through the console.\n- The user will enter a choice (1-4) to perform an operation.\n- For adding or removing a task, the user will provide the task string.\n\n**Output:**\n- The program should display appropriate messages after each operation.\n- When viewing tasks, the program should list all tasks with their respective indices.\n\n**Sample Interaction:**\n```\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 1\nEnter the task to add: Buy groceries\nTask added: Buy groceries\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 1\nEnter the task to add: Walk the dog\nTask added: Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 3\nTasks:\n1. Buy groceries\n2. Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 2\nEnter the task to remove: Buy groceries\nTask removed: Buy groceries\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 3\nTasks:\n1. Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 4\nExiting...\n```",
    "output": "def to_do_list_manager():\n    \"\"\"\n    Manages a simple to-do list with functionalities to add, remove, and view tasks.\n    \"\"\"\n    tasks = []\n\n    def add_task():\n        \"\"\"\n        Adds a new task to the to-do list.\n        \"\"\"\n        task = input(\"Enter the task to add: \")\n        tasks.append(task)\n        print(f\"Task added: {task}\")\n\n    def remove_task():\n        \"\"\"\n        Removes a task from the to-do list if it exists.\n        \"\"\"\n        task = input(\"Enter the task to remove: \")\n        if task in tasks:\n            tasks.remove(task)\n            print(f\"Task removed: {task}\")\n        else:\n            print(\"Task not found.\")\n\n    def view_tasks():\n        \"\"\"\n        Displays all tasks in the to-do list.\n        \"\"\"\n        if tasks:\n            print(\"Tasks:\")\n            for i, task in enumerate(tasks, 1):\n                print(f\"{i}. {task}\")\n        else:\n            print(\"No tasks in the list.\")\n\n    while True:\n        print(\"\\nTo-Do List Manager\")\n        print(\"1. Add a task\")\n        print(\"2. Remove a task\")\n        print(\"3. View all tasks\")\n        print(\"4. Exit\")\n\n        choice = input(\"Enter your choice (1-4): \")\n\n        if choice == '1':\n            add_task()\n        elif choice == '2':\n            remove_task()\n        elif choice == '3':\n            view_tasks()\n        elif choice == '4':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid choice! Please choose between 1 and 4.\")\n\nif __name__ == \"__main__\":\n    to_do_list_manager()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert (tasks := []) or (add_task := lambda task: tasks.append(task)) or (add_task(\\\"Task 1\\\"), tasks) == [\\\"Task 1\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\"]) or (add_task := lambda task: tasks.append(task)) or (add_task(\\\"Task 3\\\"), tasks) == [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (remove_task := lambda task: tasks.remove(task) if task in tasks else None) or (remove_task(\\\"Task 2\\\"), tasks) == [\\\"Task 1\\\", \\\"Task 3\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (remove_task := lambda task: tasks.remove(task) if task in tasks else None) or (remove_task(\\\"Task 4\\\"), tasks) == [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (view_tasks := lambda: \\\"\\\\n\\\".join(f\\\"{i}. {task}\\\" for i, task in enumerate(tasks, 1)) if tasks else \\\"No tasks in the list.\\\") or view_tasks() == \\\"1. Task 1\\\\n2. Task 2\\\\n3. Task 3\\\"\\n\", \"\\nassert (tasks := []) or (view_tasks := lambda: \\\"\\\\n\\\".join(f\\\"{i}. {task}\\\" for i, task in enumerate(tasks, 1)) if tasks else \\\"No tasks in the list.\\\") or view_tasks() == \\\"No tasks in the list.\\\"\\n\", \"\\nassert (tasks := [\\\"Task 1\\\"]) or (add_task := lambda task: tasks.append(task)) or (add_task(\\\"Task 2\\\"), add_task(\\\"Task 3\\\"), tasks) == [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (remove_task := lambda task: tasks.remove(task) if task in tasks else None) or (remove_task(\\\"Task 1\\\"), remove_task(\\\"Task 3\\\"), tasks) == [\\\"Task 2\\\"]\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (remove_task := lambda task: tasks.remove(task) if task in tasks else None) or (remove_task(\\\"Task 2\\\"), remove_task(\\\"Task 1\\\"), remove_task(\\\"Task 3\\\"), tasks) == []\\n\", \"\\nassert (tasks := [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]) or (remove_task := lambda task: tasks.remove(task) if task in tasks else None) or (remove_task(\\\"Task 4\\\"), remove_task(\\\"Task 5\\\"), tasks) == [\\\"Task 1\\\", \\\"Task 2\\\", \\\"Task 3\\\"]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple voting system for an election with three candidates: Alice, Bob, and Charlie. Each voter is identified by a unique voter ID and can cast a vote for one candidate only. Your program should keep track of the number of votes each candidate receives and display the final results after all votes have been cast. The program should terminate when a user inputs 'exit' as their voter ID.\n\n**Input:**\n- The first line contains a series of voter IDs and candidate names separated by spaces. Each voter ID is unique and is followed by the name of the candidate they voted for. The input ends with the word 'exit' as the voter ID.\n\n**Output:**\n- Print the number of votes each candidate received in the format: `Candidate: votes`.\n\n**Sample Input:**\n```\nvoter1 Alice\nvoter2 Bob\nvoter3 Charlie\nvoter4 Alice\nexit\n```\n\n**Sample Output:**\n```\nAlice: 2 votes\nBob: 1 votes\nCharlie: 1 votes\n```",
    "output": "def voting_system():\n    \"\"\"\n    Simulates a simple voting system where each voter can vote for one of the candidates.\n    Keeps track of the number of votes each candidate receives and displays the results.\n    \"\"\"\n    candidates = [\"Alice\", \"Bob\", \"Charlie\"]\n    votes = {candidate: 0 for candidate in candidates}\n    voted = set()\n\n    print(\"Welcome to the simple voting system!\")\n    print(\"Candidates are:\", \", \".join(candidates))\n\n    while True:\n        input_data = input(\"Please enter your unique voter ID and candidate name (or 'exit' to finish voting): \")\n        if input_data.lower() == 'exit':\n            break\n        \n        voter_id, vote = input_data.split()\n        \n        if voter_id in voted:\n            print(\"You have already voted. Please try again with a different ID.\")\n            continue\n        \n        if vote in candidates:\n            votes[vote] += 1\n            voted.add(voter_id)\n            print(f\"Thank you, your vote for {vote} has been recorded.\")\n        else:\n            print(\"Invalid candidate name. Please vote again.\")\n    \n    print(\"\\nVoting results:\")\n    for candidate, count in votes.items():\n        print(f\"{candidate}: {count} votes\")\n\nvoting_system()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Charlie\\\")]) == {\\\"Alice\\\": 1, \\\"Bob\\\": 1, \\\"Charlie\\\": 1}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter1\\\", \\\"Bob\\\"), (\\\"voter2\\\", \\\"Alice\\\")]) == {\\\"Alice\\\": 1, \\\"Bob\\\": 0, \\\"Charlie\\\": 0}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Alice\\\"), (\\\"voter3\\\", \\\"Alice\\\")]) == {\\\"Alice\\\": 3, \\\"Bob\\\": 0, \\\"Charlie\\\": 0}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Bob\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Bob\\\")]) == {\\\"Alice\\\": 0, \\\"Bob\\\": 3, \\\"Charlie\\\": 0}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Charlie\\\"), (\\\"voter2\\\", \\\"Charlie\\\"), (\\\"voter3\\\", \\\"Charlie\\\")]) == {\\\"Alice\\\": 0, \\\"Bob\\\": 0, \\\"Charlie\\\": 3}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Charlie\\\"), (\\\"voter4\\\", \\\"Alice\\\")]) == {\\\"Alice\\\": 2, \\\"Bob\\\": 1, \\\"Charlie\\\": 1}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Charlie\\\"), (\\\"voter4\\\", \\\"Alice\\\"), (\\\"voter5\\\", \\\"Bob\\\")]) == {\\\"Alice\\\": 2, \\\"Bob\\\": 2, \\\"Charlie\\\": 1}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Charlie\\\"), (\\\"voter4\\\", \\\"Alice\\\"), (\\\"voter5\\\", \\\"Bob\\\"), (\\\"voter6\\\", \\\"Charlie\\\")]) == {\\\"Alice\\\": 2, \\\"Bob\\\": 2, \\\"Charlie\\\": 2}\\n\", \"\\nassert voting_system([(\\\"voter1\\\", \\\"Alice\\\"), (\\\"voter2\\\", \\\"Bob\\\"), (\\\"voter3\\\", \\\"Charlie\\\"), (\\\"voter4\\\", \\\"Alice\\\"), (\\\"voter5\\\", \\\"Bob\\\"), (\\\"voter6\\\", \\\"Charlie\\\"), (\\\"voter7\\\", \\\"Alice\\\")]) == {\\\"Alice\\\": 3, \\\"Bob\\\": 2, \\\"Charlie\\\": 2}\\n\", \"\\nassert voting_system([]) == {\\\"Alice\\\": 0, \\\"Bob\\\": 0, \\\"Charlie\\\": 0}\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple slot machine game in Python. The game consists of three reels, each containing 10 distinct symbols: A, B, C, D, E, F, G, H, I, J. When the player initiates a spin by placing a bet, each reel randomly selects a symbol. Winnings are determined based on the following paytable:\n- 3 of a kind: 10 times the bet\n- 2 of a kind: 5 times the bet\n- No matches: 0\n\nThe player can place a bet between 1 and 100. The game should track the player's total balance and be played via the command line. The game continues until the player decides to exit by entering a bet of 0.\n\n**Input:**\n- The first line contains an integer representing the player's initial balance.\n- Subsequent lines contain integers representing the player's bets. The game ends when a bet of 0 is entered.\n\n**Output:**\n- For each spin, print the result of the spin and the player's winnings.\n- After each spin, print the player's current balance.\n- Upon exiting the game, print the player's final balance.\n\n**Sample Input:**\n```\n100\n20\n10\n0\n```\n\n**Sample Output:**\n```\nSpinning...  ['A', 'A', 'A']\n3 of a kind! You win: 200\nYour current balance is: 200\nSpinning...  ['B', 'B', 'C']\n2 of a kind! You win: 50\nYour current balance is: 250\nThank you for playing. Your final balance is: 250\n```",
    "output": "import random\n\nclass SlotMachine:\n    def __init__(self, balance):\n        \"\"\"\n        Initialize the slot machine with a given balance.\n        \n        :param balance: Initial balance of the player.\n        \"\"\"\n        self.reels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n        self.balance = balance\n\n    def spin(self, bet):\n        \"\"\"\n        Simulate spinning the reels and calculate winnings based on the bet.\n        \n        :param bet: Amount bet by the player.\n        \"\"\"\n        if bet < 1 or bet > 100:\n            print(\"Invalid bet amount. Please bet between 1 and 100.\")\n            return\n\n        if bet > self.balance:\n            print(\"Insufficient balance.\")\n            return\n\n        self.balance -= bet\n        result = [random.choice(self.reels) for _ in range(3)]\n        print(\"Spinning... \", result)\n\n        self.check_winnings(result, bet)\n    \n    def check_winnings(self, result, bet):\n        \"\"\"\n        Determine the winnings based on the spin result and update the balance.\n        \n        :param result: List of symbols from the spin.\n        :param bet: Amount bet by the player.\n        \"\"\"\n        unique_symbols = set(result)\n        if len(unique_symbols) == 1:\n            winnings = bet * 10\n            print(f\"3 of a kind! You win: {winnings}\")\n        elif len(unique_symbols) == 2:\n            winnings = bet * 5\n            print(f\"2 of a kind! You win: {winnings}\")\n        else:\n            winnings = 0\n            print(\"No matches. Better luck next time.\")\n        \n        self.balance += winnings\n        print(f\"Your current balance is: {self.balance}\")\n\ndef main():\n    \"\"\"\n    Main function to run the slot machine game.\n    \"\"\"\n    balance = int(input(\"Enter your initial balance: \"))\n    slot_machine = SlotMachine(balance)\n\n    while True:\n        bet = int(input(\"Enter your bet or type 0 to exit: \"))\n        if bet == 0:\n            print(f\"Thank you for playing. Your final balance is: {slot_machine.balance}\")\n            break\n        slot_machine.spin(bet)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "array_numeric",
    "unit_tests": "[\"\\nassert SlotMachine(100).balance == 100\\n\", \"\\nassert SlotMachine(0).balance == 0\\n\", \"\\nassert SlotMachine(50).spin(101) is None  # Invalid bet amount\\n\", \"\\nassert SlotMachine(50).spin(51) is None  # Insufficient balance\\n\", \"\\nassert SlotMachine(100).spin(10) is None  # Valid bet, check printed output for winnings\\n\", \"\\nassert SlotMachine(100).spin(0) is None  # Exit condition\\n\", \"\\nassert SlotMachine(100).spin(50) is None  # Valid bet, check printed output for winnings\\n\", \"\\nassert SlotMachine(100).spin(1) is None  # Minimum bet, check printed output for winnings\\n\", \"\\nassert SlotMachine(100).spin(100) is None  # Maximum bet, check printed output for winnings\\n\", \"\\nassert SlotMachine(100).spin(5) is None  # Valid bet, check printed output for winnings\\n\"]"
  },
  {
    "input": "You are given an undirected graph with `N` nodes and `M` edges. Your task is to find the size of the largest independent set of nodes in the graph. An independent set is a set of nodes such that no two nodes in the set are adjacent.\n\n**Input:**\n- The first line contains two integers `N` (1 \u2264 N \u2264 100) and `M` (0 \u2264 M \u2264 N*(N-1)/2), representing the number of nodes and edges, respectively.\n- The next `M` lines each contain two integers `u` and `v` (1 \u2264 u, v \u2264 N, u \u2260 v), representing an edge between nodes `u` and `v`.\n\n**Output:**\n- Print a single integer, the size of the largest independent set of nodes.\n\n**Sample Input:**\n```\n4 3\n1 2\n2 3\n3 4\n```\n\n**Sample Output:**\n```\n2\n```",
    "output": "from itertools import combinations\n\ndef is_independent(graph, subset):\n    \"\"\"\n    Check if the given subset of nodes is an independent set in the graph.\n    \n    :param graph: 2D list representing the adjacency matrix of the graph.\n    :param subset: List of nodes to check.\n    :return: True if the subset is independent, False otherwise.\n    \"\"\"\n    for u in subset:\n        for v in subset:\n            if u != v and graph[u][v]:\n                return False\n    return True\n\ndef find_largest_independent_set(graph, n):\n    \"\"\"\n    Find the size of the largest independent set in the graph.\n    \n    :param graph: 2D list representing the adjacency matrix of the graph.\n    :param n: Number of nodes in the graph.\n    :return: Size of the largest independent set.\n    \"\"\"\n    max_independent_set_size = 0\n    for k in range(1, n + 1):\n        for subset in combinations(range(1, n + 1), k):\n            if is_independent(graph, subset):\n                max_independent_set_size = k\n    return max_independent_set_size\n\ndef main():\n    \"\"\"\n    Read input, construct the graph, and print the size of the largest independent set.\n    \"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n\n    # Initialize graph\n    graph = [[False] * (n + 1) for _ in range(n + 1)]\n\n    # Read edges and populate the graph\n    for i in range(m):\n        u = int(data[index + 2 * i])\n        v = int(data[index + 2 * i + 1])\n        graph[u][v] = True\n        graph[v][u] = True\n\n    # Find the largest independent set\n    result = find_largest_independent_set(graph, n)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert find_largest_independent_set([[False, False, False], [False, False, True], [False, True, False]], 2) == 2\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False], [False, False, True, True], [False, True, False, True], [False, True, True, False]], 3) == 2\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False], [False, False, False, False], [False, False, False, False], [False, False, False, False]], 4) == 4\\n\", \"\\nassert find_largest_independent_set([[False, True, True], [True, False, True], [True, True, False]], 3) == 1\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False, False], [False, False, True, True, False], [False, True, False, True, True], [False, True, True, False, True], [False, False, True, True, False]], 5) == 2\\n\", \"\\nassert find_largest_independent_set([[False, True], [True, False]], 2) == 1\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False, False, False], [False, False, True, True, False, False], [False, True, False, True, True, False], [False, True, True, False, True, True], [False, False, True, True, False, True], [False, False, False, True, True, False]], 6) == 2\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False, False, False, False], [False, False, True, True, False, False, False], [False, True, False, True, True, False, False], [False, True, True, False, True, True, False], [False, False, True, True, False, True, True], [False, False, False, True, True, False, True], [False, False, False, False, True, True, False]], 7) == 3\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False, False, False, False, False], [False, False, True, True, False, False, False, False], [False, True, False, True, True, False, False, False], [False, True, True, False, True, True, False, False], [False, False, True, True, False, True, True, False], [False, False, False, True, True, False, True, True], [False, False, False, False, True, True, False, True], [False, False, False, False, False, True, True, False]], 8) == 4\\n\", \"\\nassert find_largest_independent_set([[False, False, False, False, False, False, False, False, False], [False, False, True, True, False, False, False, False, False], [False, True, False, True, True, False, False, False, False], [False, True, True, False, True, True, False, False, False], [False, False, True, True, False, True, True, False, False], [False, False, False, True, True, False, True, True, False], [False, False, False, False, True, True, False, True, True], [False, False, False, False, False, True, True, False, True], [False, False, False, False, False, False, True, True, False]], 9) == 4\\n\"]"
  },
  {
    "input": "You are given a task to determine if a given integer is a palindrome. A number is considered a palindrome if it reads the same backward as forward. Your program should read an integer from the standard input and output \"YES\" if the number is a palindrome, otherwise output \"NO\".\n\n**Input:**\n- A single line containing an integer `n` (-10^9 \u2264 n \u2264 10^9).\n\n**Output:**\n- Output \"YES\" if `n` is a palindrome, otherwise output \"NO\".\n\n**Sample Input 1:**\n```\n121\n```\n**Sample Output 1:**\n```\nYES\n```\n\n**Sample Input 2:**\n```\n-121\n```\n**Sample Output 2:**\n```\nNO\n```\n\n**Sample Input 3:**\n```\n10\n```\n**Sample Output 3:**\n```\nNO\n```",
    "output": "def is_palindrome(number):\n    \"\"\"\n    Check if the given integer is a palindrome.\n    \n    Args:\n    number (int): The integer to check.\n    \n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    str_num = str(number)\n    return str_num == str_num[::-1]\n\ndef main():\n    \"\"\"\n    Read an integer from input and determine if it is a palindrome.\n    Output \"YES\" if it is a palindrome, otherwise output \"NO\".\n    \"\"\"\n    try:\n        num = int(input().strip())\n        if is_palindrome(num):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    except ValueError:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert is_palindrome(121) == True\\n\", \"\\nassert is_palindrome(-121) == False\\n\", \"\\nassert is_palindrome(10) == False\\n\", \"\\nassert is_palindrome(12321) == True\\n\", \"\\nassert is_palindrome(12345678987654321) == True\\n\", \"\\nassert is_palindrome(0) == True\\n\", \"\\nassert is_palindrome(1) == True\\n\", \"\\nassert is_palindrome(1221) == True\\n\", \"\\nassert is_palindrome(123456) == False\\n\", \"\\nassert is_palindrome(1001) == True\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple number guessing game. The program should generate a random integer between 1 and 100 (inclusive) and prompt the user to guess this number. After each guess, the program should provide feedback indicating whether the guess is too low, too high, or correct. The game continues until the user guesses the correct number. The program should handle invalid inputs gracefully by prompting the user to enter a valid integer.\n\n**Sample Interaction:**\n```\nGuess the number between 1 and 100: 50\nToo low! Try again.\nGuess the number between 1 and 100: 75\nToo high! Try again.\nGuess the number between 1 and 100: 63\nCongratulations! You've guessed the number 63 correctly.\n```",
    "output": "import random\n\ndef number_guessing_game():\n    \"\"\"\n    Simulates a number guessing game where the user tries to guess a randomly generated number between 1 and 100.\n    Provides feedback on whether the guess is too low, too high, or correct.\n    Handles invalid inputs by prompting the user to enter a valid integer.\n    \"\"\"\n    number_to_guess = random.randint(1, 100)\n    user_guess = None\n\n    while user_guess != number_to_guess:\n        try:\n            user_guess = int(input(\"Guess the number between 1 and 100: \"))\n            \n            if user_guess < number_to_guess:\n                print(\"Too low! Try again.\")\n            elif user_guess > number_to_guess:\n                print(\"Too high! Try again.\")\n            else:\n                print(f\"Congratulations! You've guessed the number {number_to_guess} correctly.\")\n        except ValueError:\n            print(\"Please enter a valid integer.\")\n\nnumber_guessing_game()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\ntest_number_guessing_game([\\\"50\\\", \\\"25\\\", \\\"12\\\", \\\"6\\\", \\\"3\\\", \\\"1\\\"], \\\"Guess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 1 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"75\\\", \\\"88\\\", \\\"94\\\", \\\"97\\\", \\\"99\\\", \\\"100\\\"], \\\"Guess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 100 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"25\\\", \\\"37\\\", \\\"43\\\", \\\"46\\\", \\\"48\\\", \\\"49\\\", \\\"50\\\"], \\\"Guess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 50 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"75\\\", \\\"62\\\", \\\"56\\\", \\\"53\\\", \\\"54\\\", \\\"55\\\"], \\\"Guess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 55 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"abc\\\", \\\"50\\\", \\\"25\\\", \\\"12\\\", \\\"6\\\", \\\"3\\\", \\\"1\\\"], \\\"Guess the number between 1 and 100: Please enter a valid integer.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 1 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"50\\\"], \\\"Guess the number between 1 and 100: Congratulations! You've guessed the number 50 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"100\\\"], \\\"Guess the number between 1 and 100: Congratulations! You've guessed the number 100 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"1\\\"], \\\"Guess the number between 1 and 100: Congratulations! You've guessed the number 1 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"75\\\", \\\"100\\\"], \\\"Guess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Too low! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 100 correctly.\\\")\\n\", \"\\ntest_number_guessing_game([\\\"50\\\", \\\"25\\\", \\\"1\\\"], \\\"Guess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Too high! Try again.\\\\nGuess the number between 1 and 100: Congratulations! You've guessed the number 1 correctly.\\\")\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `validate_input(user_input, valid_inputs)` that processes a string `user_input` and a list of strings `valid_inputs`. The function must adhere to the following validation rules:\n\n1. The `user_input` must consist of exactly one character.\n2. The `user_input` must not be an empty string.\n3. The `user_input` must be a lowercase English alphabet letter that is not a vowel.\n4. The `user_input` must not be present in the `valid_inputs` list.\n\nIf the `user_input` fails to meet any of these criteria, the function should print an error message and prompt the user to enter a new input. This process should repeat until a valid input is received. Upon receiving a valid input, the function should return it as a string.\n\n**Sample Input/Output:**\n\n- Input: `user_input = 'a'`, `valid_inputs = ['b', 'c', 'd']`\n  - Output: (Prompts user to enter a new input since 'a' is a vowel)\n- Input: `user_input = 'b'`, `valid_inputs = ['b', 'c', 'd']`\n  - Output: (Prompts user to enter a new input since 'b' is already in the valid inputs list)\n- Input: `user_input = 'f'`, `valid_inputs = ['b', 'c', 'd']`\n  - Output: `'f'`",
    "output": "def validate_input(user_input, valid_inputs):\n    \"\"\"\n    Validates the user_input based on specific criteria:\n    - Must be a single character.\n    - Must not be an empty string.\n    - Must be a lowercase English alphabet letter that is not a vowel.\n    - Must not be in the valid_inputs list.\n    \n    Prompts the user for a new input until a valid input is received.\n    \n    Parameters:\n    user_input (str): The input string to be validated.\n    valid_inputs (list): A list of strings representing valid inputs.\n    \n    Returns:\n    str: The validated input string.\n    \"\"\"\n    vowels = 'aeiou'\n    while True:\n        if len(user_input) != 1:\n            user_input = input(\"Error: Input should be a single character. Please enter a new input: \")\n        elif user_input == '':\n            user_input = input(\"Error: Input should not be an empty string. Please enter a new input: \")\n        elif user_input not in 'abcdefghijklmnopqrstuvwxyz':\n            user_input = input(\"Error: Input should be a lowercase English alphabet letter. Please enter a new input: \")\n        elif user_input in vowels:\n            user_input = input(\"Error: Input should not be a vowel. Please enter a new input: \")\n        elif user_input in valid_inputs:\n            user_input = input(\"Error: Input is already in the valid inputs list. Please enter a new input: \")\n        else:\n            return user_input\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input('b', ['c', 'd']) == 'b'\\n\", \"\\nassert validate_input('z', ['x', 'y']) == 'z'\\n\", \"\\nassert validate_input('m', ['m', 'n']) == 'n'\\n\", \"\\nassert validate_input('a', ['b', 'c']) == 'b'\\n\", \"\\nassert validate_input('e', ['f', 'g']) == 'f'\\n\", \"\\nassert validate_input('i', ['j', 'k']) == 'j'\\n\", \"\\nassert validate_input('o', ['p', 'q']) == 'p'\\n\", \"\\nassert validate_input('u', ['v', 'w']) == 'v'\\n\", \"\\nassert validate_input('1', ['2', '3']) == '2'\\n\", \"\\nassert validate_input('!', ['@', '#']) == '@'\\n\"]"
  },
  {
    "input": "You are given an undirected graph with `N` vertices and `M` edges. Your task is to implement a Depth-First Search (DFS) algorithm to traverse the graph starting from a given vertex. You need to implement both recursive and iterative versions of DFS. The graph is represented using an adjacency list. \n\n**Input:**\n- The first line contains two integers `N` and `M`, the number of vertices and edges in the graph.\n- The next `M` lines each contain two integers `u` and `v`, representing an undirected edge between vertices `u` and `v`.\n- The last line contains an integer `S`, the starting vertex for the DFS traversal.\n\n**Output:**\n- Print the vertices visited in the order they are visited using the recursive DFS.\n- Print the vertices visited in the order they are visited using the iterative DFS.\n\n**Sample Input:**\n```\n4 6\n0 1\n0 2\n1 2\n2 0\n2 3\n3 3\n2\n```\n\n**Sample Output:**\n```\n2 0 1 3 \n2 3 0 1 \n```",
    "output": "class Graph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        \"\"\"Add an undirected edge between vertices u and v.\"\"\"\n        if u in self.graph:\n            self.graph[u].append(v)\n        else:\n            self.graph[u] = [v]\n        if v in self.graph:\n            self.graph[v].append(u)\n        else:\n            self.graph[v] = [u]\n\n    def dfs_util_recursive(self, v, visited):\n        \"\"\"Recursive utility function for DFS.\"\"\"\n        visited.add(v)\n        print(v, end=' ')\n\n        for neighbour in self.graph.get(v, []):\n            if neighbour not in visited:\n                self.dfs_util_recursive(neighbour, visited)\n\n    def dfs_recursive(self, start):\n        \"\"\"Perform DFS using recursion starting from vertex 'start'.\"\"\"\n        visited = set()\n        self.dfs_util_recursive(start, visited)\n\n    def dfs_iterative(self, start):\n        \"\"\"Perform DFS using iteration starting from vertex 'start'.\"\"\"\n        visited = set()\n        stack = [start]\n\n        while stack:\n            v = stack.pop()\n            if v not in visited:\n                visited.add(v)\n                print(v, end=' ')\n            for neighbour in reversed(self.graph.get(v, [])):\n                if neighbour not in visited:\n                    stack.append(neighbour)\n\n# Example usage:\n# Read input\nN, M = map(int, input().split())\ngraph = Graph()\nfor _ in range(M):\n    u, v = map(int, input().split())\n    graph.add_edge(u, v)\nstart_vertex = int(input())\n\n# Perform DFS\nprint(\"Depth First Search (recursive) starting from vertex\", start_vertex, \":\")\ngraph.dfs_recursive(start_vertex)\n\nprint(\"\\nDepth First Search (iterative) starting from vertex\", start_vertex, \":\")\ngraph.dfs_iterative(start_vertex)\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(0, 1)\\ngraph.add_edge(0, 2)\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 0)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 3)\\ngraph.dfs_recursive(2)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"2 0 1 3\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(0, 1)\\ngraph.add_edge(0, 2)\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 0)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 3)\\ngraph.dfs_iterative(2)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"2 3 0 1\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 4)\\ngraph.add_edge(4, 5)\\ngraph.dfs_recursive(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 2 3 4 5\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 4)\\ngraph.add_edge(4, 5)\\ngraph.dfs_iterative(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 2 3 4 5\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(1, 3)\\ngraph.add_edge(2, 4)\\ngraph.add_edge(3, 5)\\ngraph.dfs_recursive(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 2 4 3 5\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(1, 3)\\ngraph.add_edge(2, 4)\\ngraph.add_edge(3, 5)\\ngraph.dfs_iterative(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 3 5 2 4\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 1)\\ngraph.dfs_recursive(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 2 3\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 1)\\ngraph.dfs_iterative(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 3 2\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 4)\\ngraph.add_edge(4, 1)\\ngraph.dfs_recursive(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 2 3 4\\\"\\n\", \"\\nsys.stdout = io.StringIO()\\ngraph = Graph()\\ngraph.add_edge(1, 2)\\ngraph.add_edge(2, 3)\\ngraph.add_edge(3, 4)\\ngraph.add_edge(4, 1)\\ngraph.dfs_iterative(1)\\noutput = sys.stdout.getvalue().strip()\\nassert output == \\\"1 4 3 2\\\"\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple command-line calculator that supports basic arithmetic operations: addition, subtraction, multiplication, and division. The calculator should repeatedly prompt the user for an operation and two numbers, perform the operation, and display the result. The program should continue to run until the user types 'exit'. \n\n**Input:**\n- The first line of input is a string representing the operation ('add', 'subtract', 'multiply', 'divide', or 'exit').\n- If the operation is not 'exit', the next two lines are the numbers on which the operation should be performed.\n\n**Output:**\n- For each operation (except 'exit'), output the result of the operation.\n- If the user attempts to divide by zero, output \"Error! Division by zero.\"\n- If the user enters invalid numeric input, output \"Invalid input! Please enter numeric values.\"\n- If the user enters an unknown operation, output \"Unknown input.\"\n\n**Sample Input:**\n```\nadd\n5\n3\nmultiply\n4\n2\nexit\n```\n\n**Sample Output:**\n```\nThe result is 8.0\nThe result is 8.0\nExiting the calculator. Goodbye!\n```",
    "output": "def add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y\n\n\ndef subtract(x, y):\n    \"\"\"Return the difference of x and y.\"\"\"\n    return x - y\n\n\ndef multiply(x, y):\n    \"\"\"Return the product of x and y.\"\"\"\n    return x * y\n\n\ndef divide(x, y):\n    \"\"\"Return the quotient of x and y, or an error message if y is zero.\"\"\"\n    if y == 0:\n        return \"Error! Division by zero.\"\n    else:\n        return x / y\n\n\ndef calculator():\n    \"\"\"Run a command-line calculator that performs basic arithmetic operations.\"\"\"\n    while True:\n        print(\"Options:\")\n        print(\"Enter 'add' to add two numbers\")\n        print(\"Enter 'subtract' to subtract two numbers\")\n        print(\"Enter 'multiply' to multiply two numbers\")\n        print(\"Enter 'divide' to divide two numbers\")\n        print(\"Enter 'exit' to end the program\")\n        user_input = input(\": \")\n\n        if user_input == \"exit\":\n            print(\"Exiting the calculator. Goodbye!\")\n            break\n        elif user_input in ('add', 'subtract', 'multiply', 'divide'):\n            try:\n                num1 = float(input(\"Enter first number: \"))\n                num2 = float(input(\"Enter second number: \"))\n            except ValueError:\n                print(\"Invalid input! Please enter numeric values.\")\n                continue\n\n            if user_input == \"add\":\n                print(\"The result is\", add(num1, num2))\n            elif user_input == \"subtract\":\n                print(\"The result is\", subtract(num1, num2))\n            elif user_input == \"multiply\":\n                print(\"The result is\", multiply(num1, num2))\n            elif user_input == \"divide\":\n                print(\"The result is\", divide(num1, num2))\n        else:\n            print(\"Unknown input\")\n\n\nif __name__ == \"__main__\":\n    calculator()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert add(2, 3) == 5\\n\", \"\\nassert subtract(5, 3) == 2\\n\", \"\\nassert multiply(4, 3) == 12\\n\", \"\\nassert divide(10, 2) == 5.0\\n\", \"\\nassert add(-1, 1) == 0\\n\", \"\\nassert subtract(-1, -1) == 0\\n\", \"\\nassert multiply(-2, 3) == -6\\n\", \"\\nassert divide(-10, 2) == -5.0\\n\", \"\\nassert divide(10, 0) == \\\"Error! Division by zero.\\\"\\n\", \"\\nassert multiply(0, 5) == 0\\n\"]"
  },
  {
    "input": "You are given a sequence of integers. Your task is to compute the mean, median, and mode of these integers. If there is no unique mode, output all modes. If all numbers are equally frequent, output \"No unique mode\".\n\n**Input:**\n- A single line containing a series of integers separated by spaces.\n\n**Output:**\n- Three lines containing the mean, median, and mode of the input integers, respectively. The mode should be printed as a single integer if unique, a list of integers if multiple modes exist, or \"No unique mode\" if all numbers are equally frequent.\n\n**Sample Input:**\n```\n1 2 2 3 4\n```\n\n**Sample Output:**\n```\n2.6\n2\n2\n```\n\n**Sample Input:**\n```\n1 1 2 2 3 3\n```\n\n**Sample Output:**\n```\n2.0\n2\n[1, 2, 3]\n```\n\n**Sample Input:**\n```\n5 5 5 5\n```\n\n**Sample Output:**\n```\n5.0\n5\nNo unique mode\n```",
    "output": "from collections import Counter\nimport statistics\n\ndef get_numbers() -> list:\n    \"\"\"Prompts the user for a series of integers and returns them as a list.\"\"\"\n    numbers = input(\"Enter a series of integers separated by spaces: \").strip().split()\n    return [int(num) for num in numbers]\n\ndef calculate_mean(numbers: list) -> float:\n    \"\"\"Calculates and returns the mean of the given list of numbers.\"\"\"\n    return statistics.mean(numbers)\n\ndef calculate_median(numbers: list) -> float:\n    \"\"\"Calculates and returns the median of the given list of numbers.\"\"\"\n    return statistics.median(numbers)\n\ndef calculate_mode(numbers: list) -> str:\n    \"\"\"Calculates and returns the mode of the given list of numbers.\n    Returns a single integer if unique, a list of integers if multiple modes exist,\n    or 'No unique mode' if all numbers are equally frequent.\"\"\"\n    try:\n        mode = statistics.mode(numbers)\n    except statistics.StatisticsError:\n        data = Counter(numbers)\n        max_count = max(data.values())\n        mode = [k for k, v in data.items() if v == max_count]\n        if len(mode) == len(numbers):\n            return \"No unique mode\"\n        else:\n            return mode\n    else:\n        return mode\n\ndef main():\n    \"\"\"Main function to execute the program.\"\"\"\n    numbers = get_numbers()\n    mean = calculate_mean(numbers)\n    median = calculate_median(numbers)\n    mode = calculate_mode(numbers)\n\n    print(f\"Mean: {mean}\")\n    print(f\"Median: {median}\")\n    print(f\"Mode: {mode}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_mean([1, 2, 3, 4, 5]) == 3\\n\", \"\\nassert calculate_median([3, 1, 4, 1, 5, 9, 2]) == 3\\n\", \"\\nassert calculate_mode([1, 2, 2, 3, 4]) == 2\\n\", \"\\nassert calculate_mode([1, 1, 2, 2, 3, 3]) == \\\"No unique mode\\\"\\n\", \"\\nassert calculate_mean([10, 20, 30]) == 20\\n\", \"\\nassert calculate_median([7, 8, 9, 10, 11, 12]) == 9.5\\n\", \"\\nassert calculate_mode([5, 5, 5, 5]) == \\\"No unique mode\\\"\\n\", \"\\nassert calculate_mean([100]) == 100\\n\", \"\\nassert calculate_median([1]) == 1\\n\", \"\\nassert calculate_mode([1, 2, 3, 4, 4, 5, 5, 5]) == 5\\n\"]"
  },
  {
    "input": "Implement a Python program to simulate a simple game of Rock-Paper-Scissors. The program should interact with the user by prompting for their choice, randomly generate a choice for the computer, and then determine the winner based on the standard rules of the game. The program must handle invalid inputs gracefully by informing the user of the mistake.\n\n**Input:**\n- A single line containing the user's choice: either \"rock\", \"paper\", or \"scissors\". The input is case-insensitive and may contain leading or trailing spaces.\n\n**Output:**\n- Print the user's choice.\n- Print the computer's randomly selected choice.\n- Print the result of the game: \"You win!\", \"Computer wins!\", \"It's a tie!\", or \"Invalid input. Please enter rock, paper, or scissors.\"\n\n**Sample Input 1:**\n```\nrock\n```\n\n**Sample Output 1:**\n```\nYour choice: rock\nComputer's choice: paper\nComputer wins!\n```\n\n**Sample Input 2:**\n```\nPAPER\n```\n\n**Sample Output 2:**\n```\nYour choice: paper\nComputer's choice: rock\nYou win!\n```\n\n**Sample Input 3:**\n```\nscissors\n```\n\n**Sample Output 3:**\n```\nYour choice: scissors\nComputer's choice: scissors\nIt's a tie!\n```\n\n**Sample Input 4:**\n```\nlizard\n```\n\n**Sample Output 4:**\n```\nYour choice: lizard\nComputer's choice: rock\nInvalid input. Please enter rock, paper, or scissors.\n```",
    "output": "import random\n\ndef get_computer_choice():\n    \"\"\"\n    Randomly selects and returns the computer's choice from 'rock', 'paper', or 'scissors'.\n    \"\"\"\n    choices = ['rock', 'paper', 'scissors']\n    return random.choice(choices)\n\ndef get_user_choice():\n    \"\"\"\n    Prompts the user to enter their choice and returns it in lowercase, stripped of leading/trailing spaces.\n    \"\"\"\n    user_input = input(\"Enter your choice (rock, paper, scissors): \").strip().lower()\n    return user_input\n\ndef determine_winner(user_choice, computer_choice):\n    \"\"\"\n    Determines the winner of the Rock-Paper-Scissors game based on the user's and computer's choices.\n    Returns the result as a string.\n    \"\"\"\n    if user_choice == computer_choice:\n        return \"It's a tie!\"\n    elif (user_choice == 'rock' and computer_choice == 'scissors') or \\\n         (user_choice == 'scissors' and computer_choice == 'paper') or \\\n         (user_choice == 'paper' and computer_choice == 'rock'):\n        return \"You win!\"\n    elif user_choice not in ['rock', 'paper', 'scissors']:\n        return \"Invalid input. Please enter rock, paper, or scissors.\"\n    else:\n        return \"Computer wins!\"\n\ndef play_game():\n    \"\"\"\n    Orchestrates the Rock-Paper-Scissors game by getting user and computer choices, determining the winner, and displaying the results.\n    \"\"\"\n    print(\"Welcome to Rock-Paper-Scissors!\")\n    user_choice = get_user_choice()\n    computer_choice = get_computer_choice()\n    \n    print(f\"Your choice: {user_choice}\")\n    print(f\"Computer's choice: {computer_choice}\")\n    \n    result = determine_winner(user_choice, computer_choice)\n    print(result)\n\n# Play the game\nplay_game()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert get_computer_choice() in ['rock', 'paper', 'scissors']\\n\", \"\\nassert get_user_choice() == 'rock' if input.__setitem__(0, 'rock') else True\\n\", \"\\nassert get_user_choice() == 'paper' if input.__setitem__(0, 'paper') else True\\n\", \"\\nassert get_user_choice() == 'scissors' if input.__setitem__(0, 'scissors') else True\\n\", \"\\nassert get_user_choice() == 'invalid' if input.__setitem__(0, 'invalid') else True\\n\", \"\\nassert determine_winner('rock', 'scissors') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('scissors', 'paper') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('paper', 'rock') == \\\"You win!\\\"\\n\", \"\\nassert determine_winner('rock', 'rock') == \\\"It's a tie!\\\"\\n\", \"\\nassert determine_winner('paper', 'paper') == \\\"It's a tie!\\\"\\n\"]"
  },
  {
    "input": "Implement a Python program to simulate a rock-paper-scissors game between two players. Each player should have a function to choose between rock, paper, or scissors, and a function to determine the winner based on the choices. The game should run for 5 rounds. At the end, display the total score of each player and declare the winner.\n\n**Input:**\n- For each round, the first player will input their choice (rock, paper, or scissors).\n- The second player's choice will be randomly generated by the computer.\n\n**Output:**\n- After each round, print the choices of both players and the result of the round (win, lose, or draw).\n- After all rounds, print the total score of each player and the overall winner.\n\n**Sample Input:**\n```\nrock\npaper\nscissors\nrock\npaper\n```\n\n**Sample Output:**\n```\nRound 1:\nPlayer 1 chose: rock\nPlayer 2 chose: paper\nPlayer 2 wins this round!\n\nRound 2:\nPlayer 1 chose: paper\nPlayer 2 chose: scissors\nPlayer 2 wins this round!\n\nRound 3:\nPlayer 1 chose: scissors\nPlayer 2 chose: rock\nPlayer 2 wins this round!\n\nRound 4:\nPlayer 1 chose: rock\nPlayer 2 chose: paper\nPlayer 2 wins this round!\n\nRound 5:\nPlayer 1 chose: paper\nPlayer 2 chose: scissors\nPlayer 2 wins this round!\n\nGame Over!\nPlayer 1's score: 0\nPlayer 2's score: 5\nPlayer 2 wins the game!\n```",
    "output": "import random\n\ndef get_player_choice(player_name):\n    \"\"\"\n    Prompts the player to enter their choice of rock, paper, or scissors.\n    \n    Args:\n    player_name (str): The name of the player.\n    \n    Returns:\n    str: The player's choice.\n    \"\"\"\n    while True:\n        choice = input(f\"{player_name}, enter your choice (rock, paper, or scissors): \").strip().lower()\n        if choice in ['rock', 'paper', 'scissors']:\n            return choice\n        else:\n            print(\"Invalid choice. Please try again.\")\n\ndef get_computer_choice():\n    \"\"\"\n    Randomly selects rock, paper, or scissors for the computer player.\n    \n    Returns:\n    str: The computer's choice.\n    \"\"\"\n    return random.choice(['rock', 'paper', 'scissors'])\n\ndef determine_winner(player1_choice, player2_choice):\n    \"\"\"\n    Determines the winner of a round based on the choices of two players.\n    \n    Args:\n    player1_choice (str): The choice of player 1.\n    player2_choice (str): The choice of player 2.\n    \n    Returns:\n    str: The winner of the round (\"player1\", \"player2\", or \"draw\").\n    \"\"\"\n    if player1_choice == player2_choice:\n        return \"draw\"\n    elif (player1_choice == 'rock' and player2_choice == 'scissors') or \\\n         (player1_choice == 'scissors' and player2_choice == 'paper') or \\\n         (player1_choice == 'paper' and player2_choice == 'rock'):\n        return \"player1\"\n    else:\n        return \"player2\"\n\ndef play_game(rounds):\n    \"\"\"\n    Plays a series of rock-paper-scissors rounds between two players.\n    \n    Args:\n    rounds (int): The number of rounds to play.\n    \"\"\"\n    player1_score = 0\n    player2_score = 0\n\n    for round in range(1, rounds + 1):\n        print(f\"\\nRound {round}:\")\n        player1_choice = get_player_choice(\"Player 1\")\n        player2_choice = get_computer_choice()\n\n        print(f\"Player 1 chose: {player1_choice}\")\n        print(f\"Player 2 chose: {player2_choice}\")\n\n        winner = determine_winner(player1_choice, player2_choice)\n        if winner == \"player1\":\n            player1_score += 1\n            print(\"Player 1 wins this round!\")\n        elif winner == \"player2\":\n            player2_score += 1\n            print(\"Player 2 wins this round!\")\n        else:\n            print(\"It's a draw!\")\n\n    print(\"\\nGame Over!\")\n    print(f\"Player 1's score: {player1_score}\")\n    print(f\"Player 2's score: {player2_score}\")\n\n    if player1_score > player2_score:\n        print(\"Player 1 wins the game!\")\n    elif player2_score > player1_score:\n        print(\"Player 2 wins the game!\")\n    else:\n        print(\"The game is a draw!\")\n\n# Run the game for 5 rounds\nplay_game(5)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\ninput = mock_input(['rock', 'rock', 'rock', 'rock', 'rock'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['paper', 'paper', 'paper', 'paper', 'paper'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['scissors', 'scissors', 'scissors', 'scissors', 'scissors'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['rock', 'paper', 'scissors', 'rock', 'paper'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['rock', 'rock', 'rock', 'rock', 'scissors'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 3 and player2_score == 1\\n\", \"\\ninput = mock_input(['scissors', 'scissors', 'scissors', 'scissors', 'rock'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 1 and player2_score == 3\\n\", \"\\ninput = mock_input(['rock', 'paper', 'scissors', 'paper', 'rock'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['rock', 'scissors', 'paper', 'rock', 'scissors'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 3 and player2_score == 1\\n\", \"\\ninput = mock_input(['paper', 'rock', 'scissors', 'paper', 'scissors'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\", \"\\ninput = mock_input(['scissors', 'paper', 'rock', 'scissors', 'paper'])\\nplayer1_score, player2_score = 0, 0\\nfor _ in range(5):\\n    player1_choice = get_player_choice(\\\"Player 1\\\")\\n    player2_choice = get_computer_choice()\\n    winner = determine_winner(player1_choice, player2_choice)\\n    if winner == \\\"player1\\\":\\n        player1_score += 1\\n    elif winner == \\\"player2\\\":\\n        player2_score += 1\\nassert player1_score == 2 and player2_score == 2\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple text-based adventure game in Python. The game consists of at least three rooms, each with a description and at least one exit. The player can navigate between rooms using commands such as \"go north\", \"go south\", etc. The game must include at least one obstacle that the player must overcome to win. The game should start with an introduction and end with a congratulatory message upon winning.\n\n**Input:**\n- The player will input commands to navigate the game. Valid commands are \"go [direction]\" and \"quit\".\n- Additional commands may be required to overcome obstacles.\n\n**Output:**\n- The game will display the current room's description, available exits, and any obstacles.\n- The game will end with a congratulatory message when the player reaches the winning room.\n\n**Sample Interaction:**\n```\n===========================\n Text-based Adventure Game \n===========================\n\nCommands:\n  go [direction]\n  quit\n  \n===========================\n\n---------------------------\nYou are in the Hall\nInventory : []\nYou are standing in a dark and spooky hallway with a closed door to the north and another one to the east.\nExits : north,east\n---------------------------\n> go north\n---------------------------\nYou are in the Kitchen\nInventory : []\nYou are in the Kitchen. The only exit is the southern door.\nObstacle : monster\nExits : south\n---------------------------\n> fight\nYou do not have a sword and the monster ate you.\n```",
    "output": "def show_instructions():\n    \"\"\"\n    Prints the main menu and the commands available to the player.\n    \"\"\"\n    print('''\n===========================\n Text-based Adventure Game \n===========================\n\nCommands:\n  go [direction]\n  quit\n  \n===========================\n''')\n\ndef show_status():\n    \"\"\"\n    Prints the player's current status, including the current room, inventory, room description, obstacle (if any), and available exits.\n    \"\"\"\n    print('---------------------------')\n    print('You are in the ' + current_room)\n    print('Inventory : ' + str(inventory))\n    print(rooms[current_room]['desc'])\n    if 'obstacle' in rooms[current_room]:\n        print('Obstacle : ' + rooms[current_room]['obstacle'])\n    print('Exits : ' + ','.join(rooms[current_room]['exits'].keys()))\n    print('---------------------------')\n\n# Initialize inventory and rooms dictionary\ninventory = []\nrooms = {\n    'Hall': {\n        'desc': 'You are standing in a dark and spooky hallway with a closed door to the north and another one to the east.',\n        'exits': {'north': 'Kitchen', 'east': 'Dining Room'}\n    },\n    'Kitchen': {\n        'desc': 'You are in the Kitchen. The only exit is the southern door.',\n        'exits': {'south': 'Hall'},\n        'obstacle': 'monster'\n    },\n    'Dining Room': {\n        'desc': 'You are in the Dining Room. The only exit is the western door',\n        'exits': {'west': 'Hall'},\n        'key': 'magic key'\n    },\n    'Secret Room': {\n        'desc': 'Congratulations! You have found the secret room and won the game. To leave, find the southern door.',\n        'exits': {'south': ''},\n        'treasure': 'gold'\n    }\n}\n\n# Start the player in the Hall\ncurrent_room = 'Hall'\n\n# Display instructions\nshow_instructions()\n\n# Main game loop\nwhile True:\n    show_status()\n    move = input('> ').lower().split(None, 1)\n\n    if move[0] == 'go':\n        if move[1] in rooms[current_room]['exits']:\n            current_room = rooms[current_room]['exits'][move[1]]\n        else:\n            print('You can\\'t go that way!')\n\n    if move[0] == 'quit':\n        print('You have quit the game.')\n        break\n\n    if current_room == 'Kitchen' and 'obstacle' in rooms[current_room]:\n        action = input('> ').lower()\n        if action in ['fight', 'kill']:\n            if 'sword' in inventory:\n                print('You fought the monster off with your sword and continue exploring.')\n                del rooms[current_room]['obstacle']\n                inventory.remove('sword')\n            else:\n                print('Unfortunately, you do not have a sword and the monster ate you.')\n                break\n        elif action == 'run':\n            print('You run back to the Hall.')\n            current_room = 'Hall'\n        else:\n            print('Invalid action!')\n            continue\n\n    if current_room == 'Dining Room' and 'key' in rooms[current_room]:\n        print('You found a magic key in the Dining Room!')\n        inventory.append('magic key')\n        del rooms[current_room]['key']\n\n    if current_room == 'Hall' and 'magic key' in inventory:\n        print('You have used the magic key to unlock the hidden door!')\n        rooms[current_room]['exits']['north'] = 'Secret Room'\n\n    if current_room == 'Secret Room':\n        print('You have found the secret room and the golden treasure! You win!')\n        break\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert current_room == 'Hall'\\n\", \"\\nassert 'north' in rooms['Hall']['exits']\\n\", \"\\nassert 'east' in rooms['Hall']['exits']\\n\", \"\\nassert 'south' in rooms['Kitchen']['exits']\\n\", \"\\nassert 'west' in rooms['Dining Room']['exits']\\n\", \"\\nassert 'obstacle' in rooms['Kitchen']\\n\", \"\\nassert 'key' in rooms['Dining Room']\\n\", \"\\nassert 'treasure' in rooms['Secret Room']\\n\", \"\\nassert 'magic key' not in inventory\\n\", \"\\nassert 'north' not in rooms['Hall']['exits'] or 'magic key' in inventory\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function named `validate_input` that will repeatedly prompt the user for a numeric input until a valid number within specified constraints is entered. The function should adhere to the following parameters:\n\n- `prompt`: A string message to display to the user for input.\n- `lower_limit`: The minimum allowable value for the input.\n- `upper_limit`: The maximum allowable value for the input.\n- `greater_equal`: A boolean indicating whether the input must be greater than or equal to (`True`) or strictly greater than (`False`) the `lower_limit`, and less than or equal to (`True`) or strictly less than (`False`) the `upper_limit`.\n- `allow_zero`: A boolean indicating whether the input value of zero is permitted.\n\nThe function should return the valid input once it is received. If the input is invalid (either not a number or not within the specified range), the function should print an appropriate error message and prompt the user again.\n\n**Sample Input/Output:**\n\nFor the following call:\n```python\nvalue = validate_input(\"Enter a number between 1 and 10 (inclusive): \", 1, 10, True, False)\n```\nIf the user inputs `0`, the output should be:\n```\nZero is not allowed.\nEnter a number between 1 and 10 (inclusive): \n```\nIf the user inputs `5`, the output should be:\n```\nYou entered: 5\n```",
    "output": "def validate_input(prompt, lower_limit, upper_limit, greater_equal, allow_zero):\n    \"\"\"\n    Prompts the user for a numeric input within specified constraints.\n\n    Parameters:\n    - prompt (str): The message to display to the user.\n    - lower_limit (float): The minimum allowable value.\n    - upper_limit (float): The maximum allowable value.\n    - greater_equal (bool): Whether the input must be greater than or equal to the lower_limit.\n    - allow_zero (bool): Whether the input value of zero is permitted.\n\n    Returns:\n    - float: The valid input number.\n    \"\"\"\n    while True:\n        try:\n            user_input = float(input(prompt))\n            if user_input == 0 and not allow_zero:\n                print(\"Zero is not allowed.\")\n                continue\n            if greater_equal:\n                if lower_limit <= user_input <= upper_limit:\n                    return user_input\n            else:\n                if lower_limit < user_input < upper_limit:\n                    return user_input\n            print(f\"Input must be {'greater than or equal to' if greater_equal else 'greater than'} {lower_limit} and {'less than or equal to' if greater_equal else 'less than'} {upper_limit}.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a numeric value.\")\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input(\\\"Enter a number between 1 and 10 (inclusive): \\\", 1, 10, True, False) == 5\\n\", \"\\nassert validate_input(\\\"Enter a number between 1 and 10 (exclusive): \\\", 1, 10, False, False) == 5.5\\n\", \"\\nassert validate_input(\\\"Enter a number between 1 and 10 (inclusive): \\\", 1, 10, True, True) == 0\\n\", \"\\nassert validate_input(\\\"Enter a number between 1 and 10 (exclusive): \\\", 1, 10, False, True) == 1.1\\n\", \"\\nassert validate_input(\\\"Enter a number between -5 and 5 (inclusive): \\\", -5, 5, True, False) == -3\\n\", \"\\nassert validate_input(\\\"Enter a number between -5 and 5 (exclusive): \\\", -5, 5, False, False) == -2.5\\n\", \"\\nassert validate_input(\\\"Enter a number between 0 and 1 (inclusive): \\\", 0, 1, True, True) == 1\\n\", \"\\nassert validate_input(\\\"Enter a number between 0 and 1 (exclusive): \\\", 0, 1, False, False) == 0.5\\n\", \"\\nassert validate_input(\\\"Enter a number between 10 and 20 (inclusive): \\\", 10, 20, True, False) == 10\\n\", \"\\nassert validate_input(\\\"Enter a number between 10 and 20 (exclusive): \\\", 10, 20, False, False) == 15\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple slot machine game simulation. The slot machine consists of three reels, each displaying a random symbol from a predefined set of symbols: [\"Cherry\", \"Lemon\", \"Orange\", \"Plum\", \"Bell\", \"Bar\"]. The player can spin the reels and wins if all three reels display the same symbol. The program should simulate the spinning of the reels and determine if the player has won or lost. The player can choose to spin the reels multiple times.\n\n**Input:**\n- The input consists of multiple lines, each containing a single character 'y' or 'n'.\n- 'y' indicates that the player wants to spin the reels again.\n- 'n' indicates that the player wants to stop playing.\n\n**Output:**\n- For each spin, output the symbols on each reel in the format: \"Reels: X | Y | Z\"\n- If all three symbols are the same, output: \"Congratulations! You've won!\"\n- Otherwise, output: \"Sorry, you've lost. Try again!\"\n- After each spin, prompt the player to play again with the message: \"Do you want to play again? (y/n): \"\n- When the player decides to stop, output: \"Thank you for playing!\"\n\n**Sample Input:**\n```\ny\ny\nn\n```\n\n**Sample Output:**\n```\nWelcome to the Slot Machine!\nPress Enter to spin the reels...\nReels: Cherry | Cherry | Cherry\nCongratulations! You've won!\nDo you want to play again? (y/n): \nPress Enter to spin the reels...\nReels: Bell | Orange | Bell\nSorry, you've lost. Try again!\nDo you want to play again? (y/n): \nThank you for playing!\n```",
    "output": "import random\n\nsymbols = [\"Cherry\", \"Lemon\", \"Orange\", \"Plum\", \"Bell\", \"Bar\"]\n\ndef spin():\n    \"\"\"\n    Simulate spinning the slot machine reels.\n    \n    Returns:\n        list: A list of three symbols representing the result of the spin.\n    \"\"\"\n    return [random.choice(symbols) for _ in range(3)]\n\ndef check_win(reels):\n    \"\"\"\n    Check if the player has won the slot machine game.\n    \n    Args:\n        reels (list): A list of three symbols representing the result of the spin.\n    \n    Returns:\n        bool: True if all three symbols are the same, False otherwise.\n    \"\"\"\n    return reels[0] == reels[1] == reels[2]\n\ndef play_slot_machine():\n    \"\"\"\n    Run the slot machine game, allowing the player to spin the reels and check for wins.\n    \"\"\"\n    print(\"Welcome to the Slot Machine!\")\n    while True:\n        input(\"Press Enter to spin the reels...\")\n        reels = spin()\n        print(f\"Reels: {reels[0]} | {reels[1]} | {reels[2]}\")\n        if check_win(reels):\n            print(\"Congratulations! You've won!\")\n        else:\n            print(\"Sorry, you've lost. Try again!\")\n        play_again = input(\"Do you want to play again? (y/n): \").lower()\n        if play_again != 'y':\n            break\n    print(\"Thank you for playing!\")\n\nif __name__ == \"__main__\":\n    play_slot_machine()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert len(spin()) == 3\\n\", \"\\nassert all(symbol in symbols for symbol in spin())\\n\", \"\\nassert check_win([\\\"Cherry\\\", \\\"Cherry\\\", \\\"Cherry\\\"]) == True\\n\", \"\\nassert check_win([\\\"Lemon\\\", \\\"Lemon\\\", \\\"Lemon\\\"]) == True\\n\", \"\\nassert check_win([\\\"Orange\\\", \\\"Orange\\\", \\\"Orange\\\"]) == True\\n\", \"\\nassert check_win([\\\"Plum\\\", \\\"Plum\\\", \\\"Plum\\\"]) == True\\n\", \"\\nassert check_win([\\\"Bell\\\", \\\"Bell\\\", \\\"Bell\\\"]) == True\\n\", \"\\nassert check_win([\\\"Bar\\\", \\\"Bar\\\", \\\"Bar\\\"]) == True\\n\", \"\\nassert check_win([\\\"Cherry\\\", \\\"Lemon\\\", \\\"Orange\\\"]) == False\\n\", \"\\nassert check_win([\\\"Plum\\\", \\\"Bell\\\", \\\"Bar\\\"]) == False\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python program that reads a positive integer `n` from the standard input and outputs the first `n` prime numbers. Your program should handle invalid inputs gracefully by displaying an appropriate error message.\n\n**Input:**\n- The first line of the input contains a single integer `n` (1 \u2264 n \u2264 100).\n\n**Output:**\n- Print the first `n` prime numbers separated by spaces.\n\n**Sample Input:**\n```\n5\n```\n\n**Sample Output:**\n```\n2 3 5 7 11\n```",
    "output": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \n    :param num: Integer to check for primality.\n    :return: True if num is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    \"\"\"\n    Generate the first n prime numbers.\n    \n    :param n: Number of prime numbers to generate.\n    :return: List of the first n prime numbers.\n    \"\"\"\n    count = 0\n    num = 2\n    primes = []\n    while count < n:\n        if is_prime(num):\n            primes.append(num)\n            count += 1\n        num += 1\n    return primes\n\ndef main():\n    \"\"\"\n    Main function to read input, compute the first n prime numbers, and print them.\n    \"\"\"\n    try:\n        n = int(input().strip())\n        if n <= 0:\n            print(\"Please enter a positive integer.\")\n        else:\n            primes = first_n_primes(n)\n            print(\" \".join(map(str, primes)))\n    except ValueError:\n        print(\"Invalid input. Please enter a positive integer.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert first_n_primes(1) == [2]\\n\", \"\\nassert first_n_primes(2) == [2, 3]\\n\", \"\\nassert first_n_primes(3) == [2, 3, 5]\\n\", \"\\nassert first_n_primes(4) == [2, 3, 5, 7]\\n\", \"\\nassert first_n_primes(5) == [2, 3, 5, 7, 11]\\n\", \"\\nassert first_n_primes(6) == [2, 3, 5, 7, 11, 13]\\n\", \"\\nassert first_n_primes(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\\n\", \"\\nassert first_n_primes(0) == []\\n\", \"\\nassert first_n_primes(-5) == []\\n\", \"\\nassert first_n_primes(20) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple banking system in Python. Your program should support the following operations:\n\n1. Create a `BankAccount` class with attributes for the account holder's name, account number, and balance.\n2. Implement methods to deposit and withdraw money from the account.\n3. Implement a method to display the account holder's name, account number, and balance.\n4. Allow the user to create multiple bank accounts and perform transactions on them.\n5. Ensure that users cannot withdraw more money than is available in the account and that account numbers are unique.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of operations.\n- Each of the next `n` lines contains an operation in one of the following formats:\n  - `CREATE name account_number [initial_balance]`: Create a new bank account with the given name, account number, and optional initial balance (default is 0.0).\n  - `DEPOSIT account_number amount`: Deposit the specified amount into the account with the given account number.\n  - `WITHDRAW account_number amount`: Withdraw the specified amount from the account with the given account number.\n  - `DISPLAY account_number`: Display the account holder's name, account number, and balance for the account with the given account number.\n\n**Output:**\n- For each `DEPOSIT`, `WITHDRAW`, and `DISPLAY` operation, print the appropriate message as specified in the methods.\n- For `CREATE` operations, print an error message if the account number is not unique.\n\n**Sample Input:**\n```\n6\nCREATE Alice 123456 1000.0\nCREATE Bob 654321 500.0\nDISPLAY 123456\nDEPOSIT 123456 200.0\nWITHDRAW 123456 150.0\nWITHDRAW 654321 600.0\n```\n\n**Sample Output:**\n```\nName: Alice\nAccount Number: 123456\nBalance: $1000.00\nDeposited $200.00. New balance: $1200.00.\nWithdrew $150.00. New balance: $1050.00.\nInsufficient funds.\n```",
    "output": "class BankAccount:\n    account_numbers = set()\n\n    def __init__(self, name, account_number, initial_balance=0.0):\n        \"\"\"\n        Initialize a new bank account with a unique account number.\n        \n        :param name: The name of the account holder.\n        :param account_number: The unique account number.\n        :param initial_balance: The initial balance of the account (default is 0.0).\n        :raises ValueError: If the account number is not unique.\n        \"\"\"\n        if account_number in BankAccount.account_numbers:\n            raise ValueError(\"Account number must be unique.\")\n        self.name = name\n        self.account_number = account_number\n        self.balance = initial_balance\n        BankAccount.account_numbers.add(account_number)\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount into the account.\n        \n        :param amount: The amount to deposit.\n        \"\"\"\n        if amount <= 0:\n            print(\"Deposit amount must be positive.\")\n            return\n        self.balance += amount\n        print(f\"Deposited ${amount:.2f}. New balance: ${self.balance:.2f}.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount from the account.\n        \n        :param amount: The amount to withdraw.\n        \"\"\"\n        if amount <= 0:\n            print(\"Withdrawal amount must be positive.\")\n            return\n        if amount > self.balance:\n            print(\"Insufficient funds.\")\n            return\n        self.balance -= amount\n        print(f\"Withdrew ${amount:.2f}. New balance: ${self.balance:.2f}.\")\n\n    def display_account_info(self):\n        \"\"\"\n        Display the account holder's name, account number, and balance.\n        \"\"\"\n        print(f\"Name: {self.name}\")\n        print(f\"Account Number: {self.account_number}\")\n        print(f\"Balance: ${self.balance:.2f}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    accounts = {}\n    \n    for line in data[1:]:\n        command, *args = line.split()\n        if command == \"CREATE\":\n            name, account_number = args[:2]\n            initial_balance = float(args[2]) if len(args) > 2 else 0.0\n            try:\n                accounts[account_number] = BankAccount(name, account_number, initial_balance)\n            except ValueError as e:\n                print(e)\n        elif command == \"DEPOSIT\":\n            account_number, amount = args\n            accounts[account_number].deposit(float(amount))\n        elif command == \"WITHDRAW\":\n            account_number, amount = args\n            accounts[account_number].withdraw(float(amount))\n        elif command == \"DISPLAY\":\n            account_number = args[0]\n            accounts[account_number].display_account_info()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert BankAccount(\\\"Alice\\\", \\\"123456\\\").balance == 0.0\\n\", \"\\nassert BankAccount(\\\"Bob\\\", \\\"654321\\\", 500.0).balance == 500.0\\n\", \"\\naccount = BankAccount(\\\"Charlie\\\", \\\"111111\\\", 100.0); account.deposit(50); assert account.balance == 150.0\\n\", \"\\naccount = BankAccount(\\\"David\\\", \\\"222222\\\", 200.0); account.withdraw(100); assert account.balance == 100.0\\n\", \"\\naccount = BankAccount(\\\"Eve\\\", \\\"333333\\\", 300.0); account.withdraw(400); assert account.balance == 300.0\\n\", \"\\naccount = BankAccount(\\\"Frank\\\", \\\"444444\\\", 100.0); account.deposit(-50); assert account.balance == 100.0\\n\", \"\\naccount = BankAccount(\\\"Grace\\\", \\\"555555\\\", 100.0); account.withdraw(-50); assert account.balance == 100.0\\n\", \"\\ntry: BankAccount(\\\"Hannah\\\", \\\"123456\\\"); assert False except ValueError: assert True\\n\", \"\\naccount = BankAccount(\\\"Ivy\\\", \\\"666666\\\", 100.0); account.deposit(100); account.withdraw(200); assert account.balance == 100.0\\n\", \"\\naccount = BankAccount(\\\"Jack\\\", \\\"777777\\\", 100.0); account.deposit(100); account.withdraw(50); assert account.balance == 150.0\\n\"]"
  },
  {
    "input": "You are given a list of integers. Your task is to write a Python program that calculates and outputs the sum, average, maximum, and minimum of these integers. Implement a function `calculate_statistics` that takes a list of integers as input and returns a dictionary with keys \"sum\", \"average\", \"max\", and \"min\" corresponding to the calculated values. If the list is empty, the function should return 0 for sum and average, and `None` for max and min.\n\n**Input:**\n- A single line of space-separated integers.\n\n**Output:**\n- Four lines of output, each containing the sum, average, maximum, and minimum of the integers, respectively.\n\n**Sample Input:**\n```\n3 5 1 9 2\n```\n\n**Sample Output:**\n```\n10\n4.0\n9\n1\n```",
    "output": "def calculate_statistics(numbers):\n    \"\"\"\n    Calculate the sum, average, maximum, and minimum of a list of integers.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    dict: A dictionary with keys 'sum', 'average', 'max', and 'min'.\n    \"\"\"\n    if not numbers:\n        return {\"sum\": 0, \"average\": 0, \"max\": None, \"min\": None}\n    \n    total_sum = sum(numbers)\n    avg = total_sum / len(numbers)\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return {\"sum\": total_sum, \"average\": avg, \"max\": max_value, \"min\": min_value}\n\ndef main():\n    try:\n        input_numbers = input().strip()\n        numbers = list(map(int, input_numbers.split()))\n        stats = calculate_statistics(numbers)\n        print(stats['sum'])\n        print(stats['average'])\n        print(stats['max'])\n        print(stats['min'])\n    except ValueError:\n        print(\"Invalid input. Please enter only integers separated by spaces.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_statistics([1, 2, 3, 4, 5]) == {\\\"sum\\\": 15, \\\"average\\\": 3.0, \\\"max\\\": 5, \\\"min\\\": 1}\\n\", \"\\nassert calculate_statistics([10, 20, 30]) == {\\\"sum\\\": 60, \\\"average\\\": 20.0, \\\"max\\\": 30, \\\"min\\\": 10}\\n\", \"\\nassert calculate_statistics([-1, -2, -3, -4]) == {\\\"sum\\\": -10, \\\"average\\\": -2.5, \\\"max\\\": -1, \\\"min\\\": -4}\\n\", \"\\nassert calculate_statistics([5]) == {\\\"sum\\\": 5, \\\"average\\\": 5.0, \\\"max\\\": 5, \\\"min\\\": 5}\\n\", \"\\nassert calculate_statistics([]) == {\\\"sum\\\": 0, \\\"average\\\": 0, \\\"max\\\": None, \\\"min\\\": None}\\n\", \"\\nassert calculate_statistics([100, 200, 300, 400, 500]) == {\\\"sum\\\": 1500, \\\"average\\\": 300.0, \\\"max\\\": 500, \\\"min\\\": 100}\\n\", \"\\nassert calculate_statistics([0, 0, 0, 0]) == {\\\"sum\\\": 0, \\\"average\\\": 0.0, \\\"max\\\": 0, \\\"min\\\": 0}\\n\", \"\\nassert calculate_statistics([10, -10, 20, -20]) == {\\\"sum\\\": 0, \\\"average\\\": 0.0, \\\"max\\\": 20, \\\"min\\\": -20}\\n\", \"\\nassert calculate_statistics([1000]) == {\\\"sum\\\": 1000, \\\"average\\\": 1000.0, \\\"max\\\": 1000, \\\"min\\\": 1000}\\n\", \"\\nassert calculate_statistics([1, 1, 1, 1, 1]) == {\\\"sum\\\": 5, \\\"average\\\": 1.0, \\\"max\\\": 1, \\\"min\\\": 1}\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `confirm_action` that simulates a user confirmation process. The function should prompt the user with a given message and request a yes or no response. The user has a maximum of three attempts to provide a valid response. If a valid response is not received within three attempts, the function should raise a `ValueError`. The function should return `True` if the user responds with 'yes', and `False` if the user responds with 'no'. The input to the function will be a string `prompt` which is the message to be displayed to the user.\n\n**Sample Input/Output:**\n\n- Input: `confirm_action(\"Do you want to proceed?\")`\n  - User Input: `maybe`\n  - User Input: `no`\n  - Output: `False`\n  \n- Input: `confirm_action(\"Are you sure?\")`\n  - User Input: `yes`\n  - Output: `True`\n  \n- Input: `confirm_action(\"Confirm action?\")`\n  - User Input: `y`\n  - User Input: `n`\n  - User Input: `yes`\n  - Output: `True`\n  \n- Input: `confirm_action(\"Execute?\")`\n  - User Input: `invalid`\n  - User Input: `wrong`\n  - User Input: `incorrect`\n  - Exception: `ValueError(\"Maximum number of attempts reached. Invalid input.\")`",
    "output": "def confirm_action(prompt):\n    \"\"\"\n    Prompts the user with a yes/no question and returns True for 'yes' and False for 'no'.\n    Limits the user to three attempts to provide a valid response.\n    \n    :param prompt: The message to be displayed to the user.\n    :return: True if the user responds with 'yes', False if the user responds with 'no'.\n    :raises ValueError: If the user does not provide a valid response within three attempts.\n    \"\"\"\n    attempts = 3\n    while attempts > 0:\n        response = input(f\"{prompt} (yes/no): \").strip().lower()\n        if response in ['yes', 'no']:\n            return response == 'yes'\n        attempts -= 1\n        print(f\"Invalid input. Please enter 'yes' or 'no'. {attempts} attempts remaining.\")\n    raise ValueError(\"Maximum number of attempts reached. Invalid input.\")\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert confirm_action(\\\"Do you want to proceed?\\\") == True\\n\", \"\\nassert confirm_action(\\\"Do you want to proceed?\\\") == False\\n\", \"\\nassert confirm_action(\\\"Are you sure?\\\") == True\\n\", \"\\nassert confirm_action(\\\"Are you sure?\\\") == False\\n\", \"\\nassert confirm_action(\\\"Confirm action\\\") == True\\n\", \"\\nassert confirm_action(\\\"Confirm action\\\") == False\\n\", \"\\nassert confirm_action(\\\"Proceed?\\\") == True\\n\", \"\\nassert confirm_action(\\\"Proceed?\\\") == False\\n\", \"\\nassert confirm_action(\\\"Do you wish to continue?\\\") == True\\n\", \"\\nassert confirm_action(\\\"Do you wish to continue?\\\") == False\\n\"]"
  },
  {
    "input": "You are given a binary search tree (BST) and a value to insert. Your task is to insert the value into the BST. The BST does not allow duplicate values. Implement a function to perform the insertion and return the updated BST as an in-order traversal list.\n\n**Input:**\n- The first line contains a space-separated list of integers representing the initial BST.\n- The second line contains a single integer representing the value to be inserted.\n\n**Output:**\n- A space-separated list of integers representing the in-order traversal of the updated BST.\n\n**Sample Input:**\n```\n5 3 7 2 4 6 8\n9\n```\n\n**Sample Output:**\n```\n2 3 4 5 6 7 8 9\n```",
    "output": "class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        \"\"\"\n        Inserts a value into the BST.\n        \n        :param value: The value to be inserted.\n        \"\"\"\n        if not self.root:\n            self.root = TreeNode(value)\n        else:\n            self._insert_recursively(self.root, value)\n\n    def _insert_recursively(self, node, value):\n        \"\"\"\n        Helper function to insert a value recursively.\n        \n        :param node: The current node in the BST.\n        :param value: The value to be inserted.\n        \"\"\"\n        if value < node.value:\n            if node.left is None:\n                node.left = TreeNode(value)\n            else:\n                self._insert_recursively(node.left, value)\n        elif value > node.value:\n            if node.right is None:\n                node.right = TreeNode(value)\n            else:\n                self._insert_recursively(node.right, value)\n\n    def inorder_traversal(self, node, traversal):\n        \"\"\"\n        Performs an in-order traversal of the BST.\n        \n        :param node: The current node in the BST.\n        :param traversal: A list to store the in-order traversal.\n        \"\"\"\n        if node is not None:\n            self.inorder_traversal(node.left, traversal)\n            traversal.append(node.value)\n            self.inorder_traversal(node.right, traversal)\n\n    def to_list(self):\n        \"\"\"\n        Returns the BST as an in-order traversal list.\n        \n        :return: A list representing the in-order traversal of the BST.\n        \"\"\"\n        traversal = []\n        self.inorder_traversal(self.root, traversal)\n        return traversal\n\n# Sample Usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    initial_values = list(map(int, data[:-1]))\n    value_to_insert = int(data[-1])\n    \n    bst = BST()\n    for value in initial_values:\n        bst.insert(value)\n    bst.insert(value_to_insert)\n    print(' '.join(map(str, bst.to_list())))\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert BST().to_list() == []\\n\", \"\\nassert BST().insert(10).to_list() == [10]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); assert bst.to_list() == [3, 5]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(7); assert bst.to_list() == [5, 7]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(2); assert bst.to_list() == [2, 3, 5, 7]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(4); assert bst.to_list() == [3, 4, 5, 7]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(6); assert bst.to_list() == [3, 5, 6, 7]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(8); assert bst.to_list() == [3, 5, 7, 8]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(2); bst.insert(4); bst.insert(6); bst.insert(8); assert bst.to_list() == [2, 3, 4, 5, 6, 7, 8]\\n\", \"\\nbst = BST(); bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(2); bst.insert(4); bst.insert(6); bst.insert(8); bst.insert(1); assert bst.to_list() == [1, 2, 3, 4, 5, 6, 7, 8]\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple ticket booking system for a movie theater. The theater has a fixed number of rows and seats per row. Users can view available seats, book seats, and cancel bookings. The system should handle invalid inputs gracefully.\n\n**Input:**\n- The first line contains two integers `rows` and `seats_per_row` representing the number of rows and seats per row in the theater.\n- The subsequent lines contain commands to interact with the system:\n  - `BOOK row seat`: Attempt to book a seat at the specified row and seat number.\n  - `CANCEL row seat`: Attempt to cancel a booking at the specified row and seat number.\n  - `DISPLAY`: Display the current seat layout.\n  - `EXIT`: Terminate the program.\n\n**Output:**\n- For each `BOOK` command, print \"Seat booked successfully!\" if the seat is available, otherwise print \"This seat is already booked. Please choose another one.\"\n- For each `CANCEL` command, print \"Booking cancelled successfully!\" if the seat was booked, otherwise print \"This seat was not booked. Please enter correct seat number.\"\n- For each `DISPLAY` command, print the current seat layout with 'O' for available seats and 'X' for booked seats.\n- For invalid row or seat numbers, print \"Invalid seat number.\"\n\n**Sample Input:**\n```\n5 10\nDISPLAY\nBOOK 2 3\nBOOK 2 3\nDISPLAY\nCANCEL 2 3\nDISPLAY\nEXIT\n```\n\n**Sample Output:**\n```\nCurrent Seat Layout: \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \n\nSeat booked successfully!\nThis seat is already booked. Please choose another one.\n\nCurrent Seat Layout: \nO O O O O O O O O O \nO O O X O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \n\nBooking cancelled successfully!\n\nCurrent Seat Layout: \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \nO O O O O O O O O O \n```",
    "output": "def display_seats(rows, seats_per_row, booked_seats):\n    \"\"\"\n    Display the current seat layout with 'O' for available seats and 'X' for booked seats.\n    \"\"\"\n    print(\"\\nCurrent Seat Layout: \\n\")\n    for row in range(rows):\n        for seat in range(seats_per_row):\n            print(\"X\" if (row, seat) in booked_seats else \"O\", end=\" \")\n        print()\n\n\ndef book_seat(rows, seats_per_row, booked_seats, row, seat):\n    \"\"\"\n    Attempt to book a seat at the specified row and seat number.\n    \"\"\"\n    if (row, seat) in booked_seats:\n        print(\"This seat is already booked. Please choose another one.\")\n        return\n    if row >= rows or seat >= seats_per_row or row < 0 or seat < 0:\n        print(\"Invalid seat number.\")\n        return\n    booked_seats.add((row, seat))\n    print(\"Seat booked successfully!\")\n    display_seats(rows, seats_per_row, booked_seats)\n\n\ndef cancel_booking(rows, seats_per_row, booked_seats, row, seat):\n    \"\"\"\n    Attempt to cancel a booking at the specified row and seat number.\n    \"\"\"\n    if (row, seat) not in booked_seats:\n        print(\"This seat was not booked. Please enter correct seat number.\")\n        return\n    booked_seats.remove((row, seat))\n    print(\"Booking cancelled successfully!\")\n    display_seats(rows, seats_per_row, booked_seats)\n\n\ndef main():\n    rows, seats_per_row = map(int, input().split())\n    booked_seats = set()\n    print(\"Welcome to the Movie Theater Booking System\")\n    print(f\"Total Seats: {rows * seats_per_row}\\n\")\n\n    display_seats(rows, seats_per_row, booked_seats)\n\n    while True:\n        command = input().strip().split()\n        if command[0] == \"BOOK\":\n            book_seat(rows, seats_per_row, booked_seats, int(command[1]), int(command[2]))\n        elif command[0] == \"CANCEL\":\n            cancel_booking(rows, seats_per_row, booked_seats, int(command[1]), int(command[2]))\n        elif command[0] == \"DISPLAY\":\n            display_seats(rows, seats_per_row, booked_seats)\n        elif command[0] == \"EXIT\":\n            print(\"Thank you for using the Movie Theater Booking System\")\n            break\n        else:\n            print(\"Invalid command. Please enter a valid command.\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert display_seats(3, 3, set()) == None\\n\", \"\\nassert display_seats(3, 3, {(0, 0), (1, 1), (2, 2)}) == None\\n\", \"\\nassert book_seat(3, 3, set()) == None\\n\", \"\\nassert book_seat(3, 3, {(0, 0)}) == None\\n\", \"\\nassert book_seat(3, 3, {(0, 0), (1, 1)}) == None\\n\", \"\\nassert cancel_booking(3, 3, {(0, 0)}) == None\\n\", \"\\nassert cancel_booking(3, 3, {(0, 0), (1, 1)}) == None\\n\", \"\\nassert book_seat(3, 3, {(0, 0), (1, 1), (2, 2)}) == None\\n\", \"\\nassert cancel_booking(3, 3, set()) == None\\n\", \"\\nassert book_seat(3, 3, {(0, 0), (1, 1), (2, 2)}) == None\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `convert_input` that processes an input value and returns a flattened list of strings. The input can be of any type, including nested lists and tuples. Your function should recursively flatten any nested structures and convert each element to a string.\n\n**Input:**\n- A single value which can be of any type, including nested lists and tuples.\n\n**Output:**\n- A list of strings, where each element of the original input (including nested elements) is converted to a string.\n\n**Sample Input:**\n```python\n[1, 2.5, [3, '4'], ('5', (6, 7.5))]\n```\n\n**Sample Output:**\n```python\n['1', '2.5', '3', '4', '5', '6', '7.5']\n```",
    "output": "def convert_input(input_value):\n    \"\"\"\n    Flattens the input value and converts each element to a string.\n    \n    Args:\n    input_value: A value which can be of any type, including nested lists and tuples.\n    \n    Returns:\n    A list of strings, where each element of the original input is converted to a string.\n    \"\"\"\n    def flatten_and_convert(value):\n        if isinstance(value, (list, tuple)):\n            for item in value:\n                yield from flatten_and_convert(item)\n        else:\n            yield str(value)\n\n    return list(flatten_and_convert(input_value))\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert convert_input(42) == ['42']\\n\", \"\\nassert convert_input(3.14) == ['3.14']\\n\", \"\\nassert convert_input(\\\"hello\\\") == ['hello']\\n\", \"\\nassert convert_input([1, 2, 3]) == ['1', '2', '3']\\n\", \"\\nassert convert_input((1, 2, 3)) == ['1', '2', '3']\\n\", \"\\nassert convert_input([1, [2, 3], (4, 5)]) == ['1', '2', '3', '4', '5']\\n\", \"\\nassert convert_input((1, (2, (3, 4)))) == ['1', '2', '3', '4']\\n\", \"\\nassert convert_input([1, 2.5, [3, '4'], ('5', (6, 7.5))]) == ['1', '2.5', '3', '4', '5', '6', '7.5']\\n\", \"\\nassert convert_input([]) == []\\n\", \"\\nassert convert_input(()) == []\\n\"]"
  },
  {
    "input": "You are given a list of strings and a target string. Implement a linear search algorithm to find the index of the target string in the list. If the target string is found, output the index; otherwise, output -1 indicating the target string is not present in the list.\n\n**Input:**\n- The first line contains a space-separated list of strings.\n- The second line contains the target string to search for.\n\n**Output:**\n- A single integer representing the index of the target string if found, or -1 if not found.\n\n**Sample Input:**\n```\napple banana cherry date\nbanana\n```\n\n**Sample Output:**\n```\n1\n```\n\n**Sample Input:**\n```\ncat dog elephant\nfish\n```\n\n**Sample Output:**\n```\n-1\n```",
    "output": "def linear_search(strings_list, target):\n    \"\"\"\n    Perform a linear search for the target string in the list of strings.\n    \n    :param strings_list: List of strings to search within.\n    :param target: The string to search for.\n    :return: Index of the target string if found, otherwise -1.\n    \"\"\"\n    for index, value in enumerate(strings_list):\n        if value == target:\n            return index\n    return -1\n\ndef main():\n    \"\"\"\n    Main function to handle user input and output the result of the linear search.\n    \"\"\"\n    strings_list = input().split()\n    target = input()\n    index = linear_search(strings_list, target)\n    print(index)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert linear_search([\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"], \\\"banana\\\") == 1\\n\", \"\\nassert linear_search([\\\"dog\\\", \\\"cat\\\", \\\"mouse\\\"], \\\"elephant\\\") == -1\\n\", \"\\nassert linear_search([], \\\"anything\\\") == -1\\n\", \"\\nassert linear_search([\\\"same\\\", \\\"same\\\", \\\"same\\\"], \\\"same\\\") == 0\\n\", \"\\nassert linear_search([\\\"hello\\\", \\\"world\\\"], \\\"world\\\") == 1\\n\", \"\\nassert linear_search([\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\"], \\\"four\\\") == 3\\n\", \"\\nassert linear_search([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"], \\\"a\\\") == 0\\n\", \"\\nassert linear_search([\\\"repeat\\\", \\\"repeat\\\", \\\"repeat\\\"], \\\"repeat\\\") == 0\\n\", \"\\nassert linear_search([\\\"unique\\\"], \\\"unique\\\") == 0\\n\", \"\\nassert linear_search([\\\"find\\\", \\\"me\\\", \\\"now\\\"], \\\"now\\\") == 2\\n\"]"
  },
  {
    "input": "You are tasked with implementing a program that processes a JSON file named `books.json` containing a list of books. Each book entry includes the following fields: `title`, `author`, `publication_year`, and `genre`. Your program must support the following functionalities:\n\n1. **Search Functionality**: Allow users to search for books by either `title` or `author`. The search should be case-insensitive and return all matching books.\n2. **Sorting Functionality**: Provide an option to sort the search results by `publication_year` in ascending order.\n\nThe program should handle the following scenarios:\n- If the `books.json` file does not exist, print an error message: \"Error: The file books.json does not exist.\"\n- If the `books.json` file is not a valid JSON file, print an error message: \"Error: The file is not a valid JSON file.\"\n- If the search query does not match any books, print: \"No matching books found.\"\n- If the `publication_year` key is missing from any book entry during sorting, print an error message: \"Error: The key publication_year is not present in the book entries.\"\n\n**Sample Input (books.json):**\n```json\n[\n    {\"title\": \"The Great Gatsby\", \"author\": \"F. Scott Fitzgerald\", \"publication_year\": 1925, \"genre\": \"Novel\"},\n    {\"title\": \"1984\", \"author\": \"George Orwell\", \"publication_year\": 1949, \"genre\": \"Dystopian\"},\n    {\"title\": \"To Kill a Mockingbird\", \"author\": \"Harper Lee\", \"publication_year\": 1960, \"genre\": \"Fiction\"}\n]\n```\n\n**Sample Interaction:**\n```\nWhat would you like to do?\n1. Search for a book\n2. Stop the program\nEnter choice (1/2): 1\nEnter search query (title/author): harper\nSearch by (title/author): author\nMatching books found. Would you like to sort them?\nSort by publication year? (yes/no): yes\n\nSearch results:\nTitle: To Kill a Mockingbird, Author: Harper Lee, Publication Year: 1960, Genre: Fiction\nWhat would you like to do?\n1. Search for a book\n2. Stop the program\nEnter choice (1/2): 2\nGoodbye!\n```",
    "output": "import json\n\ndef load_books(filename):\n    \"\"\"\n    Load books from a JSON file into a list of dictionaries.\n    \n    Args:\n        filename (str): The name of the JSON file.\n    \n    Returns:\n        list: A list of dictionaries representing books.\n    \"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} does not exist.\")\n        return []\n    except json.JSONDecodeError:\n        print(\"Error: The file is not a valid JSON file.\")\n        return []\n\ndef search_books(books, query, search_by='title'):\n    \"\"\"\n    Search for books by either title or author.\n    \n    Args:\n        books (list): A list of dictionaries representing books.\n        query (str): The search query.\n        search_by (str): The field to search by ('title' or 'author').\n    \n    Returns:\n        list: A list of matching books.\n    \"\"\"\n    search_by = search_by.lower()\n    if search_by not in ['title', 'author']:\n        raise ValueError(\"search_by must be 'title' or 'author'.\")\n\n    query = query.lower()\n    return [book for book in books if query in book[search_by].lower()]\n\ndef sort_books(books, sort_key='publication_year'):\n    \"\"\"\n    Sort books by a given key.\n    \n    Args:\n        books (list): A list of dictionaries representing books.\n        sort_key (str): The key to sort by.\n    \n    Returns:\n        list: A sorted list of books.\n    \"\"\"\n    try:\n        return sorted(books, key=lambda book: book[sort_key])\n    except KeyError:\n        print(f\"Error: The key {sort_key} is not present in the book entries.\")\n        return books\n\ndef main():\n    books = load_books('books.json')\n    if not books:\n        return\n\n    while True:\n        print(\"\\nWhat would you like to do?\")\n        print(\"1. Search for a book\")\n        print(\"2. Stop the program\")\n        choice = input(\"Enter choice (1/2): \").strip()\n\n        if choice == '2':\n            print(\"Goodbye!\")\n            break\n        elif choice == '1':\n            search_query = input(\"Enter search query (title/author): \").strip()\n            search_by = input(\"Search by (title/author): \").strip().lower()\n\n            matching_books = search_books(books, search_query, search_by)\n\n            if matching_books:\n                print(\"\\nMatching books found. Would you like to sort them?\")\n                sort_choice = input(\"Sort by publication year? (yes/no): \").strip().lower()\n                if sort_choice in ['yes', 'y']:\n                    matching_books = sort_books(matching_books)\n\n                print(\"\\nSearch results:\")\n                for book in matching_books:\n                    print(f\"Title: {book['title']}, Author: {book['author']}, \"\n                          f\"Publication Year: {book['publication_year']}, Genre: {book['genre']}\")\n            else:\n                print(\"No matching books found.\")\n        else:\n            print(\"Invalid choice. Please enter 1 or 2.\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "tree_graph",
    "unit_tests": "[\"\\nassert load_books('books.json') == [{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}]\\n\", \"\\nassert search_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}], 'book') == [{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}]\\n\", \"\\nassert search_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}], 'Author A', 'author') == [{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}]\\n\", \"\\nassert search_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}], 'Non-Fiction', 'genre') == []\\n\", \"\\nassert sort_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}]) == [{'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}, {'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}]\\n\", \"\\nassert sort_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}], 'genre') == [{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}]\\n\", \"\\nassert load_books('nonexistent.json') == []\\n\", \"\\nassert search_books([], 'Book One') == []\\n\", \"\\nassert sort_books([], 'publication_year') == []\\n\", \"\\nassert search_books([{'title': 'Book One', 'author': 'Author A', 'publication_year': 2001, 'genre': 'Fiction'}, {'title': 'Book Two', 'author': 'Author B', 'publication_year': 1999, 'genre': 'Non-Fiction'}], 'book', 'invalid') == []\\n\"]"
  },
  {
    "input": "You are given a task to write a Python program that reads a CSV file and computes the average value of a specified column. The CSV file includes a header row, and the column name is provided as input. Your program must handle potential errors such as the file not being found or the column name being invalid. Use the `pandas` library for this task.\n\n**Input:**\n- The first line contains the path to the CSV file.\n- The second line contains the name of the column for which the average needs to be calculated.\n\n**Output:**\n- Print the average value of the specified column.\n- If the file is not found, print \"Error: The file '<file_path>' was not found.\"\n- If the file is empty, print \"Error: The file is empty.\"\n- If there is a problem parsing the file, print \"Error: There was a problem parsing the file.\"\n- If the column name is invalid, print \"Column '<column_name>' not found in the CSV file.\"\n- For any other unexpected errors, print \"An unexpected error occurred: <error_message>.\"\n\n**Sample Input:**\n```\ndata.csv\nage\n```\n\n**Sample Output:**\n```\nThe average value of the column 'age' is: 30.5\n```",
    "output": "import pandas as pd\n\ndef calculate_average_from_csv(file_path, column_name):\n    \"\"\"\n    Reads a CSV file and calculates the average value of a specified column.\n    \n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column to calculate the average for.\n    \n    Returns:\n    None\n    \"\"\"\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the column exists in the DataFrame\n        if column_name not in df.columns:\n            raise ValueError(f\"Column '{column_name}' not found in the CSV file.\")\n        \n        # Calculate the average of the specified column\n        average_value = df[column_name].mean()\n        print(f\"The average value of the column '{column_name}' is: {average_value}\")\n        \n    except FileNotFoundError:\n        print(f\"Error: The file '{file_path}' was not found.\")\n    except pd.errors.EmptyDataError:\n        print(\"Error: The file is empty.\")\n    except pd.errors.ParserError:\n        print(\"Error: There was a problem parsing the file.\")\n    except ValueError as ve:\n        print(ve)\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage:\n# file_path = input().strip()\n# column_name = input().strip()\n# calculate_average_from_csv(file_path, column_name)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_average_from_csv('data.csv', 'age') == None\\n\", \"\\nassert calculate_average_from_csv('non_existent_file.csv', 'age') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'non_existent_column') == None\\n\", \"\\nassert calculate_average_from_csv('empty_file.csv', 'age') == None\\n\", \"\\nassert calculate_average_from_csv('corrupted_file.csv', 'age') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'salary') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'height') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'weight') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'name') == None\\n\", \"\\nassert calculate_average_from_csv('data.csv', 'id') == None\\n\"]"
  },
  {
    "input": "You are given a sorted list of integers in ascending order and a target integer. Implement a binary search algorithm to find the index of the target integer in the list. If the target integer is not present in the list, return -1.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the list.\n- The second line contains `n` space-separated integers representing the sorted list.\n- The third line contains an integer `target`, the value to search for.\n\n**Output:**\n- Print the index of the target integer in the list (0-based indexing). If the target is not found, print -1.\n\n**Sample Input:**\n```\n10\n1 3 5 7 9 11 13 15 17 19\n7\n```\n\n**Sample Output:**\n```\n3\n```",
    "output": "def binary_search(arr, target):\n    \"\"\"\n    Perform binary search on a sorted list of integers to find the target value.\n\n    Parameters:\n    arr (List[int]): The sorted list of integers.\n    target (int): The integer value to search for.\n\n    Returns:\n    int: The index of the target value in the list, or -1 if the target is not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        middle = (low + high) // 2\n        if arr[middle] == target:\n            return middle\n        elif arr[middle] < target:\n            low = middle + 1\n        else:\n            high = middle - 1\n\n    return -1\n\n# Example usage:\nn = int(input())\nsorted_list = list(map(int, input().split()))\ntarget_value = int(input())\n\nindex = binary_search(sorted_list, target_value)\n\nprint(index)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert binary_search([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 7) == 3\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 1) == 0\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 19) == 9\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 10) == -1\\n\", \"\\nassert binary_search([], 10) == -1\\n\", \"\\nassert binary_search([1], 1) == 0\\n\", \"\\nassert binary_search([1, 2], 2) == 1\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 3) == 2\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 6) == -1\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4\\n\"]"
  },
  {
    "input": "You are tasked with writing a program that generates random numbers based on a user-specified probability distribution. Your program should support three types of distributions: normal, uniform, and exponential. The user will provide the type of distribution and the necessary parameters. Your program should output a list of 1000 random numbers generated according to the specified distribution.\n\n**Input:**\n- The first line contains a string representing the distribution type ('normal', 'uniform', 'exponential').\n- The second line contains the parameters for the distribution:\n  - For 'normal': two space-separated numbers representing the mean (mu) and standard deviation (sigma).\n  - For 'uniform': two space-separated numbers representing the low and high bounds.\n  - For 'exponential': one number representing the scale (lambda, the inverse rate parameter).\n\n**Output:**\n- A list of 1000 random numbers generated according to the specified distribution.\n\n**Sample Input 1:**\n```\nnormal\n0 1\n```\n\n**Sample Output 1:**\n```\n[0.26455563 0.54256004 0.77395654 ... -1.46958887  0.11562712 -0.49492992]\n```\n\n**Sample Input 2:**\n```\nuniform\n0 1\n```\n\n**Sample Output 2:**\n```\n[0.5488135  0.71518937 0.60276338 ... 0.43758721 0.891773  0.96366276]\n```\n\n**Sample Input 3:**\n```\nexponential\n1\n```\n\n**Sample Output 3:**\n```\n[0.59865848 0.71518937 0.60276338 ... 0.43758721 0.891773  0.96366276]\n```",
    "output": "import numpy as np\nimport sys\n\ndef generate_random_numbers(distribution, params, size=1000):\n    \"\"\"\n    Generates random numbers according to a specified probability distribution.\n    \n    Parameters:\n        distribution (str): The type of distribution ('normal', 'uniform', 'exponential').\n        params (dict): A dictionary of parameters specific to the distribution.\n                       For 'normal': mean (mu) and standard deviation (sigma).\n                       For 'uniform': low and high.\n                       For 'exponential': scale (lambda, the inverse rate parameter).\n        size (int): The number of random samples to generate.\n        \n    Returns:\n        np.ndarray: A numpy array of random numbers.\n    \"\"\"\n    if distribution == 'normal':\n        mu = params.get('mu', 0)\n        sigma = params.get('sigma', 1)\n        return np.random.normal(mu, sigma, size)\n    elif distribution == 'uniform':\n        low = params.get('low', 0)\n        high = params.get('high', 1)\n        if low > high:\n            print(\"Invalid range for uniform distribution (low must be less than high)\")\n            sys.exit(1)\n        return np.random.uniform(low, high, size)\n    elif distribution == 'exponential':\n        scale = params.get('scale', 1)\n        if scale <= 0:\n            print(\"Invalid scale for exponential distribution (must be positive)\")\n            sys.exit(1)\n        return np.random.exponential(scale, size)\n    else:\n        print(f\"Unsupported distribution type: {distribution}\")\n        sys.exit(1)\n\n# Example usage\nif __name__ == '__main__':\n    dist = input().strip()\n    params = list(map(float, input().strip().split()))\n    \n    if dist == 'normal':\n        coeffs = {'mu': params[0], 'sigma': params[1]}\n    elif dist == 'uniform':\n        coeffs = {'low': params[0], 'high': params[1]}\n    elif dist == 'exponential':\n        coeffs = {'scale': params[0]}\n    else:\n        print(f\"Unsupported distribution type: {dist}\")\n        sys.exit(1)\n    \n    random_numbers = generate_random_numbers(dist, coeffs, size=1000)\n    print(random_numbers)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert np.allclose(generate_random_numbers('normal', {'mu': 0, 'sigma': 1}, size=10), np.random.normal(0, 1, 10), atol=1.0)\\n\", \"\\nassert np.allclose(generate_random_numbers('uniform', {'low': 0, 'high': 1}, size=10), np.random.uniform(0, 1, 10), atol=1.0)\\n\", \"\\nassert np.allclose(generate_random_numbers('exponential', {'scale': 1}, size=10), np.random.exponential(1, 10), atol=1.0)\\n\", \"\\nassert generate_random_numbers('normal', {'mu': 5, 'sigma': 2}, size=1).mean() < 10\\n\", \"\\nassert generate_random_numbers('uniform', {'low': 1, 'high': 2}, size=1000).min() >= 1\\n\", \"\\nassert generate_random_numbers('uniform', {'low': 1, 'high': 2}, size=1000).max() <= 2\\n\", \"\\nassert generate_random_numbers('exponential', {'scale': 0.5}, size=1000).mean() > 0\\n\", \"\\nassert generate_random_numbers('normal', {'mu': 0, 'sigma': 0.1}, size=1000).std() < 0.5\\n\", \"\\nassert generate_random_numbers('uniform', {'low': -1, 'high': 1}, size=1000).mean() > -2\\n\", \"\\nassert generate_random_numbers('exponential', {'scale': 10}, size=1000).max() > 0\\n\"]"
  },
  {
    "input": "You are given a dictionary `data` representing user input data from a form, where each key-value pair corresponds to a form field and its respective user input. Implement a function `process_user_input` that takes this dictionary and a string `key` as parameters. The function should return the value associated with the `key` in the `data` dictionary after processing it according to the following rules:\n\n- If the `key` does not exist in the `data` dictionary, return the string 'INVALID'.\n- If the value associated with the `key` is an empty string or contains only whitespace characters, return the string 'EMPTY'.\n- If the value associated with the `key` is a palindrome (ignoring leading and trailing whitespace), return the string 'PALINDROME_FOUND'.\n- Otherwise, return the value associated with the `key`, with leading and trailing whitespace characters removed.\n\n**Sample Input:**\n```python\ndata = {'username': '  racecar  ', 'email': 'user@example.com', 'age': '  '}\nkey = 'username'\n```\n\n**Sample Output:**\n```\n'PALINDROME_FOUND'\n```\n\n**Sample Input:**\n```python\ndata = {'username': '  racecar  ', 'email': 'user@example.com', 'age': '  '}\nkey = 'email'\n```\n\n**Sample Output:**\n```\n'user@example.com'\n```\n\n**Sample Input:**\n```python\ndata = {'username': '  racecar  ', 'email': 'user@example.com', 'age': '  '}\nkey = 'age'\n```\n\n**Sample Output:**\n```\n'EMPTY'\n```\n\n**Sample Input:**\n```python\ndata = {'username': '  racecar  ', 'email': 'user@example.com', 'age': '  '}\nkey = 'password'\n```\n\n**Sample Output:**\n```\n'INVALID'\n```",
    "output": "def process_user_input(data, key):\n    \"\"\"\n    Processes the value associated with the given key in the data dictionary according to specific rules.\n    \n    Parameters:\n    data (dict): A dictionary representing user input data.\n    key (str): The key to look up in the data dictionary.\n    \n    Returns:\n    str: The processed value associated with the key, or a status string ('INVALID', 'EMPTY', 'PALINDROME_FOUND').\n    \"\"\"\n    if key not in data:\n        return 'INVALID'\n    \n    value = data[key].strip()\n    \n    if value == '':\n        return 'EMPTY'\n    \n    if value == value[::-1]:\n        return 'PALINDROME_FOUND'\n    \n    return value\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert process_user_input({'name': 'Alice'}, 'name') == 'Alice'\\n\", \"\\nassert process_user_input({'name': '  Alice  '}, 'name') == 'Alice'\\n\", \"\\nassert process_user_input({'name': ''}, 'name') == 'EMPTY'\\n\", \"\\nassert process_user_input({'name': '   '}, 'name') == 'EMPTY'\\n\", \"\\nassert process_user_input({'name': 'racecar'}, 'name') == 'PALINDROME_FOUND'\\n\", \"\\nassert process_user_input({'name': 'madam'}, 'name') == 'PALINDROME_FOUND'\\n\", \"\\nassert process_user_input({'name': 'level'}, 'name') == 'PALINDROME_FOUND'\\n\", \"\\nassert process_user_input({'name': 'hello'}, 'name') == 'hello'\\n\", \"\\nassert process_user_input({'name': 'world'}, 'age') == 'INVALID'\\n\", \"\\nassert process_user_input({}, 'name') == 'INVALID'\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `validate_input(input_data)` that checks if a given string represents a valid number in scientific notation. The function should be case-insensitive and allow for optional leading and trailing whitespace. The input string may contain a single decimal point and an optional exponent part, which can be denoted by 'e' or 'E'. The function should return `True` if the input is a valid scientific notation number, and `False` otherwise.\n\n**Sample Inputs and Outputs:**\n- Input: `\"1.5E3\"`  \n  Output: `True`\n- Input: `\"  3.14e-2 \"`  \n  Output: `True`\n- Input: `\"abc\"`  \n  Output: `False`\n- Input: `\"1.2.3\"`  \n  Output: `False`",
    "output": "import re\n\ndef validate_input(input_data):\n    \"\"\"\n    Validates if the input string is a valid number in scientific notation.\n    \n    Parameters:\n    input_data (str): The string to be validated.\n    \n    Returns:\n    bool: True if the input is a valid scientific notation number, False otherwise.\n    \"\"\"\n    # Strip leading and trailing whitespace and convert to lowercase\n    input_data = input_data.strip().lower()\n    \n    # Regular expression for scientific notation\n    scientific_notation_pattern = r'^[+-]?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$'\n    \n    # Match the input against the pattern\n    return bool(re.match(scientific_notation_pattern, input_data))\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input(\\\"1.5E3\\\") == True\\n\", \"\\nassert validate_input(\\\"  3.14e-2 \\\") == True\\n\", \"\\nassert validate_input(\\\"abc\\\") == False\\n\", \"\\nassert validate_input(\\\"1.2.3\\\") == False\\n\", \"\\nassert validate_input(\\\"123\\\") == True\\n\", \"\\nassert validate_input(\\\"123.456\\\") == True\\n\", \"\\nassert validate_input(\\\"1e10\\\") == True\\n\", \"\\nassert validate_input(\\\"1E-10\\\") == True\\n\", \"\\nassert validate_input(\\\"  +1.23E+45  \\\") == True\\n\", \"\\nassert validate_input(\\\"1.23E45a\\\") == False\\n\"]"
  },
  {
    "input": "You are tasked with writing a Python function that recursively lists all non-hidden files within a given directory and its subdirectories. Hidden files and directories (those starting with a dot, e.g., `.git`, `.DS_Store`) should be ignored. Your function should return a list of absolute paths to these files.\n\n**Input:**\n- A single string representing the path to the directory.\n\n**Output:**\n- A list of strings, where each string is the absolute path to a non-hidden file.\n\n**Sample Input:**\n```\n/home/user/project\n```\n\n**Sample Output:**\n```\n['/home/user/project/main.py', '/home/user/project/docs/report.txt']\n```",
    "output": "import os\n\ndef list_files(directory):\n    \"\"\"\n    Recursively lists all non-hidden files in the given directory and its subdirectories.\n\n    Parameters:\n    directory (str): The path to the directory.\n\n    Returns:\n    list: A list of absolute paths to non-hidden files.\n    \"\"\"\n    file_list = []\n    for root, dirs, files in os.walk(directory):\n        # Ignore hidden directories\n        dirs[:] = [d for d in dirs if not d.startswith('.')]\n        for file in files:\n            # Check if the file is not hidden\n            if not file.startswith('.'):\n                file_list.append(os.path.join(root, file))\n    return file_list\n\n# Example usage\nif __name__ == \"__main__\":\n    directory_path = input(\"Enter directory path: \")\n    files = list_files(directory_path)\n    for file in files:\n        print(file)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert list_files(\\\"/tmp/testdir\\\") == [\\\"/tmp/testdir/file1.txt\\\", \\\"/tmp/testdir/subdir/file2.txt\\\"]\\n\", \"\\nassert list_files(\\\"/tmp/emptydir\\\") == []\\n\", \"\\nassert list_files(\\\"/tmp/hiddenfiles/.hiddenfile\\\") == []\\n\", \"\\nassert list_files(\\\"/tmp/hiddenfiles\\\") == [\\\"/tmp/hiddenfiles/visiblefile.txt\\\"]\\n\", \"\\nassert list_files(\\\"/tmp/multilevel/subdir1/subsubdir1/file1.txt\\\") == [\\\"/tmp/multilevel/subdir1/subsubdir1/file1.txt\\\"]\\n\", \"\\nassert list_files(\\\"/tmp/multilevel\\\") == [\\\"/tmp/multilevel/subdir1/subsubdir1/file1.txt\\\", \\\"/tmp/multilevel/subdir2/file2.txt\\\"]\\n\", \"\\nassert list_files(\\\"/tmp/nestedhidden/.hidden/subdir/file.txt\\\") == []\\n\", \"\\nassert list_files(\\\"/tmp/nestedhidden\\\") == [\\\"/tmp/nestedhidden/visiblefile.txt\\\"]\\n\", \"\\nassert list_files(\\\"/tmp/onlyhidden/.hiddenfile\\\") == []\\n\", \"\\nassert list_files(\\\"/tmp/onlyhidden\\\") == []\\n\"]"
  },
  {
    "input": "You are given a list of distinct items and an integer `k`. Your task is to generate all possible combinations of `k` items from the list. The order of items in each combination does not matter, and the order of the combinations themselves does not matter.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10), representing the number of items.\n- The second line contains `n` space-separated strings, representing the items.\n- The third line contains an integer `k` (0 \u2264 k \u2264 n), representing the number of items in each combination.\n\n**Output:**\n- Print each combination on a new line, with items separated by spaces. The combinations can be printed in any order.\n\n**Sample Input:**\n```\n4\napple banana cherry date\n2\n```\n\n**Sample Output:**\n```\napple banana\napple cherry\napple date\nbanana cherry\nbanana date\ncherry date\n```",
    "output": "from itertools import combinations\n\ndef generate_combinations(items, k):\n    \"\"\"\n    Generate all possible combinations of k items from the list items.\n    \n    :param items: List of items\n    :param k: Number of items in each combination\n    :return: List of tuples, each tuple is a combination of k items\n    \"\"\"\n    return list(combinations(items, k))\n\ndef main():\n    n = int(input().strip())\n    items = input().strip().split()\n    k = int(input().strip())\n    \n    for combo in generate_combinations(items, k):\n        print(\" \".join(combo))\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert generate_combinations([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]\\n\", \"\\nassert generate_combinations(['a', 'b', 'c', 'd'], 2) == [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]\\n\", \"\\nassert generate_combinations([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\\n\", \"\\nassert generate_combinations([10, 20, 30], 1) == [(10,), (20,), (30,)]\\n\", \"\\nassert generate_combinations([1, 2, 3], 0) == [()]\\n\", \"\\nassert generate_combinations([], 2) == []\\n\", \"\\nassert generate_combinations(['apple', 'banana', 'cherry'], 2) == [('apple', 'banana'), ('apple', 'cherry'), ('banana', 'cherry')]\\n\", \"\\nassert generate_combinations(['x', 'y'], 2) == [('x', 'y')]\\n\", \"\\nassert generate_combinations(['x', 'y'], 3) == []\\n\", \"\\nassert generate_combinations([True, False], 1) == [(True,), (False,)]\\n\"]"
  },
  {
    "input": "You are developing a text-based game called \"Treasure Hunt\" where a player navigates a 5x5 grid to locate a hidden treasure. The player inputs directions using the NATO phonetic alphabet or corresponding numbers. The grid wraps around both horizontally and vertically. The player's position is updated based on the input direction until the treasure is found. Implement the game logic.\n\n**Input:**\n- A series of strings representing directions. Each direction can be one of the following:\n  - \"Hotel\" (North), \"Six\" (South), \"Tango\" (East), \"Echo\" (West)\n  - \"4\" (North), \"6\" (South), \"8\" (East), \"2\" (West)\n\n**Output:**\n- The player's position after each valid move.\n- A congratulatory message when the treasure is found.\n\n**Sample Input:**\n```\nHotel\nTango\nTango\nSix\nEcho\nEcho\n```\n\n**Sample Output:**\n```\nYour position: (x, y)\nYour position: (x, y)\nYour position: (x, y)\nYour position: (x, y)\nYour position: (x, y)\nYour position: (x, y)\nCongratulations! You found the treasure at position: (2, 2)\n```",
    "output": "import random\n\n# Map NATO phonetic letters to directions\ndirections = {\n    'Hotel': (-1, 0),  # North\n    'Six': (1, 0),     # South\n    'Tango': (0, 1),   # East\n    'Echo': (0, -1),   # West\n}\n\n# Map numbers to NATO phonetic letters\nnato_phonetic = {\n    '4': 'Hotel',  # North\n    '6': 'Six',    # South\n    '8': 'Tango',  # East\n    '2': 'Echo',   # West\n}\n\ndef get_user_input():\n    \"\"\"\n    Prompts the user for a direction input and validates it.\n    Returns the corresponding direction name.\n    \"\"\"\n    while True:\n        user_input = input(\"Enter a direction (Hotel=North, Six=South, Tango=East, Echo=West or corresponding number 4=North, 6=South, 8=East, 2=West): \").strip().upper()\n        if user_input in directions or user_input in nato_phonetic:\n            return nato_phonetic.get(user_input, user_input)\n        else:\n            print(\"Invalid input. Please enter a valid direction.\")\n\ndef move_player(position, direction):\n    \"\"\"\n    Updates the player's position based on the given direction.\n    The grid wraps around both horizontally and vertically.\n    Returns the new position.\n    \"\"\"\n    x, y = position\n    dx, dy = directions[direction]\n    new_x = (x + dx) % 5\n    new_y = (y + dy) % 5\n    return new_x, new_y\n\ndef menu():\n    \"\"\"\n    Displays the welcome message and game instructions.\n    \"\"\"\n    print(\"Welcome to Treasure Hunt!\")\n    print(\"Navigate a 5x5 grid using NATO phonetic alphabet or corresponding numbers to find the hidden treasure!\")\n    print(\"Grid wraps around both horizontally and vertically.\")\n    print(\"Type the full direction name (Hotel=North, Six=South, Tango=East, Echo=West) or corresponding numbers (4=North, 6=South, 8=East, 2=West).\")\n\ndef main():\n    \"\"\"\n    Main function to run the Treasure Hunt game.\n    Initializes the game, processes user input, and checks for treasure.\n    \"\"\"\n    menu()\n    treasure = (2, 2)  # Grid center\n    player_position = (random.randint(0, 4), random.randint(0, 4))\n    \n    while player_position != treasure:\n        print(\"\\nYour position:\", player_position)\n        direction = get_user_input()\n        player_position = move_player(player_position, direction)\n    \n    print(\"\\nCongratulations! You found the treasure at position:\", player_position)\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert move_player((0, 0), 'Hotel') == (4, 0)\\n\", \"\\nassert move_player((0, 0), 'Six') == (1, 0)\\n\", \"\\nassert move_player((0, 0), 'Tango') == (0, 1)\\n\", \"\\nassert move_player((0, 0), 'Echo') == (0, 4)\\n\", \"\\nassert move_player((4, 4), 'Hotel') == (3, 4)\\n\", \"\\nassert move_player((4, 4), 'Six') == (0, 4)\\n\", \"\\nassert move_player((4, 4), 'Tango') == (4, 0)\\n\", \"\\nassert move_player((4, 4), 'Echo') == (4, 3)\\n\", \"\\nassert nato_phonetic['4'] == 'Hotel'\\n\", \"\\nassert nato_phonetic['8'] == 'Tango'\\n\"]"
  },
  {
    "input": "You are given a CSV file containing employee data with the following columns: Employee ID, Name, Department, and Salary. Your task is to write a program that reads this CSV file and calculates the average salary for each department. Assume the CSV file is well-formed and includes a header row.\n\n**Input:**\n- The first line of input is the filename of the CSV file.\n- The CSV file contains the following columns: Employee ID, Name, Department, Salary.\n- The CSV file has a header row.\n\n**Output:**\n- For each department, print the average salary rounded to two decimal places in the format: \"Average salary in [Department]: [Average Salary]\".\n\n**Sample Input:**\n```\nemployees.csv\n```\n*Contents of employees.csv:*\n```\nEmployee ID,Name,Department,Salary\n1,Alice,HR,50000\n2,Bob,Engineering,80000\n3,Charlie,HR,55000\n4,David,Engineering,85000\n5,Eve,Marketing,60000\n```\n\n**Sample Output:**\n```\nAverage salary in HR: 52500.00\nAverage salary in Engineering: 82500.00\nAverage salary in Marketing: 60000.00\n```",
    "output": "import csv\n\ndef calculate_average_salaries(filename):\n    \"\"\"\n    Reads a CSV file and calculates the average salary for each department.\n\n    Parameters:\n    filename (str): The name of the CSV file.\n\n    Returns:\n    dict: A dictionary with department names as keys and their average salaries as values.\n    \"\"\"\n    department_salaries = {}\n    \n    with open(filename, mode='r') as file:\n        reader = csv.DictReader(file)\n\n        for row in reader:\n            department = row['Department']\n            salary = float(row['Salary'])\n\n            if department in department_salaries:\n                department_salaries[department]['total_salary'] += salary\n                department_salaries[department]['employee_count'] += 1\n            else:\n                department_salaries[department] = {'total_salary': salary, 'employee_count': 1}\n\n        department_average_salaries = {}\n        for department, info in department_salaries.items():\n            department_average_salaries[department] = info['total_salary'] / info['employee_count']\n\n        return department_average_salaries\n\n# Example usage\nfilename = input().strip()  # Specify your CSV file name here\naverage_salaries = calculate_average_salaries(filename)\nfor department, average_salary in average_salaries.items():\n    print(f'Average salary in {department}: {average_salary:.2f}')\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert calculate_average_salaries('test1.csv') == {'HR': 50000.0, 'Engineering': 75000.0}\\n\", \"\\nassert calculate_average_salaries('test2.csv') == {'Marketing': 60000.0}\\n\", \"\\nassert calculate_average_salaries('test3.csv') == {'Finance': 80000.0, 'IT': 90000.0}\\n\", \"\\nassert calculate_average_salaries('test4.csv') == {'Sales': 55000.0, 'Support': 45000.0}\\n\", \"\\nassert calculate_average_salaries('test5.csv') == {'Operations': 65000.0, 'Logistics': 70000.0}\\n\", \"\\nassert calculate_average_salaries('test6.csv') == {'Research': 100000.0, 'Development': 95000.0}\\n\", \"\\nassert calculate_average_salaries('test7.csv') == {'Human Resources': 52000.0, 'Tech': 78000.0}\\n\", \"\\nassert calculate_average_salaries('test8.csv') == {'Customer Service': 48000.0, 'Product': 82000.0}\\n\", \"\\nassert calculate_average_salaries('test9.csv') == {'Admin': 58000.0, 'Management': 98000.0}\\n\", \"\\nassert calculate_average_salaries('test10.csv') == {'Legal': 110000.0, 'Compliance': 105000.0}\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple text-based Tic-Tac-Toe game for two players. The game board is a 3x3 grid. Players take turns marking a cell in the grid with their symbol ('X' for the first player and 'O' for the second player). The game ends when one player has three of their symbols in a horizontal, vertical, or diagonal row, or when all cells are filled without any player achieving a winning condition (resulting in a tie).\n\n**Input:**\n- The input consists of multiple lines, each containing two integers `row` and `col` (0-indexed) representing the player's move. The moves are given in the order they are made by the players.\n\n**Output:**\n- Print the state of the board after each move.\n- After the game ends, print the result: \"Player X wins!\", \"Player O wins!\", or \"It's a draw!\".\n\n**Sample Input:**\n```\n0 0\n1 1\n0 1\n0 2\n2 2\n```\n\n**Sample Output:**\n```\nX |   |  \n---------\n  |   |  \n---------\n  |   |  \n---------\nX |   |  \n---------\nX |   |  \n---------\n  |   |  \n---------\n  |   |  \n---------\nX |   |  \n---------\nX |   | O\n---------\n  |   |  \n---------\n  |   |  \n---------\nX |   | O\n---------\n  |   |  \n---------\n  |   |  \n---------\nX |   | O\n---------\nPlayer X wins!\n```",
    "output": "def print_board(board):\n    \"\"\"\n    Prints the current state of the Tic-Tac-Toe board.\n    \n    :param board: List of lists representing the Tic-Tac-Toe board.\n    \"\"\"\n    for row in board:\n        print(\" | \".join(row))\n        print(\"-\" * 5)\n\ndef check_winner(board):\n    \"\"\"\n    Checks if there is a winner on the board.\n    \n    :param board: List of lists representing the Tic-Tac-Toe board.\n    :return: The winning symbol ('X' or 'O') if there is a winner, otherwise None.\n    \"\"\"\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] != \" \":\n            return board[i][0]\n        if board[0][i] == board[1][i] == board[2][i] != \" \":\n            return board[0][i]\n    if board[0][0] == board[1][1] == board[2][2] != \" \":\n        return board[0][0]\n    if board[0][2] == board[1][1] == board[2][0] != \" \":\n        return board[0][2]\n    return None\n\ndef check_tie(board):\n    \"\"\"\n    Checks if the game is a tie.\n    \n    :param board: List of lists representing the Tic-Tac-Toe board.\n    :return: True if the game is a tie, otherwise False.\n    \"\"\"\n    for row in board:\n        if \" \" in row:\n            return False\n    return True\n\ndef tic_tac_toe():\n    \"\"\"\n    Main function to run the Tic-Tac-Toe game.\n    \"\"\"\n    board = [[\" \" for _ in range(3)] for _ in range(3)]\n    current_player = \"X\"\n    winner = None\n\n    while not winner and not check_tie(board):\n        print_board(board)\n        print(f\"Player {current_player}, make your move (row and column): \")\n        row, col = map(int, input().split())\n        \n        if board[row][col] == \" \":\n            board[row][col] = current_player\n        else:\n            print(\"Cell already taken, try again.\")\n            continue\n        \n        winner = check_winner(board)\n        current_player = \"O\" if current_player == \"X\" else \"X\"\n\n    print_board(board)\n    if winner:\n        print(f\"Player {winner} wins!\")\n    else:\n        print(\"It's a draw!\")\n\ntic_tac_toe()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert check_winner([[\\\"X\\\", \\\"X\\\", \\\"X\\\"], [\\\" \\\", \\\" \\\", \\\" \\\"], [\\\" \\\", \\\" \\\", \\\" \\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_winner([[\\\" \\\", \\\" \\\", \\\" \\\"], [\\\"O\\\", \\\"O\\\", \\\"O\\\"], [\\\" \\\", \\\" \\\", \\\" \\\"]]) == \\\"O\\\"\\n\", \"\\nassert check_winner([[\\\" \\\", \\\" \\\", \\\" \\\"], [\\\" \\\", \\\" \\\", \\\" \\\"], [\\\"X\\\", \\\"X\\\", \\\"X\\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_winner([[\\\"X\\\", \\\" \\\", \\\" \\\"], [\\\"X\\\", \\\" \\\", \\\" \\\"], [\\\"X\\\", \\\" \\\", \\\" \\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_winner([[\\\" \\\", \\\"O\\\", \\\" \\\"], [\\\" \\\", \\\"O\\\", \\\" \\\"], [\\\" \\\", \\\"O\\\", \\\" \\\"]]) == \\\"O\\\"\\n\", \"\\nassert check_winner([[\\\" \\\", \\\" \\\", \\\"X\\\"], [\\\" \\\", \\\" \\\", \\\"X\\\"], [\\\" \\\", \\\" \\\", \\\"X\\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_winner([[\\\"X\\\", \\\" \\\", \\\" \\\"], [\\\" \\\", \\\"X\\\", \\\" \\\"], [\\\" \\\", \\\" \\\", \\\"X\\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_winner([[\\\" \\\", \\\" \\\", \\\"X\\\"], [\\\" \\\", \\\"X\\\", \\\" \\\"], [\\\"X\\\", \\\" \\\", \\\" \\\"]]) == \\\"X\\\"\\n\", \"\\nassert check_tie([[\\\"X\\\", \\\"O\\\", \\\"X\\\"], [\\\"O\\\", \\\"X\\\", \\\"O\\\"], [\\\"X\\\", \\\"O\\\", \\\"X\\\"]]) == True\\n\", \"\\nassert check_tie([[\\\"X\\\", \\\"O\\\", \\\" \\\"], [\\\"O\\\", \\\"X\\\", \\\"O\\\"], [\\\"X\\\", \\\"O\\\", \\\"X\\\"]]) == False\\n\"]"
  },
  {
    "input": "You are given a sorted list of integers `nums` and an integer `target`. Your task is to implement a function `find_target_index` that performs a binary search to locate the `target` in the list. The function should return the index of the `target` if it is present in the list, otherwise, it should return -1. The list `nums` is guaranteed to be sorted in non-decreasing order.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the list.\n- The second line contains `n` space-separated integers representing the sorted list `nums`.\n- The third line contains an integer `target` (-10^9 \u2264 target \u2264 10^9), the integer to be searched in the list.\n\n**Output:**\n- Print a single integer, the index of the `target` in the list if it exists, otherwise print -1.\n\n**Sample Input:**\n```\n10\n1 2 3 4 5 6 7 8 9 10\n7\n```\n\n**Sample Output:**\n```\n6\n```",
    "output": "def find_target_index(nums, target):\n    \"\"\"\n    Find the index of the target integer in a sorted list using binary search.\n\n    :param nums: List of integers sorted in non-decreasing order.\n    :param target: Integer to find in the list.\n    :return: The index of the target integer if found, otherwise -1.\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    target = int(data[n+1])\n    \n    index = find_target_index(nums, target)\n    print(index)\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert find_target_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 6\\n\", \"\\nassert find_target_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0\\n\", \"\\nassert find_target_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 9\\n\", \"\\nassert find_target_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4\\n\", \"\\nassert find_target_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == -1\\n\", \"\\nassert find_target_index([], 1) == -1\\n\", \"\\nassert find_target_index([1], 1) == 0\\n\", \"\\nassert find_target_index([1, 3, 5, 7, 9], 2) == -1\\n\", \"\\nassert find_target_index([1, 3, 5, 7, 9], 9) == 4\\n\", \"\\nassert find_target_index([-10, -5, 0, 5, 10], 0) == 2\\n\"]"
  },
  {
    "input": "You are tasked with implementing a function `validate_input(input_str)` that determines whether a given input string consists solely of unique alphabetic characters. The function should return `True` if the input meets the criteria, and `False` otherwise.\n\n**Constraints:**\n- The input string may contain only alphabetic characters (a-z, A-Z).\n- The function should be case-sensitive, meaning 'a' and 'A' are considered distinct characters.\n\n**Sample Input and Output:**\n- Input: `\"abc\"`\n  - Output: `True`\n- Input: `\"aA\"`\n  - Output: `True`\n- Input: `\"hello\"`\n  - Output: `False`\n- Input: `\"123\"`\n  - Output: `False`\n- Input: `\"a!b\"`\n  - Output: `False`",
    "output": "def validate_input(input_str):\n    \"\"\"\n    Validates if the input string consists solely of unique alphabetic characters.\n    \n    Parameters:\n    input_str (str): The string to be validated.\n    \n    Returns:\n    bool: True if the string contains only unique alphabetic characters, False otherwise.\n    \"\"\"\n    if isinstance(input_str, str) and input_str.isalpha():\n        return len(set(input_str)) == len(input_str)\n    return False\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert validate_input(\\\"abc\\\") == True\\n\", \"\\nassert validate_input(\\\"aabbcc\\\") == False\\n\", \"\\nassert validate_input(\\\"abcdefg\\\") == True\\n\", \"\\nassert validate_input(\\\"AaBbCc\\\") == True\\n\", \"\\nassert validate_input(\\\"123\\\") == False\\n\", \"\\nassert validate_input(\\\"!@#\\\") == False\\n\", \"\\nassert validate_input(\\\"abc123\\\") == False\\n\", \"\\nassert validate_input(\\\"\\\") == True\\n\", \"\\nassert validate_input(\\\"a\\\") == True\\n\", \"\\nassert validate_input(\\\"A\\\") == True\\n\"]"
  },
  {
    "input": "Implement a program to simulate a game of Rock-Paper-Scissors between a human player and the computer. The computer should randomly select its move from \"rock\", \"paper\", or \"scissors\". The human player will input their move, and the program must validate this input. The program should handle ties, wins, and losses, and keep track of the score. After each round, the score should be displayed. The game should continue until the player decides to stop.\n\n**Input:**\n- The human player's move (either \"rock\", \"paper\", or \"scissors\") for each round.\n- A decision to play again (\"yes\" or \"no\") after each round.\n\n**Output:**\n- The result of each round (win, lose, or tie).\n- The updated score after each round.\n- A final message when the player decides to stop playing.\n\n**Sample Input:**\n```\nrock\nyes\npaper\nyes\nscissors\nno\n```\n\n**Sample Output:**\n```\nYou win! rock beats scissors.\nScore: You 1, Computer 0\nYou lose! paper beats rock.\nScore: You 1, Computer 1\nIt's a tie! Both played scissors.\nScore: You 1, Computer 1\nThanks for playing!\n```",
    "output": "import random\n\ndef get_computer_choice():\n    \"\"\"Return a random choice of 'rock', 'paper', or 'scissors' for the computer.\"\"\"\n    return random.choice(['rock', 'paper', 'scissors'])\n\ndef get_human_choice():\n    \"\"\"Prompt the user to enter 'rock', 'paper', or 'scissors' and validate the input.\"\"\"\n    while True:\n        human_choice = input(\"Enter your move (rock, paper, scissors): \").lower()\n        if human_choice in ['rock', 'paper', 'scissors']:\n            return human_choice\n        else:\n            print(\"Invalid input. Please enter rock, paper, or scissors.\")\n\ndef determine_winner(human_choice, computer_choice):\n    \"\"\"Determine the winner of the round based on the choices made.\"\"\"\n    if human_choice == computer_choice:\n        return \"tie\"\n    elif (human_choice == \"rock\" and computer_choice == \"scissors\") or \\\n         (human_choice == \"scissors\" and computer_choice == \"paper\") or \\\n         (human_choice == \"paper\" and computer_choice == \"rock\"):\n        return \"human\"\n    else:\n        return \"computer\"\n\ndef play_round(human_score, computer_score):\n    \"\"\"Play one round of Rock-Paper-Scissors and update the score.\"\"\"\n    human_choice = get_human_choice()\n    computer_choice = get_computer_choice()\n    result = determine_winner(human_choice, computer_choice)\n    \n    if result == \"human\":\n        human_score += 1\n        print(f\"You win! {human_choice} beats {computer_choice}.\")\n    elif result == \"computer\":\n        computer_score += 1\n        print(f\"You lose! {computer_choice} beats {human_choice}.\")\n    else:\n        print(f\"It's a tie! Both played {human_choice}.\")\n    \n    print(f\"Score: You {human_score}, Computer {computer_score}\")\n    return human_score, computer_score\n\ndef main():\n    \"\"\"Main function to run the Rock-Paper-Scissors game.\"\"\"\n    human_score = 0\n    computer_score = 0\n    playing = True\n    \n    print(\"Welcome to Rock-Paper-Scissors!\")\n    while playing:\n        human_score, computer_score = play_round(human_score, computer_score)\n        play_again = input(\"Do you want to play again? (yes/no): \").strip().lower()\n        if play_again != \"yes\":\n            playing = False\n    \n    print(\"Thanks for playing!\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert get_computer_choice() in ['rock', 'paper', 'scissors']\\n\", \"\\nassert determine_winner('rock', 'scissors') == 'human'\\n\", \"\\nassert determine_winner('scissors', 'rock') == 'computer'\\n\", \"\\nassert determine_winner('paper', 'rock') == 'human'\\n\", \"\\nassert determine_winner('rock', 'paper') == 'computer'\\n\", \"\\nassert determine_winner('scissors', 'paper') == 'human'\\n\", \"\\nassert determine_winner('paper', 'scissors') == 'computer'\\n\", \"\\nassert determine_winner('rock', 'rock') == 'tie'\\n\", \"\\nassert determine_winner('scissors', 'scissors') == 'tie'\\n\", \"\\nassert determine_winner('paper', 'paper') == 'tie'\\n\"]"
  },
  {
    "input": "You are tasked with developing a Python program that utilizes the `requests` library to retrieve JSON data from a specified URL. Your program must handle various potential errors, including missing or invalid URLs, network issues, server errors, and timeouts. For each error, your program should output a specific error message. Assume the URL points to a JSON API endpoint.\n\n**Input:**\n- A single line containing a URL string.\n\n**Output:**\n- If successful, print the JSON data retrieved from the URL.\n- If an error occurs, print a meaningful error message.\n\n**Sample Input 1:**\n```\nhttps://api.example.com/data\n```\n\n**Sample Output 1:**\n```\n{\"key\": \"value\", \"another_key\": \"another_value\"}\n```\n\n**Sample Input 2:**\n```\ninvalid-url\n```\n\n**Sample Output 2:**\n```\nError: The URL is missing a schema (e.g., 'http://' or 'https://').\n```\n\n**Sample Input 3:**\n```\nhttp://nonexistentwebsite.com\n```\n\n**Sample Output 3:**\n```\nError: Could not connect to the server. Please check your network connection.\n```",
    "output": "import requests\nfrom requests.exceptions import RequestException, MissingSchema, InvalidSchema, HTTPError, ConnectionError, Timeout\n\ndef fetch_json_data(url):\n    \"\"\"\n    Fetches JSON data from a given URL. Handles various potential errors and prints meaningful error messages.\n\n    :param url: The URL of the API endpoint to fetch data from.\n    :return: The JSON content of the response if successful, None otherwise.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except MissingSchema:\n        print(\"Error: The URL is missing a schema (e.g., 'http://' or 'https://').\")\n    except InvalidSchema:\n        print(\"Error: The URL schema is invalid.\")\n    except ConnectionError:\n        print(\"Error: Could not connect to the server. Please check your network connection.\")\n    except HTTPError as e:\n        print(f\"HTTP error occurred: {e}\")\n    except Timeout:\n        print(\"Error: The request timed out. Please try again later.\")\n    except RequestException as e:\n        print(f\"An exception occurred while fetching the data: {e}\")\n    except ValueError:\n        print(\"Error: The server did not return valid JSON data.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    url = input().strip()\n    data = fetch_json_data(url)\n    if data:\n        print(data)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert fetch_json_data(None) is None\\n\", \"\\nassert fetch_json_data(\\\"\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"invalid-url\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"ftp://example.com\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"http://nonexistentwebsite123456789.com\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"https://httpstat.us/404\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"https://httpstat.us/500\\\") is None\\n\", \"\\nassert fetch_json_data(\\\"https://httpstat.us/200\\\") is not None\\n\", \"\\nassert fetch_json_data(\\\"https://jsonplaceholder.typicode.com/todos/1\\\") is not None\\n\", \"\\nassert fetch_json_data(\\\"https://jsonplaceholder.typicode.com/invalid-endpoint\\\") is None\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple text-based dungeon game. The dungeon is represented as a grid of size `N x N`, where each cell can contain one of three types: 'empty', 'treasure', or 'monster'. The player starts at the top-left corner of the grid (position `(0, 0)`). The player can move up, down, left, or right, but cannot move outside the grid boundaries. If the player enters a room with treasure, they collect it, and the room becomes empty. If the player encounters a monster, the game ends. The game continues until the player collects all the treasures or encounters a monster.\n\n**Input:**\n- The first line contains an integer `N` (1 \u2264 N \u2264 10), representing the size of the grid.\n- The next `N` lines describe the grid. Each line contains `N` space-separated strings, each being either 'empty', 'treasure', or 'monster'.\n\n**Output:**\n- Print the player's current location and the room type after each move.\n- If the player collects all treasures, print \"Congratulations! You have collected all the treasure!\" and end the game.\n- If the player encounters a monster, print \"Oh no! A monster appears. Game Over!\" and end the game.\n\n**Sample Input:**\n```\n3\nempty treasure monster\nempty empty empty\nmonster treasure empty\n```\n\n**Sample Output:**\n```\nWelcome to the dungeon!\nType 'up', 'down', 'left', or 'right' to move in the dungeon.\nFind all the treasures in the dungeon.\nYou are in a empty room.\nThere is nothing here.\nYou have found 0 treasures.\nWhich direction would you like to move? right\nYou are in a treasure room.\nYou found treasure! Let's pick it up.\nYou have found 1 treasures.\nWhich direction would you like to move? down\nYou are in a empty room.\nThere is nothing here.\nYou have found 1 treasures.\nWhich direction would you like to move? right\nYou are in a monster room.\nOh no! A monster appears. Game Over!\n```",
    "output": "import sys\n\ndef describe_room(grid, player_position, treasure_count):\n    \"\"\"\n    Describes the current room and updates the treasure count if treasure is found.\n    \"\"\"\n    x, y = player_position\n    room_type = grid[x][y]\n    print(f\"You are in a {room_type} room.\")\n    if room_type == 'treasure':\n        print(\"You found treasure! Let's pick it up.\")\n        nonlocal treasure_count\n        treasure_count += 1\n        grid[x][y] = 'empty'\n    elif room_type == 'monster':\n        print(\"Oh no! A monster appears. Game Over!\")\n        sys.exit()\n    else:\n        print(\"There is nothing here.\")\n\ndef display_instructions():\n    \"\"\"\n    Displays the game instructions to the player.\n    \"\"\"\n    print(\"Welcome to the dungeon!\")\n    print(\"Type 'up', 'down', 'left', or 'right' to move in the dungeon.\")\n    print(\"Find all the treasures in the dungeon.\")\n\ndef move_player(direction, player_position, grid_size):\n    \"\"\"\n    Moves the player in the specified direction if possible.\n    \"\"\"\n    x, y = player_position\n    match direction:\n        case 'up':\n            if x > 0: player_position[0] -= 1\n            else: print(\"You can't move up.\")\n        case 'down':\n            if x < grid_size - 1: player_position[0] += 1\n            else: print(\"You can't move down.\")\n        case 'left':\n            if y > 0: player_position[1] -= 1\n            else: print(\"You can't move left.\")\n        case 'right':\n            if y < grid_size - 1: player_position[1] += 1\n            else: print(\"You can't move right.\")\n        case _:\n            print(\"Unknown direction. Please type 'up', 'down', 'left', or 'right'.\")\n\ndef main_game(grid):\n    \"\"\"\n    Runs the main game loop.\n    \"\"\"\n    grid_size = len(grid)\n    player_position = [0, 0]\n    treasure_count = 0\n    total_treasures = sum(row.count('treasure') for row in grid)\n    \n    display_instructions()\n    while True:\n        describe_room(grid, player_position, treasure_count)\n        print(f\"You have found {treasure_count} treasures.\")\n        if treasure_count == total_treasures:\n            print(\"Congratulations! You have collected all the treasure!\")\n            break\n        move_direction = input(\"Which direction would you like to move? \").strip().lower()\n        move_player(move_direction, player_position, grid_size)\n\nif __name__ == \"__main__\":\n    grid_size = int(input().strip())\n    grid = [input().strip().split() for _ in range(grid_size)]\n    main_game(grid)\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert PlayerPosition == [0, 0]\\n\", \"\\nassert GridSize == 5\\n\", \"\\nassert RoomTypes == ['empty', 'treasure', 'monster']\\n\", \"\\nassert len(Grid) == GridSize\\n\", \"\\nassert all(len(row) == GridSize for row in Grid)\\n\", \"\\nassert TreasureCount == 0\\n\", \"\\nassert move_player('up') is None and PlayerPosition == [0, 0]\\n\", \"\\nassert move_player('down') is None and PlayerPosition == [1, 0]\\n\", \"\\nassert move_player('left') is None and PlayerPosition == [1, 0]\\n\", \"\\nassert move_player('right') is None and PlayerPosition == [1, 1]\\n\"]"
  },
  {
    "input": "You are given a task to write a Python program that reads a positive integer from the standard input and computes the sum of all odd numbers from 1 up to and including the entered integer. Your program must ensure that the input is a valid positive integer. If the input is invalid, the program should prompt the user to enter a valid number again.\n\n**Input:**\n- A single line containing a positive integer `n` (1 \u2264 n \u2264 10^6).\n\n**Output:**\n- A single line containing the sum of all odd numbers from 1 to `n`.\n\n**Sample Input:**\n```\n10\n```\n\n**Sample Output:**\n```\n25\n```",
    "output": "def sum_of_odds():\n    \"\"\"\n    Prompts the user to input a positive integer and calculates the sum of all odd numbers\n    from 1 up to and including the entered integer. Ensures the input is a valid positive integer.\n    \"\"\"\n    while True:\n        try:\n            num = int(input(\"Please enter a positive integer: \"))\n            if num <= 0:\n                raise ValueError(\"The number must be a positive integer.\")\n            break\n        except ValueError as e:\n            print(f\"Invalid input: {e}. Please try again.\")\n    \n    total_sum = sum(i for i in range(1, num + 1, 2))\n    print(f\"The sum of all odd numbers from 1 to {num} is {total_sum}.\")\n\nsum_of_odds()\n",
    "_category": "fallback",
    "unit_tests": "[\"\\nassert sum_of_odds() == None  # This function prints the result instead of returning it, so we check for None\\n\", \"\\nassert sum_of_odds() == None  # Test with the smallest positive integer\\n\", \"\\nassert sum_of_odds() == None  # Test with an even number\\n\", \"\\nassert sum_of_odds() == None  # Test with an odd number\\n\", \"\\nassert sum_of_odds() == None  # Test with a larger odd number\\n\", \"\\nassert sum_of_odds() == None  # Test with a larger even number\\n\", \"\\nassert sum_of_odds() == None  # Test with a very large odd number\\n\", \"\\nassert sum_of_odds() == None  # Test with a very large even number\\n\", \"\\nassert sum_of_odds() == None  # Test with a number that has leading zeros (input validation should handle this)\\n\", \"\\nassert sum_of_odds() == None  # Test with a non-integer input (input validation should handle this)\\n\"]"
  },
  {
    "input": "You are tasked with implementing a simple voting system for a local election. The system should support adding candidates, casting votes for candidates, and displaying the final results. Each candidate is identified by a unique ID and a name. The system should handle invalid candidate IDs gracefully by displaying an appropriate message.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of candidates.\n- The next `n` lines each contain an integer `candidate_id` (1 \u2264 candidate_id \u2264 1000) and a string `name` (1 \u2264 |name| \u2264 20), representing the candidate's ID and name.\n- The next line contains an integer `m` (0 \u2264 m \u2264 1000), the number of votes cast.\n- The next `m` lines each contain an integer `candidate_id` (1 \u2264 candidate_id \u2264 1000), representing the ID of the candidate for whom a vote is cast.\n\n**Output:**\n- For each candidate, print their name, ID, and the number of votes they received in the format: \"Candidate: {name}, ID: {candidate_id}, Votes: {votes}\".\n- Candidates should be listed in the order they were added.\n\n**Sample Input:**\n```\n3\n1 Alice\n2 Bob\n3 Charlie\n6\n1\n2\n3\n1\n1\n2\n```\n\n**Sample Output:**\n```\nCandidate: Alice, ID: 1, Votes: 3\nCandidate: Bob, ID: 2, Votes: 2\nCandidate: Charlie, ID: 3, Votes: 1\n```",
    "output": "class Candidate:\n    def __init__(self, candidate_id, name):\n        self.candidate_id = candidate_id\n        self.name = name\n        self.votes = 0\n\n    def receive_vote(self):\n        \"\"\"Increment the vote count for this candidate.\"\"\"\n        self.votes += 1\n\nclass VotingSystem:\n    def __init__(self):\n        self.candidates = {}\n\n    def add_candidate(self, candidate_id, name):\n        \"\"\"Add a candidate to the voting system if they do not already exist.\"\"\"\n        if candidate_id not in self.candidates:\n            self.candidates[candidate_id] = Candidate(candidate_id, name)\n        else:\n            print(f\"Candidate with ID {candidate_id} already exists.\")\n\n    def cast_vote(self, candidate_id):\n        \"\"\"Cast a vote for a candidate if the candidate ID is valid.\"\"\"\n        if candidate_id in self.candidates:\n            self.candidates[candidate_id].receive_vote()\n        else:\n            print(\"Invalid candidate ID. Please try again.\")\n\n    def display_results(self):\n        \"\"\"Display the results of the election.\"\"\"\n        for candidate_id in self.candidates:\n            candidate = self.candidates[candidate_id]\n            print(f\"Candidate: {candidate.name}, ID: {candidate.candidate_id}, Votes: {candidate.votes}\")\n\n# Example usage\nvoting_system = VotingSystem()\nn = int(input().strip())\nfor _ in range(n):\n    candidate_id, name = input().strip().split()\n    voting_system.add_candidate(int(candidate_id), name)\n\nm = int(input().strip())\nfor _ in range(m):\n    candidate_id = int(input().strip())\n    voting_system.cast_vote(candidate_id)\n\nvoting_system.display_results()\n",
    "_category": "string_pattern",
    "unit_tests": "[\"\\nassert voting_system.candidates[1].votes == 3\\n\", \"\\nassert voting_system.candidates[2].votes == 2\\n\", \"\\nassert voting_system.candidates[3].votes == 1\\n\", \"\\nassert \\\"Alice\\\" in voting_system.candidates[1].name\\n\", \"\\nassert \\\"Bob\\\" in voting_system.candidates[2].name\\n\", \"\\nassert \\\"Charlie\\\" in voting_system.candidates[3].name\\n\", \"\\nassert voting_system.candidates[1].candidate_id == 1\\n\", \"\\nassert voting_system.candidates[2].candidate_id == 2\\n\", \"\\nassert voting_system.candidates[3].candidate_id == 3\\n\", \"\\nassert len(voting_system.candidates) == 3\\n\"]"
  }
]