[
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of `n` tasks, each represented as a tuple `(start, end)`, indicating the start and end times of the task. The tasks are sorted by their start times. Your goal is to determine the maximum number of non-overlapping tasks that can be selected. Two tasks are considered non-overlapping if the start time of one task is greater than or equal to the end time of the other.\n\n**Input:**\n- An integer `n` representing the number of tasks.\n- A list of `n` tuples, where each tuple `(start, end)` represents the start and end times of a task.\n\n**Output:**\n- An integer representing the maximum number of non-overlapping tasks that can be selected.\n\n**Constraints:**\n- `1 <= n <= 10^5`\n- `0 <= start < end <= 10^9`\n\n**Sample Input:**\n```\n3\n1 3\n2 5\n4 6\n```\n\n**Sample Output:**\n```\n2\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef max_non_overlapping_tasks(tasks):\n    \"\"\"\n    Returns the maximum number of non-overlapping tasks that can be selected from a list of tasks.\n\n    :param tasks: List of tuples, where each tuple (start, end) represents the start and end times of a task.\n    :return: Integer representing the maximum number of non-overlapping tasks.\n    \"\"\"\n    if not tasks:\n        return 0\n\n    count = 1\n    last_end = tasks[0][1]\n\n    for i in range(1, len(tasks)):\n        current_start, current_end = tasks[i]\n        if current_start >= last_end:\n            count += 1\n            last_end = current_end\n\n    return count\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `expression` consisting of characters including parentheses `()`, square brackets `[]`, and curly braces `{}`. Your task is to determine if the brackets in the expression are balanced. A string with balanced brackets means that each opening bracket has a corresponding closing bracket of the same type and they are correctly nested.\n\n**Input:**\n- A single string `expression` (1 \u2264 |expression| \u2264 10^3) containing characters from the set `{(), [], {}}` and possibly other non-bracket characters.\n\n**Output:**\n- Return `True` if the brackets in the expression are balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"()\"\n\"([])\"\n\"{[()]}\"\n\"{[(])}\"\n\"([)]\"\n\"((()))\"\n\"(()\"\n```\n\n**Sample Output:**\n```\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef is_balanced_brackets(expression):\n    \"\"\"\n    Checks if all the brackets in the given expression are balanced.\n\n    :param expression: A string containing characters including parentheses, square brackets, and curly braces.\n    :return: True if the brackets are balanced, False otherwise.\n    \"\"\"\n    stack = []\n    bracket_map = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n\n    return not stack\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text` consisting of lowercase letters and spaces. Your task is to implement a function `count_words` that returns a dictionary with the frequency of each word in the string, excluding common stop words: 'the', 'and', 'a', 'an', 'in', 'on', 'at', 'by', 'for', and 'with'. Assume that the input string is preprocessed to contain only lowercase letters and spaces.\n\n**Sample Input:**\n```\n\"the quick brown fox jumps over the lazy dog\"\n```\n\n**Sample Output:**\n```\n{'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef count_words(text):\n    \"\"\"\n    Returns a dictionary with the frequency of each word in the input string,\n    excluding common stop words.\n\n    :param text: A string consisting of lowercase letters and spaces.\n    :return: A dictionary with words as keys and their frequencies as values.\n    \"\"\"\n    stop_words = {'the', 'and', 'a', 'an', 'in', 'on', 'at', 'by', 'for', 'with'}\n\n    words = text.split()\n\n    word_count = {}\n\n    for word in words:\n        if word not in stop_words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n\n    return word_count\n\ntext = \"the quick brown fox jumps over the lazy dog\"\nprint(count_words(text))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `BankAccount` class in Python that simulates basic bank account operations. The class should support the following functionalities:\n\n- **Initialization**: The account balance should start at zero.\n- **Deposit**: Add a specified amount to the account balance. Only positive amounts should be accepted.\n- **Withdraw**: Subtract a specified amount from the account balance. Withdrawals should not exceed the current balance.\n- **Check Balance**: Return the current balance of the account.\n\nYour implementation should ensure that the account balance is never negative due to invalid withdrawals.\n\n**Sample Input/Output**:\n- Initialize a `BankAccount` object.\n- Deposit 100.\n- Withdraw 50.\n- Check balance (Expected output: 50).\n- Withdraw 60 (No change in balance, as it exceeds the current balance).\n- Check balance (Expected output: 50).\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass BankAccount:\n    def __init__(self):\n        \"\"\"\n        Initializes a new bank account with a balance of zero.\n        \"\"\"\n        self.balance = 0\n\n    def deposit(self, amount):\n        \"\"\"\n        Adds a specified amount to the account balance if the amount is positive.\n\n        :param amount: The amount to deposit.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n\n    def withdraw(self, amount):\n        \"\"\"\n        Subtracts a specified amount from the account balance if the amount is positive and does not exceed the current balance.\n\n        :param amount: The amount to withdraw.\n        \"\"\"\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n\n    def check_balance(self):\n        \"\"\"\n        Returns the current balance of the account.\n\n        :return: The current balance.\n        \"\"\"\n        return self.balance\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text` and a list of integers `positions`. Your task is to implement a function `remove_chars_at_positions` that removes characters from `text` at the indices specified in `positions`. The function should return the modified string. Assume that all positions in the list are valid indices within the string and that the list may contain duplicate indices, but only one character should be removed per index.\n\n**Input:**\n- A string `text` (1 \u2264 |text| \u2264 10^5)\n- A list of integers `positions` (0 \u2264 |positions| \u2264 10^5), where each element is a valid index in `text`\n\n**Output:**\n- A string with characters removed at the specified positions.\n\n**Sample Input:**\n```\ntext = \"hello world\"\npositions = [0, 5, 10]\n```\n\n**Sample Output:**\n```\n\"ello orld\"\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef remove_chars_at_positions(text, positions):\n    \"\"\"\n    Removes characters from the string at the specified positions.\n\n    :param text: The original string from which characters will be removed.\n    :param positions: A list of integer positions indicating which characters to remove.\n    :return: A new string with the specified characters removed.\n    \"\"\"\n    positions_set = set(positions)\n    return ''.join(char for idx, char in enumerate(text) if idx not in positions_set)\n\ntext = \"hello world\"\npositions = [0, 5, 10]\nprint(remove_chars_at_positions(text, positions))  # Output: \"ello orld\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `generate_report` that processes a list of sales data. Each sale is represented as a dictionary with keys `product`, `quantity`, and `price`. Your function should compute and return a string summarizing the total quantity sold and the total revenue generated from these sales.\n\n**Input:**\n- A list of dictionaries, where each dictionary contains:\n  - `product`: A string representing the product name.\n  - `quantity`: An integer representing the quantity of the product sold.\n  - `price`: A float representing the price per unit of the product.\n\n**Output:**\n- A string in the format: `\"Total Quantity Sold: X, Total Revenue: $Y\"`, where `X` is the total quantity sold and `Y` is the total revenue.\n\n**Sample Input:**\n```python\n[{\"product\": \"Laptop\", \"quantity\": 2, \"price\": 800}, {\"product\": \"Smartphone\", \"quantity\": 5, \"price\": 300}]\n```\n\n**Sample Output:**\n```\n\"Total Quantity Sold: 7, Total Revenue: $5100\"\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef generate_report(sales):\n    \"\"\"\n    Generates a report summarizing the total quantity sold and total revenue from a list of sales data.\n\n    Parameters:\n    sales (list of dict): A list where each dictionary contains 'product', 'quantity', and 'price' keys.\n\n    Returns:\n    str: A string summarizing the total quantity sold and total revenue.\n    \"\"\"\n    total_quantity = 0\n    total_revenue = 0\n\n    for sale in sales:\n        total_quantity += sale['quantity']\n        total_revenue += sale['quantity'] * sale['price']\n\n    return f\"Total Quantity Sold: {total_quantity}, Total Revenue: ${total_revenue}\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of lowercase English letters. Your task is to generate all unique permutations of the string `s`. The permutations should be returned as a sorted list of strings.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 8).\n\n**Output:**\n- A sorted list of unique permutations of the string `s`.\n\n**Sample Input:**\n```\naab\n```\n\n**Sample Output:**\n```\n['aab', 'aba', 'baa']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom itertools import permutations\n\ndef string_permutations(input_string):\n    \"\"\"\n    Generate all unique permutations of the input string and return them as a sorted list.\n\n    :param input_string: A string for which permutations are to be generated.\n    :return: A sorted list of unique permutations of the input string.\n    \"\"\"\n    perm = set(permutations(input_string))\n    result = sorted([''.join(p) for p in perm])\n    return result\n\ninput_str = \"aab\"\nprint(string_permutations(input_str))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a DNA sequence consisting of the nucleotides A, T, C, and G. Your task is to compute the GC content of the sequence, which is defined as the percentage of nucleotides that are either guanine (G) or cytosine (C). Your program should output the GC content rounded to two decimal places.\n\n**Input:**\n- A single string representing the DNA sequence. The string will only contain the characters 'A', 'T', 'C', and 'G'. The length of the string will be between 1 and 1000 characters.\n\n**Output:**\n- A single floating-point number representing the GC content of the sequence, rounded to two decimal places.\n\n**Sample Input:**\n```\nAGCTATAG\n```\n\n**Sample Output:**\n```\n37.50\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef calculate_gc_content(dna_sequence):\n    \"\"\"\n    Calculate the GC content of the DNA sequence.\n\n    Parameters:\n    dna_sequence (str): A string containing a sequence of DNA bases.\n\n    Returns:\n    float: The GC content of the DNA sequence as a percentage, rounded to two decimal places.\n    \"\"\"\n    if not dna_sequence:\n        return 0.0\n\n    total_bases = len(dna_sequence)\n    gc_count = dna_sequence.count('G') + dna_sequence.count('C')\n    gc_content = (gc_count / total_bases) * 100\n\n    return round(gc_content, 2)\n\ndna_sequence = \"AGCTATAG\"\ngc_content = calculate_gc_content(dna_sequence)\nprint(f\"{gc_content:.2f}\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a Python class named `Car` that encapsulates the properties of a car. The class should have the following attributes:\n- `make`: A string representing the manufacturer of the car.\n- `model`: A string representing the model of the car.\n- `year`: An integer representing the year the car was manufactured.\n\nAdditionally, the class should include a method `description()` that returns a formatted string detailing the car's information in the format `\"make model (year)\"`.\n\n**Sample Input:**\n```python\ncar = Car(\"Toyota\", \"Camry\", 2021)\n```\n\n**Sample Output:**\n```\nToyota Camry (2021)\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        \"\"\"\n        Initializes a new Car instance with the specified make, model, and year.\n\n        :param make: A string representing the manufacturer of the car.\n        :param model: A string representing the model of the car.\n        :param year: An integer representing the year the car was manufactured.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def description(self):\n        \"\"\"\n        Returns a formatted string with the car's information.\n\n        :return: A string in the format \"make model (year)\".\n        \"\"\"\n        return f\"{self.make} {self.model} ({self.year})\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text` consisting of words separated by spaces and punctuation. Your task is to implement a function `find_most_frequent_word(text)` that returns the most frequently occurring word in the text. If there are multiple words with the same highest frequency, return the first one encountered in the text. Words are defined as sequences of alphabetic characters and should be treated in a case-insensitive manner.\n\n**Input:**\n- A single string `text` (1 \u2264 |text| \u2264 10^5).\n\n**Output:**\n- A single string representing the most frequently occurring word.\n\n**Sample Input:**\n```\n\"This is a test. This test is only a test.\"\n```\n\n**Sample Output:**\n```\ntest\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_most_frequent_word(text):\n    \"\"\"\n    Finds the most frequently occurring word in the given text.\n\n    Parameters:\n    text (str): The input text containing words separated by spaces and punctuation.\n\n    Returns:\n    str: The most frequently occurring word in the text.\n    \"\"\"\n    from collections import Counter\n    import re\n\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text.lower())\n    word_counts = Counter(words)\n    most_frequent_word, _ = word_counts.most_common(1)[0]\n\n    return most_frequent_word\n\ntext = \"This is a test. This test is only a test.\"\nprint(find_most_frequent_word(text))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a function `process_user_data(data)` that processes user information stored in a dictionary. The function should return a formatted string with the user's name and age. However, the function must handle various edge cases gracefully. Specifically, it should manage scenarios where the input is not a dictionary, when required keys ('name' and 'age') are missing, and when the values associated with these keys are of incorrect types or invalid (e.g., an empty string for 'name' or a non-integer for 'age'). In such cases, the function should return a meaningful error message.\n\n**Sample Input and Output:**\n- Input: `\"not a dictionary\"`  \n  Output: `\"Provided data is not a dictionary.\"`\n- Input: `{'name': '', 'age': 30}`  \n  Output: `\"The 'name' value should be a non-empty string.\"`\n- Input: `{'name': 'John', 'age': 'invalid'}`  \n  Output: `\"The 'age' value should be an integer.\"`\n- Input: `{'name': 'Alice'}`  \n  Output: `\"Missing 'age' key in dictionary.\"`\n- Input: `{'age': 25}`  \n  Output: `\"Missing 'name' key in dictionary.\"`\n- Input: `{'name': 'Bob', 'age': 23}`  \n  Output: `\"Name: Bob, Age: 23\"`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef process_user_data(data):\n    \"\"\"\n    Processes user data to return a formatted string with the user's name and age.\n    Handles various edge cases including invalid data types, missing keys, and invalid values.\n\n    Parameters:\n    data (dict): A dictionary containing user information with keys 'name' and 'age'.\n\n    Returns:\n    str: A formatted string with user details or an error message.\n    \"\"\"\n    try:\n        if not isinstance(data, dict):\n            raise TypeError(\"Provided data is not a dictionary.\")\n\n        name = data.get('name')\n        age = data.get('age')\n        if name is None:\n            raise KeyError(\"Missing 'name' key in dictionary.\")\n        if age is None:\n            raise KeyError(\"Missing 'age' key in dictionary.\")\n\n        if not isinstance(name, str) or not name.strip():\n            raise ValueError(\"The 'name' value should be a non-empty string.\")\n        if not isinstance(age, int):\n            raise ValueError(\"The 'age' value should be an integer.\")\n\n        return f\"Name: {name}, Age: {age}\"\n    except (TypeError, ValueError, KeyError) as e:\n        return str(e)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dictionary `grades` where each key is a string representing a course name and each value is an integer representing the grade received in that course. Your task is to implement a function `calculate_average_grade` that computes the average grade of the student. The result should be rounded to two decimal places. If the dictionary is empty, the function should return `0.0`.\n\n**Sample Input:**\n```python\n{'Math': 85, 'Science': 90, 'History': 78}\n```\n\n**Sample Output:**\n```\n84.33\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef calculate_average_grade(grades):\n    \"\"\"\n    Calculate the average grade from a dictionary of grades.\n\n    Parameters:\n    grades (dict): A dictionary where keys are course names and values are grades.\n\n    Returns:\n    float: The average grade rounded to two decimal places.\n    \"\"\"\n    if not grades:\n        return 0.0\n    total = sum(grades.values())\n    average = total / len(grades)\n    return round(average, 2)\n\ngrades = {'Math': 85, 'Science': 90, 'History': 78}\naverage_grade = calculate_average_grade(grades)\nprint(average_grade)  # Output: 84.33\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a binary search tree (BST) class named `BinaryTree` that supports the following operations:\n- Insert a new integer value into the tree.\n- Perform an in-order traversal of the tree and return the values in a list.\n- Find and return the minimum value in the tree.\n\nYour implementation should be efficient and handle edge cases such as inserting duplicate values or finding the minimum in an empty tree.\n\n**Input:**\n- The `main` function will create a `BinaryTree` instance, insert a series of integers, and then perform the in-order traversal and find the minimum value.\n\n**Output:**\n- The in-order traversal of the tree as a list of integers.\n- The minimum value in the tree.\n\n**Sample Input:**\n- Insert values: `[5, 3, 7, 2, 4, 6, 8]`\n\n**Sample Output:**\n- In-order traversal: `[2, 3, 4, 5, 6, 7, 8]`\n- Minimum value: `2`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        \"\"\"Inserts a new value into the binary search tree.\"\"\"\n        if not self.root:\n            self.root = TreeNode(value)\n        else:\n            self._insert_recursively(self.root, value)\n\n    def _insert_recursively(self, node, value):\n        \"\"\"Helper method to insert a value recursively.\"\"\"\n        if value < node.value:\n            if node.left is None:\n                node.left = TreeNode(value)\n            else:\n                self._insert_recursively(node.left, value)\n        else:\n            if node.right is None:\n                node.right = TreeNode(value)\n            else:\n                self._insert_recursively(node.right, value)\n\n    def in_order_traversal(self):\n        \"\"\"Performs an in-order traversal of the tree and returns the values in a list.\"\"\"\n        elements = []\n        self._in_order_traversal_recursively(self.root, elements)\n        return elements\n\n    def _in_order_traversal_recursively(self, node, elements):\n        \"\"\"Helper method to perform in-order traversal recursively.\"\"\"\n        if node:\n            self._in_order_traversal_recursively(node.left, elements)\n            elements.append(node.value)\n            self._in_order_traversal_recursively(node.right, elements)\n\n    def find_minimum(self):\n        \"\"\"Finds and returns the minimum value in the tree.\"\"\"\n        if not self.root:\n            return None\n        current = self.root\n        while current.left:\n            current = current.left\n        return current.value\n\ndef main():\n    binary_tree = BinaryTree()\n    values = [5, 3, 7, 2, 4, 6, 8]\n    for value in values:\n        binary_tree.insert(value)\n\n    print(\"In-order traversal of the binary tree:\", binary_tree.in_order_traversal())\n\n    print(\"Minimum value in the binary tree:\", binary_tree.find_minimum())\n\nif __name__ == \"__main__\":\n    main()\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a directory path as input. Your task is to write a Python script that recursively lists all files within the specified directory and its subdirectories. The script should output the absolute path of each file to the console. \n\n**Input:**\n- A single string representing the directory path.\n\n**Output:**\n- Print the absolute path of each file found in the directory and its subdirectories, one per line.\n\n**Sample Input:**\n```\n/home/user\n```\n\n**Sample Output:**\n```\n/home/user/file1.txt\n/home/user/subdir1/file2.txt\n/home/user/subdir2/file3.txt\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport os\n\ndef list_files(directory_path):\n    \"\"\"\n    Recursively lists all files in the given directory and its subdirectories.\n\n    Args:\n    directory_path (str): The path to the directory to be searched.\n\n    Returns:\n    None: Prints the absolute path of each file found.\n    \"\"\"\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            print(os.path.join(root, file))\n\nlist_files(\"/home/user\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `convert_to_json(data_structure)` that accepts any data structure (such as lists, dictionaries, tuples, etc.) and returns a JSON-formatted string. The function must handle nested structures and ensure that the JSON string is properly formatted. Your solution should be robust enough to handle various data types and nested levels.\n\n**Sample Input:**\n```python\nsample_dict = {\n    'name': 'Alice',\n    'age': 30,\n    'is_employee': True,\n    'address': {\n        'street': '123 Python Lane',\n        'city': 'Codeville',\n        'zipcode': '12345'\n    },\n    'phone_numbers': ['+1234567890', '+0987654321']\n}\n\nsample_list = [1, 2, 3, (4, 5), {'a': 'b'}, [6, 7]]\n\nsample_tuple = (8, 9, {'c': 'd'}, [10, 11], ('nested', 'tuple'))\n```\n\n**Sample Output:**\n```\nDictionary to JSON:\n{\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"is_employee\": true,\n    \"address\": {\n        \"street\": \"123 Python Lane\",\n        \"city\": \"Codeville\",\n        \"zipcode\": \"12345\"\n    },\n    \"phone_numbers\": [\n        \"+1234567890\",\n        \"+0987654321\"\n    ]\n}\n\nList to JSON:\n[\n    1,\n    2,\n    3,\n    [\n        4,\n        5\n    ],\n    {\n        \"a\": \"b\"\n    },\n    [\n        6,\n        7\n    ]\n]\n\nTuple to JSON:\n[\n    8,\n    9,\n    {\n        \"c\": \"d\"\n    },\n    [\n        10,\n        11\n    ],\n    [\n        \"nested\",\n        \"tuple\"\n    ]\n]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport json\n\ndef convert_to_json(data_structure):\n    \"\"\"\n    Converts any data structure (list, dict, tuple, etc.) into a JSON-formatted string.\n\n    :param data_structure: A valid data structure that can be converted to JSON.\n    :return: String representation of the data structure in JSON format.\n    \"\"\"\n    try:\n        return json.dumps(data_structure, indent=4)\n    except (TypeError, ValueError) as e:\n        return f\"Error converting to JSON: {str(e)}\"\n\ndef main():\n    sample_dict = {\n        'name': 'Alice',\n        'age': 30,\n        'is_employee': True,\n        'address': {\n            'street': '123 Python Lane',\n            'city': 'Codeville',\n            'zipcode': '12345'\n        },\n        'phone_numbers': ['+1234567890', '+0987654321']\n    }\n\n    sample_list = [1, 2, 3, (4, 5), {'a': 'b'}, [6, 7]]\n\n    sample_tuple = (8, 9, {'c': 'd'}, [10, 11], ('nested', 'tuple'))\n\n    print(\"Dictionary to JSON:\")\n    print(convert_to_json(sample_dict))\n    print(\"\\nList to JSON:\")\n    print(convert_to_json(sample_list))\n    print(\"\\nTuple to JSON:\")\n    print(convert_to_json(sample_tuple))\n\nif __name__ == \"__main__\":\n    main()\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a binary tree with `N` nodes, where each node has an integer value. Your task is to write a function `flipBinaryTree(root)` that flips the binary tree around its root node, effectively swapping the left and right subtrees of every node. The function should modify the tree in place and return the root of the flipped tree. The binary tree is defined by the `TreeNode` class, where each node has the following attributes:\n- `value`: an integer representing the node's value.\n- `left`: a reference to the left child node, or `None` if there is no left child.\n- `right`: a reference to the right child node, or `None` if there is no right child.\n\n**Input:**\n- The function takes a single argument, `root`, which is the root node of the binary tree.\n\n**Output:**\n- The function should return the root node of the flipped binary tree.\n\n**Sample Input:**\n```\n    1\n   / \\\n  2   3\n / \\\n4   5\n```\n\n**Sample Output:**\n```\n    1\n   / \\\n  3   2\n     / \\\n    5   4\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef flipBinaryTree(root):\n    \"\"\"\n    Flips the binary tree around its root node, swapping the left and right subtrees of every node.\n\n    :param root: TreeNode, the root node of the binary tree.\n    :return: TreeNode, the root node of the flipped binary tree.\n    \"\"\"\n    if root is None:\n        return None\n\n    root.left, root.right = root.right, root.left\n\n    flipBinaryTree(root.left)\n    flipBinaryTree(root.right)\n\n    return root\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `BankAccount` class in Python that simulates basic banking operations. The class should support the following functionalities:\n\n- **Deposit**: Add a specified amount to the account balance. The amount must be positive.\n- **Withdraw**: Subtract a specified amount from the account balance, ensuring the balance does not go negative. The amount must be positive.\n- **Get Balance**: Return the current balance of the account.\n- **Get Transactions**: Return a list of all transactions, where each transaction is a string indicating the amount and the type (deposit or withdrawal).\n- **Get Statement**: Return a formatted string that includes the account holder's name, account number, current balance, and a list of all transactions.\n\nYour implementation should handle invalid inputs gracefully by raising appropriate exceptions.\n\n**Sample Input/Output**:\n```python\naccount = BankAccount(\"John Doe\", \"123456789\")\naccount.deposit(100)\naccount.withdraw(50)\nprint(account.get_balance())  # Output: 50\nprint(account.get_transactions())  # Output: ['Deposited: 100', 'Withdrew: 50']\nprint(account.get_statement())\n# Expected Output:\n# Account Holder: John Doe\n# Account Number: 123456789\n# Current Balance: 50\n# Transactions:\n#   Deposited: 100\n#   Withdrew: 50\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass BankAccount:\n    def __init__(self, account_holder_name, account_number):\n        \"\"\"\n        Initialize a new bank account with the given account holder's name and account number.\n\n        :param account_holder_name: The name of the account holder.\n        :param account_number: The account number.\n        \"\"\"\n        self.account_holder_name = account_holder_name\n        self.account_number = account_number\n        self.balance = 0\n        self.transactions = []\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount into the account.\n\n        :param amount: The amount to deposit.\n        :raises ValueError: If the amount is not positive.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n            self.transactions.append(f\"Deposited: {amount}\")\n        else:\n            raise ValueError(\"Deposit amount must be positive.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount from the account.\n\n        :param amount: The amount to withdraw.\n        :raises ValueError: If the amount is not positive.\n        :raises ValueError: If the amount exceeds the current balance.\n        \"\"\"\n        if amount > self.balance:\n            print(\"Insufficient funds. Withdrawal not allowed.\")\n        elif amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        else:\n            self.balance -= amount\n            self.transactions.append(f\"Withdrew: {amount}\")\n\n    def get_balance(self):\n        \"\"\"\n        Get the current balance of the account.\n\n        :return: The current balance.\n        \"\"\"\n        return self.balance\n\n    def get_transactions(self):\n        \"\"\"\n        Get a list of all transactions.\n\n        :return: A list of transaction strings.\n        \"\"\"\n        return self.transactions\n\n    def get_statement(self):\n        \"\"\"\n        Get a formatted statement of the account.\n\n        :return: A formatted string with account details and transactions.\n        \"\"\"\n        statement = (f\"Account Holder: {self.account_holder_name}\\n\"\n                     f\"Account Number: {self.account_number}\\n\"\n                     f\"Current Balance: {self.balance}\\n\"\n                     \"Transactions:\\n\")\n        for transaction in self.transactions:\n            statement += f\"  {transaction}\\n\"\n        return statement\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of cities, each represented by its coordinates on a 2D plane. Your task is to find the shortest possible route that visits each city exactly once and returns to the starting city. Implement a function `optimize_route` that uses the Nearest Neighbor heuristic to solve this problem.\n\n**Input:**\n- A list of tuples, where each tuple represents the coordinates of a city in the form `(x, y)`.\n\n**Output:**\n- A list of tuples representing the coordinates of the cities in the order they should be visited to form the shortest route, starting and ending at the same city.\n\n**Sample Input:**\n```python\ncities = [(0, 0), (1, 5), (5, 2), (6, 6), (8, 3)]\n```\n\n**Sample Output:**\n```python\n[(0, 0), (1, 5), (5, 2), (8, 3), (6, 6), (0, 0)]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport math\n\ndef nearest_neighbor_tsp(distance_matrix, start=0):\n    \"\"\"\n    Solves the Traveling Salesman Problem using the Nearest Neighbor heuristic.\n\n    :param distance_matrix: A 2D list representing the distances between cities.\n    :param start: The index of the starting city.\n    :return: A list of indices representing the order of cities to visit.\n    \"\"\"\n    n = len(distance_matrix)\n    unvisited = set(range(n))\n    unvisited.remove(start)\n    tour = [start]\n    while unvisited:\n        last = tour[-1]\n        next_city = min(unvisited, key=lambda city: distance_matrix[last][city])\n        tour.append(next_city)\n        unvisited.remove(next_city)\n    return tour\n\ndef calculate_distance(point1, point2):\n    \"\"\"\n    Calculates the Euclidean distance between two points.\n\n    :param point1: A tuple representing the coordinates of the first point.\n    :param point2: A tuple representing the coordinates of the second point.\n    :return: The Euclidean distance between point1 and point2.\n    \"\"\"\n    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\ndef optimize_route(cities):\n    \"\"\"\n    Finds the shortest route that visits each city exactly once and returns to the starting city using the Nearest Neighbor heuristic.\n\n    :param cities: A list of tuples representing the coordinates of the cities.\n    :return: A list of tuples representing the coordinates of the cities in the order they should be visited.\n    \"\"\"\n    n = len(cities)\n    distance_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = calculate_distance(cities[i], cities[j])\n            distance_matrix[i][j] = dist\n            distance_matrix[j][i] = dist\n\n    tour = nearest_neighbor_tsp(distance_matrix)\n    tour.append(tour[0])  # return to the starting point\n    return [cities[i] for i in tour]\n\ncities = [(0, 0), (1, 5), (5, 2), (6, 6), (8, 3)]\nprint(optimize_route(cities))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string in `snake_case` format. Your task is to write a function `convert_to_pascal_case` that converts this string into `PascalCase`. The input string will consist of lowercase letters and underscores only. The function should return the converted string.\n\n**Sample Input:**\n```\nexample_function_name\n```\n\n**Sample Output:**\n```\nExampleFunctionName\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef convert_to_pascal_case(snake_str):\n    \"\"\"\n    Convert a snake_case string to PascalCase.\n\n    Parameters:\n    snake_str (str): A string in snake_case format.\n\n    Returns:\n    str: The converted string in PascalCase.\n    \"\"\"\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\nexample = \"example_function_name\"\npascal_case_example = convert_to_pascal_case(example)\nprint(pascal_case_example)  # Output: ExampleFunctionName\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a Python class named `FileManager` that supports basic file operations. Your class should include the following methods:\n\n- `read_file(file_path)`: This method should read the contents of a file located at `file_path` and return it as a string. If the file does not exist, the method should return an empty string.\n- `write_file(file_path, content)`: This method should write the string `content` to the file located at `file_path`. If the file already exists, it should be overwritten.\n- `append_to_file(file_path, content)`: This method should append the string `content` to the end of the file located at `file_path`. If the file does not exist, it should be created.\n- `delete_file(file_path)`: This method should delete the file located at `file_path`. If the file does not exist, no action should be taken.\n\n**Sample Input/Output:**\n\nAssume the following file operations are performed in sequence:\n\n1. `write_file('example.txt', 'Hello, World!')`\n2. `read_file('example.txt')` should return `'Hello, World!'`\n3. `append_to_file('example.txt', ' Welcome to FileManager.')`\n4. `read_file('example.txt')` should return `'Hello, World! Welcome to FileManager.'`\n5. `delete_file('example.txt')`\n6. `read_file('example.txt')` should return `''`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport os\n\nclass FileManager:\n    def read_file(self, file_path):\n        \"\"\"Read the contents of a file and return it as a string. Return an empty string if the file does not exist.\"\"\"\n        try:\n            with open(file_path, 'r') as file:\n                return file.read()\n        except FileNotFoundError:\n            return ''\n\n    def write_file(self, file_path, content):\n        \"\"\"Write the provided content to a file, overwriting the file if it already exists.\"\"\"\n        with open(file_path, 'w') as file:\n            file.write(content)\n\n    def append_to_file(self, file_path, content):\n        \"\"\"Append the provided content to the end of a file. Create the file if it does not exist.\"\"\"\n        with open(file_path, 'a') as file:\n            file.write(content)\n\n    def delete_file(self, file_path):\n        \"\"\"Delete the specified file. Do nothing if the file does not exist.\"\"\"\n        if os.path.exists(file_path):\n            os.remove(file_path)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of tuples, where each tuple consists of a product name (a string) and its price (a float). Your task is to implement a function `sort_products_by_price` that sorts the list of tuples in ascending order based on the price. If two products have the same price, their relative order should remain unchanged.\n\n**Input:**\n- A list of tuples, where each tuple contains a product name and its price.\n\n**Output:**\n- A list of tuples sorted by price in ascending order.\n\n**Sample Input:**\n```python\n[(\"Apple\", 1.20), (\"Banana\", 0.99), (\"Cherry\", 1.20), (\"Date\", 2.50)]\n```\n\n**Sample Output:**\n```python\n[(\"Banana\", 0.99), (\"Apple\", 1.20), (\"Cherry\", 1.20), (\"Date\", 2.50)]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef sort_products_by_price(products):\n    \"\"\"\n    Sorts a list of product tuples by price in ascending order.\n    If two products have the same price, their order remains unchanged.\n\n    :param products: List of tuples, where each tuple contains a product name and its price.\n    :return: List of tuples sorted by price in ascending order.\n    \"\"\"\n    return sorted(products, key=lambda product: product[1])\n\nproducts = [(\"Apple\", 1.20), (\"Banana\", 0.99), (\"Cherry\", 1.20), (\"Date\", 2.50)]\nsorted_products = sort_products_by_price(products)\nprint(sorted_products)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Book` class to manage book information. The class should have the following functionalities:\n\n- An initializer method that accepts three parameters: `title` (a string), `author` (a string), and `pages` (an integer). These parameters should be used to set the respective attributes of the class.\n- A method `describe_book` that returns a formatted string. The format should be \"Title: <title>, Author: <author>, Pages: <pages>\".\n\n**Sample Input:**\n- `title = \"The Great Gatsby\"`\n- `author = \"F. Scott Fitzgerald\"`\n- `pages = 180`\n\n**Sample Output:**\n- `\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Pages: 180\"`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, pages):\n        \"\"\"\n        Initializes a new Book instance with the given title, author, and number of pages.\n\n        :param title: The title of the book (string).\n        :param author: The author of the book (string).\n        :param pages: The number of pages in the book (integer).\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def describe_book(self):\n        \"\"\"\n        Returns a string describing the book in the format:\n        \"Title: <title>, Author: <author>, Pages: <pages>\".\n\n        :return: A formatted string describing the book.\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, Pages: {self.pages}\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function that reads data from a JSON file and returns it as a Python dictionary. Your function should handle two types of errors gracefully: if the file does not exist, or if the file is not a valid JSON file, it should return an empty dictionary. \n\n**Function Signature:**\n```python\ndef read_json_file(filename: str) -> dict:\n```\n\n**Constraints:**\n- The filename is a string representing the path to the JSON file.\n- The function should return a dictionary containing the data from the JSON file, or an empty dictionary if an error occurs.\n\n**Sample Input/Output:**\n- Input: `read_json_file(\"data.json\")` where `data.json` contains `{\"name\": \"John\", \"age\": 30}`\n- Output: `{\"name\": \"John\", \"age\": 30}`\n- Input: `read_json_file(\"nonexistent.json\")`\n- Output: `{}`\n- Input: `read_json_file(\"invalid.json\")` where `invalid.json` contains `{\"name\": \"John\", \"age\": 30`\n- Output: `{}`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport json\nimport os\n\ndef read_json_file(filename: str) -> dict:\n    \"\"\"\n    Reads a JSON file and returns the data as a Python dictionary.\n    If the file does not exist or is not a valid JSON file, returns an empty dictionary.\n\n    :param filename: The path to the JSON file.\n    :return: A dictionary containing the data from the JSON file, or an empty dictionary if an error occurs.\n    \"\"\"\n    if not os.path.exists(filename):\n        return {}\n\n    try:\n        with open(filename, 'r') as file:\n            data = json.load(file)\n        return data\n    except json.JSONDecodeError:\n        return {}\n    except Exception:\n        return {}\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of `n` words and a `target` word. Your task is to determine the word in the list that is the closest match to the `target` word based on the Levenshtein distance. The Levenshtein distance between two strings is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Implement a function `closest_match(words, target)` that takes a list of words and a target word as input and returns the closest match.\n\n**Input:**\n- A list of words `words` (1 \u2264 len(words) \u2264 1000), where each word consists of lowercase English letters and has a length between 1 and 20.\n- A target word `target` consisting of lowercase English letters with a length between 1 and 20.\n\n**Output:**\n- The closest match to the target word from the list of words.\n\n**Sample Input:**\n```python\nwords = [\"kitten\", \"sitting\", \"kitchen\", \"biting\"]\ntarget = \"kitten\"\n```\n\n**Sample Output:**\n```python\n\"kitten\"\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef levenshtein_distance(s1, s2):\n    \"\"\"\n    Calculate the Levenshtein distance between two strings.\n\n    :param s1: First string\n    :param s2: Second string\n    :return: Levenshtein distance between s1 and s2\n    \"\"\"\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]\n\ndef closest_match(words, target):\n    \"\"\"\n    Find the closest match to the target word from a list of words based on Levenshtein distance.\n\n    :param words: List of words\n    :param target: Target word\n    :return: Closest match to the target word\n    \"\"\"\n    closest = words[0]\n    smallest_distance = levenshtein_distance(closest, target)\n\n    for word in words[1:]:\n        distance = levenshtein_distance(word, target)\n        if distance < smallest_distance:\n            smallest_distance = distance\n            closest = word\n\n    return closest\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given two strings, `text` and `pattern`. Your task is to write a function `count_pattern_occurrences(text, pattern)` that returns the number of times `pattern` appears in `text`, including overlapping occurrences. \n\n**Input:**\n- The first line contains the string `text` (1 \u2264 |text| \u2264 10^5).\n- The second line contains the string `pattern` (1 \u2264 |pattern| \u2264 |text|).\n\n**Output:**\n- Print a single integer representing the number of times `pattern` appears in `text`.\n\n**Sample Input:**\n```\nabcabcabc\nabc\n```\n\n**Sample Output:**\n```\n3\n```\n\n**Sample Input:**\n```\naaaa\naa\n```\n\n**Sample Output:**\n```\n3\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef count_pattern_occurrences(text, pattern):\n    \"\"\"\n    Counts the number of times the pattern appears in the text, including overlapping occurrences.\n\n    :param text: The string in which to search for the pattern.\n    :param pattern: The string pattern to search for in the text.\n    :return: The number of times the pattern appears in the text.\n    \"\"\"\n    count = 0\n    pattern_length = len(pattern)\n    for i in range(len(text) - pattern_length + 1):\n        if text[i:i + pattern_length] == pattern:\n            count += 1\n    return count\n\ntext = 'abcabcabc'\npattern = 'abc'\nprint(count_pattern_occurrences(text, pattern))  # Output: 3\n\ntext = 'aaaa'\npattern = 'aa'\nprint(count_pattern_occurrences(text, pattern))  # Output: 3\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Calculator` class in Python that supports basic arithmetic operations and number system conversions. The class should include the following methods:\n\n- `add(a, b)`: Returns the sum of `a` and `b`.\n- `subtract(a, b)`: Returns the result of subtracting `b` from `a`.\n- `multiply(a, b)`: Returns the product of `a` and `b`.\n- `divide(a, b)`: Returns the result of dividing `a` by `b`. If `b` is zero, the function should raise a `ValueError` with the message \"Cannot divide by zero.\"\n- `to_binary(num)`: Converts `num` to a binary string without the '0b' prefix.\n- `to_octal(num)`: Converts `num` to an octal string without the '0o' prefix.\n- `to_hexadecimal(num)`: Converts `num` to a hexadecimal string without the '0x' prefix.\n\n**Sample Input/Output:**\n\nFor the following operations:\n- `add(5, 3)` should return `8`.\n- `subtract(10, 4)` should return `6`.\n- `multiply(6, 7)` should return `42`.\n- `divide(8, 2)` should return `4.0`.\n- `to_binary(10)` should return `'1010'`.\n- `to_octal(10)` should return `'12'`.\n- `to_hexadecimal(10)` should return `'a'`.\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Calculator:\n    def add(self, a, b):\n        \"\"\"Return the sum of a and b.\"\"\"\n        return a + b\n\n    def subtract(self, a, b):\n        \"\"\"Return the result of subtracting b from a.\"\"\"\n        return a - b\n\n    def multiply(self, a, b):\n        \"\"\"Return the product of a and b.\"\"\"\n        return a * b\n\n    def divide(self, a, b):\n        \"\"\"Return the result of dividing a by b. Raises ValueError if b is zero.\"\"\"\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        return a / b\n\n    def to_binary(self, num):\n        \"\"\"Convert num to a binary string without the '0b' prefix.\"\"\"\n        return bin(num)[2:]\n\n    def to_octal(self, num):\n        \"\"\"Convert num to an octal string without the '0o' prefix.\"\"\"\n        return oct(num)[2:]\n\n    def to_hexadecimal(self, num):\n        \"\"\"Convert num to a hexadecimal string without the '0x' prefix.\"\"\"\n        return hex(num)[2:]\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with writing a regular expression pattern to validate IPv6 addresses. An IPv6 address consists of eight groups of four hexadecimal digits, separated by colons (`:`). Each group can contain numbers from `0` to `9` and letters from `A` to `F` (case-insensitive). Leading zeros in a group can be omitted. The double colon (`::`) is used to compress consecutive groups of zeros and can only appear once in an address.\n\n**Input:**\n- A list of strings, each representing an IPv6 address.\n\n**Output:**\n- For each string, output \"valid\" if it is a valid IPv6 address, otherwise output \"invalid\".\n\n**Sample Input:**\n```\n2001:0db8:85a3:0000:0000:8a2e:0370:7334\n2001:db8:85a3::8a2e:370:7334\n::\n2001:db8::\n2001::1\n2001:db8::8a2e:370:7334\n2001:db8:85a3:0:0:8a2e:370:7334\n2001:db8::85a3:0:0:8a2e:370:7334\n2001:db8::1:2:3::4\n2001:db8:85a3::12345\n2001:db8:85a3::g123\n```\n\n**Sample Output:**\n```\nvalid\nvalid\nvalid\nvalid\nvalid\nvalid\nvalid\ninvalid\ninvalid\ninvalid\ninvalid\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef is_valid_ipv6(ipv6_address):\n    \"\"\"\n    Validates if the given string is a valid IPv6 address.\n\n    :param ipv6_address: A string representing an IPv6 address.\n    :return: True if the string is a valid IPv6 address, False otherwise.\n    \"\"\"\n    ipv6_pattern = re.compile('''\n        ^  # start of string\n        (?:\n            (?:  # non-capturing group for 7 groups of 4 hex digits separated by colons\n                [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n            ){0,7}  # zero to seven repetitions\n            (?:  # non-capturing group for the final group of 4 hex digits\n                [0-9A-Fa-f]{1,4}  # 1 to 4 hex digits\n            )  # end of final group\n            |  # OR\n            (?:  # non-capturing group for IPv6 addresses with double colons\n                (?:  # non-capturing group for 1 to 6 groups of 4 hex digits separated by colons\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){0,1}  # zero or one repetition\n                :  # double colon\n                (?:  # non-capturing group for 0 to 5 groups of 4 hex digits separated by colons\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){0,5}  # zero to five repetitions\n                (?:  # non-capturing group for the final group of 4 hex digits\n                    [0-9A-Fa-f]{1,4}  # 1 to 4 hex digits\n                )  # end of final group\n                |  # OR\n                (?:  # non-capturing for IPv6 addresses ending in double colon\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){1,7}  # one to seven repetitions\n                :  # single colon at the end\n            )  # end of IPv6 addresses with double colons\n        )  # end of main non-capturing group\n        $  # end of string\n    ''', re.VERBOSE)\n    return ipv6_pattern.match(ipv6_address) is not None\n\ndef test_ipv6_addresses(ipv6_addresses):\n    \"\"\"\n    Tests a list of IPv6 addresses for validity.\n\n    :param ipv6_addresses: A list of strings, each representing an IPv6 address.\n    \"\"\"\n    for address in ipv6_addresses:\n        print(f'{address}: {\"valid\" if is_valid_ipv6(address) else \"invalid\"}')\n\ntest_ipv6_addresses([\n    '2001:0db8:85a3:0000:0000:8a2e:0370:7334',\n    '2001:db8:85a3::8a2e:370:7334',\n    '::',\n    '2001:db8::',\n    '2001::1',\n    '2001:db8::8a2e:370:7334',\n    '2001:db8:85a3:0:0:8a2e:370:7334',\n    '2001:db8::85a3:0:0:8a2e:370:7334',\n    '2001:db8::1:2:3::4',\n    '2001:db8:85a3::12345',\n    '2001:db8:85a3::g123'\n])\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a Python dictionary `person_info` with keys 'name', 'age', and 'city'. Your task is to implement a function `format_person_info(info)` that returns a string formatted as \"Name: [name], Age: [age], City: [city]\". \n\n**Input:**\n- A dictionary `person_info` with the following structure:\n  - `person_info['name']`: A string representing the person's name.\n  - `person_info['age']`: An integer representing the person's age.\n  - `person_info['city']`: A string representing the city where the person lives.\n\n**Output:**\n- A string formatted as \"Name: [name], Age: [age], City: [city]\".\n\n**Sample Input:**\n```python\nperson_info = {\n    'name': 'Alice Johnson',\n    'age': 28,\n    'city': 'Los Angeles'\n}\n```\n\n**Sample Output:**\n```\nName: Alice Johnson, Age: 28, City: Los Angeles\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef format_person_info(info):\n    \"\"\"\n    Formats the given dictionary containing a person's information into a string.\n\n    Parameters:\n    info (dict): A dictionary with keys 'name', 'age', and 'city'.\n\n    Returns:\n    str: A formatted string in the form \"Name: [name], Age: [age], City: [city]\".\n    \"\"\"\n    return f\"Name: {info['name']}, Age: {info['age']}, City: {info['city']}\"\n\nperson_info = {\n    'name': 'Alice Johnson',\n    'age': 28,\n    'city': 'Los Angeles'\n}\n\nformatted_string = format_person_info(person_info)\nprint(formatted_string)  # Output: Name: Alice Johnson, Age: 28, City: Los Angeles\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `create_wordcloud(text)` that generates and displays a word cloud from a given string `text`. The word cloud should be created using the `wordcloud` library and visualized with `matplotlib`. The function should produce a word cloud with a width of 800 pixels, a height of 400 pixels, and a white background. The axis labels should be turned off in the displayed plot.\n\n**Sample Input:**\n```\n\"Competitive programming is a mind sport requiring logical thinking and problem-solving skills. It involves solving algorithmic problems under time constraints.\"\n```\n\n**Sample Output:**\nA word cloud image displaying the words from the input text with the specified dimensions and background color.\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef create_wordcloud(text):\n    \"\"\"\n    Generates and displays a word cloud from the given text.\n\n    Parameters:\n    text (str): The input text from which to generate the word cloud.\n    \"\"\"\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')  # Turn off axis labels\n    plt.show()\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with developing a Python script that continuously monitors the system's CPU and memory usage. The script should log these metrics to a file every 5 seconds, with each log entry timestamped. Use the `psutil` library to gather system information. Your script should be able to handle indefinite monitoring until manually stopped.\n\n**Input:**\n- No explicit input is required. The script will monitor system resources continuously.\n\n**Output:**\n- The script should output log entries to a file named `system_monitor.log` in the following format:\n  ```\n  <timestamp> - CPU Usage: <cpu_usage>% | Memory Usage: <memory_usage>%\n  ```\n  where `<timestamp>` is the current date and time, `<cpu_usage>` is the CPU usage percentage, and `<memory_usage>` is the memory usage percentage.\n\n**Example Output:**\n```\n2023-10-05 14:23:15 - CPU Usage: 12% | Memory Usage: 34%\n2023-10-05 14:23:20 - CPU Usage: 15% | Memory Usage: 35%\n2023-10-05 14:23:25 - CPU Usage: 10% | Memory Usage: 33%\n```\n\n**Instructions:**\n- Install the `psutil` library if not already installed: `pip install psutil`\n- Run the script to start monitoring.\n- Logs are written to `system_monitor.log` in the same directory.\n- Use `Ctrl+C` to stop the script.\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport psutil\nimport time\nimport datetime\n\ndef monitor_system_resources(interval=5, logfile='system_monitor.log'):\n    \"\"\"\n    Continuously monitors the CPU and memory usage of the system and logs the\n    data to a file with timestamps every 'interval' seconds.\n\n    :param interval: Time interval (in seconds) between log entries.\n    :param logfile: Name of the log file.\n    \"\"\"\n    with open(logfile, 'a') as file:\n        while True:\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            cpu_usage = psutil.cpu_percent(interval=1)\n            memory_usage = psutil.virtual_memory().percent\n            log_entry = f\"{timestamp} - CPU Usage: {cpu_usage}% | Memory Usage: {memory_usage}%\\n\"\n            file.write(log_entry)\n            print(log_entry.strip())\n            time.sleep(interval)\n\nif __name__ == \"__main__\":\n    print(\"Setting up system resource monitoring...\")\n    print(\"* Install 'psutil' library if you haven't already: `pip install psutil`\")\n    print(\"* Run this script to start monitoring your system's CPU and memory usage.\")\n    print(\"* The logs are written to 'system_monitor.log' in the same directory as this script.\")\n    print(\"* Use Ctrl+C to stop the script when you need to.\")\n    print(\"Starting to monitor now...\\n\")\n    monitor_system_resources()\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `expression` consisting of characters '(', ')', '{', '}', '[' and ']'. Your task is to determine if the parentheses in the string are balanced. A string with balanced parentheses means that each opening parenthesis has a corresponding closing parenthesis in the correct order.\n\n**Input:**\n- A single string `expression` (1 \u2264 len(expression) \u2264 10^5) containing only the characters '(', ')', '{', '}', '[' and ']'.\n\n**Output:**\n- Return `True` if the parentheses in the string are balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"{[()]}\"\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\n\"{[(])}\"\n```\n\n**Sample Output:**\n```\nFalse\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef is_balanced_parentheses(expression):\n    \"\"\"\n    Determines if the parentheses in the given expression are balanced.\n\n    :param expression: A string containing only the characters '(', ')', '{', '}', '[' and ']'.\n    :return: True if the parentheses are balanced, False otherwise.\n    \"\"\"\n    stack = []\n    matching_parentheses = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in matching_parentheses.values():\n            stack.append(char)\n        elif char in matching_parentheses:\n            if not stack or stack[-1] != matching_parentheses[char]:\n                return False\n            stack.pop()\n\n    return not stack\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nImplement a `Car` class in Python with the following specifications:\n\n- **Constructor (`__init__`)**: Initialize the car with `make`, `model`, `year`, and `color`. Set the initial speed to 0.\n- **Methods**:\n  - `start_engine`: Print \"Engine started.\"\n  - `stop_engine`: Print \"Engine stopped.\"\n  - `paint(new_color)`: Change the car's color to `new_color` and print \"The car is now {new_color}.\"\n  - `accelerate(speed_increase)`: Increase the car's speed by `speed_increase` and print \"The car has accelerated by {speed_increase} mph. Current speed: {current_speed} mph.\"\n  - `brake(speed_decrease)`: Decrease the car's speed by `speed_decrease`. If `speed_decrease` is greater than the current speed, set the speed to 0 and print \"The car has come to a complete stop.\" Otherwise, print \"The car has slowed down by {speed_decrease} mph. Current speed: {current_speed} mph.\"\n  - `__str__`: Return a string representation of the car in the format \"{year} {make} {model} in {color} with current speed of {speed} mph.\"\n\n**Sample Input/Output:**\n```\ncar = Car(\"Toyota\", \"Corolla\", 2021, \"red\")\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 0 mph.\ncar.accelerate(30)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 30 mph.\ncar.brake(10)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 20 mph.\ncar.brake(30)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 0 mph.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year, color):\n        \"\"\"\n        Initialize a new Car instance.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.speed = 0  # Initialize the speed attribute to 0\n\n    def start_engine(self):\n        \"\"\"\n        Start the car's engine.\n        \"\"\"\n        print(\"Engine started.\")\n\n    def stop_engine(self):\n        \"\"\"\n        Stop the car's engine.\n        \"\"\"\n        print(\"Engine stopped.\")\n\n    def paint(self, new_color):\n        \"\"\"\n        Paint the car a new color.\n\n        :param new_color: The new color for the car.\n        \"\"\"\n        self.color = new_color\n        print(f\"The car is now {self.color}.\")\n\n    def accelerate(self, speed_increase):\n        \"\"\"\n        Increase the car's speed.\n\n        :param speed_increase: The amount to increase the car's speed by.\n        \"\"\"\n        self.speed += speed_increase\n        print(f\"The car has accelerated by {speed_increase} mph. Current speed: {self.speed} mph.\")\n\n    def brake(self, speed_decrease):\n        \"\"\"\n        Decrease the car's speed.\n\n        :param speed_decrease: The amount to decrease the car's speed by.\n        \"\"\"\n        if speed_decrease > self.speed:\n            self.speed = 0\n            print(\"The car has come to a complete stop.\")\n        else:\n            self.speed -= speed_decrease\n            print(f\"The car has slowed down by {speed_decrease} mph. Current speed: {self.speed} mph.\")\n\n    def __str__(self):\n        \"\"\"\n        Return a string representation of the car.\n\n        :return: A string describing the car.\n        \"\"\"\n        return f\"{self.year} {self.make} {self.model} in {self.color} with current speed of {self.speed} mph.\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with writing a regular expression to validate URLs. The URLs can optionally start with `http` or `https`. They should not include other protocols such as `ftp`, `mailto`, etc. The regular expression should be case-insensitive. Your solution should include a function `is_valid_url` that takes a string as input and returns `True` if the string is a valid URL according to the specified rules, and `False` otherwise.\n\n**Sample Input:**\n```\nhttp://example.com\nhttps://example.com\nexample.com\nftp://example.com\nmailto:test@example.com\n```\n\n**Sample Output:**\n```\nTrue\nTrue\nTrue\nFalse\nFalse\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Validates if the given URL is valid according to the specified rules.\n\n    Args:\n    url (str): The URL to validate.\n\n    Returns:\n    bool: True if the URL is valid, False otherwise.\n    \"\"\"\n    url_pattern = re.compile(r'^(https?:\\/\\/)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(:\\d+)?(\\/[^\\s]*)?$', re.IGNORECASE)\n    return url_pattern.match(url) is not None\n\nprint(is_valid_url(\"http://example.com\"))    # True\nprint(is_valid_url(\"https://example.com\"))   # True\nprint(is_valid_url(\"example.com\"))           # True\nprint(is_valid_url(\"ftp://example.com\"))     # False\nprint(is_valid_url(\"mailto:test@example.com\")) # False\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string in `snake_case` format. Your task is to write a function `convert_snake_to_camel` that converts this string into `camelCase` format. The function should handle strings with multiple underscores and should also work for strings that are already in `camelCase` or `PascalCase`. \n\n**Input:**\n- A single string `snake_str` (1 \u2264 len(snake_str) \u2264 100) consisting of lowercase letters, uppercase letters, and underscores.\n\n**Output:**\n- A single string in `camelCase` format.\n\n**Sample Input:**\n```\nhello_world\nthis_is_a_test\nalreadyCamelCase\nPascalCase\n```\n\n**Sample Output:**\n```\nhelloWorld\nthisIsATest\nalreadyCamelCase\npascalCase\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef convert_snake_to_camel(snake_str):\n    \"\"\"\n    Convert a string from snake_case to camelCase format.\n\n    Parameters:\n    snake_str (str): The input string in snake_case format.\n\n    Returns:\n    str: The converted string in camelCase format.\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_str\n\nprint(convert_snake_to_camel('hello_world'))       # Output: helloWorld\nprint(convert_snake_to_camel('this_is_a_test'))    # Output: thisIsATest\nprint(convert_snake_to_camel('alreadyCamelCase'))  # Output: alreadyCamelCase\nprint(convert_snake_to_camel('PascalCase'))        # Output: pascalCase\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Book` class to manage book information. The class should support the following operations:\n\n1. **Initialization**: Create an instance of the `Book` class with the following attributes:\n   - `title`: A string representing the title of the book.\n   - `author`: A string representing the author of the book.\n   - `year_published`: An integer representing the year the book was published.\n\n2. **Retrieve Book Information**: Implement a method to return a formatted string containing the book's title, author, and year of publication in the format: `\"Title: <title>, Author: <author>, Year: <year_published>\"`.\n\n**Sample Input/Output**:\n- Input: `Book(\"1984\", \"George Orwell\", 1949)`\n- Output: `\"Title: 1984, Author: George Orwell, Year: 1949\"`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Book:\n    def __init__(self, title: str, author: str, year_published: int):\n        \"\"\"\n        Initialize a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param year_published: The year the book was published.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def get_book_info(self) -> str:\n        \"\"\"\n        Return a formatted string containing the book's title, author, and year of publication.\n\n        :return: A string in the format \"Title: <title>, Author: <author>, Year: <year_published>\".\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, Year: {self.year_published}\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given two strings `text1` and `text2`. Your task is to implement a function `find_common_words` that returns a list of common words present in both strings. The comparison should be case-insensitive and only consider alphanumeric characters. Additionally, ignore the following common stop words: 'the', 'and', 'is', 'a', 'an', 'of', 'for', 'it', 'in', 'on', 'at', 'to', 'with', 'as', 'by', 'that', 'this', 'these', 'those'. The order of words in the output list does not matter.\n\n**Sample Input:**\n```\ntext1 = \"Python is a great language for data analysis and data science\"\ntext2 = \"Data analysis is an important part of data science\"\n```\n\n**Sample Output:**\n```\n['data', 'science', 'analysis']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\nfrom collections import Counter\n\ndef find_common_words(text1, text2):\n    \"\"\"\n    Returns a list of common words found in both input strings, ignoring case and stop words.\n\n    :param text1: First input string\n    :param text2: Second input string\n    :return: List of common words\n    \"\"\"\n    stop_words = set(['the', 'and', 'is', 'a', 'an', 'of', 'for', 'it', 'in', 'on', 'at', 'to', 'with', 'as', 'by', 'that', 'this', 'these', 'those'])\n\n    def clean_text(text):\n        cleaned_text = re.sub(r'[^a-zA-Z0-9\\s]', '', text).lower()\n        words = cleaned_text.split()\n        filtered_words = [word for word in words if word not in stop_words]\n        return filtered_words\n\n    words1 = clean_text(text1)\n    words2 = clean_text(text2)\n\n    count1 = Counter(words1)\n    count2 = Counter(words2)\n\n    common_words = list((count1 & count2).elements())\n\n    return common_words\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are developing a text editor that requires highlighting all occurrences of a specific word within a given text. Your task is to implement a function `highlight_word` that accepts two parameters: a string `text` and a string `word`. The function should return a new string where each occurrence of `word` in `text` is enclosed in asterisks (*). Ensure that only whole words are highlighted, not substrings of other words.\n\n**Input:**\n- The first line contains the text `text` (1 \u2264 |text| \u2264 1000).\n- The second line contains the word `word` (1 \u2264 |word| \u2264 100).\n\n**Output:**\n- A single line containing the modified text with the specified word highlighted.\n\n**Sample Input:**\n```\nPython is a great programming language. Python is versatile.\nPython\n```\n\n**Sample Output:**\n```\n*Python* is a great programming language. *Python* is versatile.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef highlight_word(text, word):\n    \"\"\"\n    Highlights all occurrences of a specific word in a given text by surrounding it with asterisks (*).\n\n    Parameters:\n    text (str): The input text where the word needs to be highlighted.\n    word (str): The word to be highlighted in the text.\n\n    Returns:\n    str: The modified text with the specified word highlighted.\n    \"\"\"\n    highlighted_text = re.sub(r'\\b' + re.escape(word) + r'\\b', '*' + word + '*', text)\n    return highlighted_text\n\ntext = \"Python is a great programming language. Python is versatile.\"\nword = \"Python\"\nprint(highlight_word(text, word))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nImplement a Python class `Car` with the following specifications:\n\n- **Attributes:**\n  - `make`: A string representing the make of the car.\n  - `model`: A string representing the model of the car.\n  - `year`: An integer representing the year the car was manufactured.\n  - `mileage`: An integer representing the mileage of the car in miles.\n  - `color`: A string representing the color of the car.\n\n- **Methods:**\n  - `__init__(self, make, model, year, mileage, color)`: Initializes a new instance of the `Car` class with the specified attributes.\n  - `__str__(self)`: Returns a string representation of the car in the format: `Car(make='make', model='model', year=year, mileage=mileage, color='color')`.\n  - `drive(self, distance)`: Increases the car's mileage by the specified distance. Raises a `ValueError` if the distance is negative.\n  - `paint(self, new_color)`: Changes the car's color to the specified new color.\n\n**Sample Input/Output:**\n```python\nmy_car = Car(\"Toyota\", \"Corolla\", 2020, 15000, \"blue\")\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15000, color='blue')\nmy_car.drive(300)\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15300, color='blue')\nmy_car.paint(\"red\")\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15300, color='red')\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year, mileage, color):\n        \"\"\"\n        Initializes a new instance of the Car class.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param mileage: The mileage of the car in miles.\n        :param color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n        self.color = color\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the car.\n\n        :return: A string in the format: Car(make='make', model='model', year=year, mileage=mileage, color='color')\n        \"\"\"\n        return (f\"Car(make='{self.make}', model='{self.model}', year={self.year}, \"\n                f\"mileage={self.mileage}, color='{self.color}')\")\n\n    def drive(self, distance):\n        \"\"\"\n        Increases the car's mileage by the specified distance.\n\n        :param distance: The distance to drive.\n        :raises ValueError: If the distance is negative.\n        \"\"\"\n        if distance < 0:\n            raise ValueError(\"Distance cannot be negative\")\n        self.mileage += distance\n\n    def paint(self, new_color):\n        \"\"\"\n        Changes the car's color to the specified new color.\n\n        :param new_color: The new color of the car.\n        \"\"\"\n        self.color = new_color\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s`. Your task is to implement a function `find_longest_palindrome` that identifies and returns the longest palindromic substring within `s`. If there are multiple palindromic substrings of the same maximum length, return the one that appears first in the string. \n\n**Constraints:**\n- The length of the string `s` is between 1 and 1000, inclusive.\n- The string `s` consists of lowercase English letters.\n\n**Sample Input:**\n```\nbabad\n```\n\n**Sample Output:**\n```\nbab\n```\n\n**Sample Input:**\n```\ncbbd\n```\n\n**Sample Output:**\n```\nbb\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_longest_palindrome(s):\n    \"\"\"\n    Finds the longest palindromic substring in the given string s.\n\n    :param s: Input string\n    :return: Longest palindromic substring\n    \"\"\"\n    if not s:\n        return \"\"\n\n    start, end = 0, 0\n\n    for i in range(len(s)):\n        len1 = expand_around_center(s, i, i)\n        len2 = expand_around_center(s, i, i + 1)\n        max_len = max(len1, len2)\n        if max_len > end - start:\n            start = i - (max_len - 1) // 2\n            end = i + max_len // 2\n\n    return s[start:end + 1]\n\ndef expand_around_center(s, left, right):\n    \"\"\"\n    Expands around the center indices left and right to find the length of the palindrome.\n\n    :param s: Input string\n    :param left: Left index\n    :param right: Right index\n    :return: Length of the palindrome\n    \"\"\"\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return right - left - 1\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of characters '(', ')', '[', ']', '{', and '}'. Your task is to determine if the string is balanced. A string is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. For example, the string `\"{[()]}\"` is balanced, but the string `\"{[(])}\"` is not.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^3) containing only the characters '(', ')', '[', ']', '{', and '}'.\n\n**Output:**\n- Return `True` if the string is balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"{[()]}\"\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\n\"{[(])}\"\n```\n\n**Sample Output:**\n```\nFalse\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef is_balanced(s):\n    \"\"\"\n    Determines if the input string s containing only '(', ')', '[', ']', '{', and '}' is balanced.\n\n    :param s: A string consisting of the characters '(', ')', '[', ']', '{', and '}'.\n    :return: True if the string is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n\n    for char in s:\n        if char in matching_bracket.values():\n            stack.append(char)\n        elif char in matching_bracket.keys():\n            if not stack or matching_bracket[char] != stack.pop():\n                return False\n        else:\n            return False\n\n    return not stack\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a directory path as input. Your task is to write a Python script that lists all files and subdirectories within the specified directory using the `os` module. If the directory does not exist, your program should output an error message. \n\n**Input:**\n- A single line containing the directory path as a string.\n\n**Output:**\n- If the directory exists, print each file and subdirectory name on a new line, prefixed with \"Contents of '<directory_path>':\".\n- If the directory does not exist, print \"Error: The directory '<directory_path>' does not exist.\".\n\n**Sample Input 1:**\n```\n/path/to/existing/directory\n```\n\n**Sample Output 1:**\n```\nContents of '/path/to/existing/directory':\nfile1.txt\nsubdir1\nfile2.txt\n```\n\n**Sample Input 2:**\n```\n/nonexistent/directory\n```\n\n**Sample Output 2:**\n```\nError: The directory '/nonexistent/directory' does not exist.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport os\n\ndef list_directory_contents(path):\n    \"\"\"\n    Lists all files and subdirectories within the specified directory.\n\n    Parameters:\n    path (str): The path to the directory to be listed.\n\n    Returns:\n    None\n    \"\"\"\n    if not os.path.exists(path):\n        print(f\"Error: The directory '{path}' does not exist.\")\n        return\n\n    try:\n        contents = os.listdir(path)\n        print(f\"Contents of '{path}':\")\n        for item in contents:\n            print(item)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nlist_directory_contents('your_directory_path')\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of dictionaries and a key. Your task is to implement a function `sort_by_key` that sorts the list of dictionaries based on the values associated with the given key. If a dictionary does not contain the key, it should be treated as having a value of `None`. In cases where the values for the key are of mixed types (e.g., integers and strings), convert all values to strings before sorting. The function should return a new list of dictionaries sorted by the specified key.\n\n**Input:**\n- A list of dictionaries `dict_list`.\n- A string `key` representing the key to sort by.\n\n**Output:**\n- A new list of dictionaries sorted by the specified key.\n\n**Sample Input:**\n```python\ndict_list = [{'name': 'Alice', 'age': 30}, {'name': 'Bob'}, {'name': 'Charlie', 'age': 25}]\nkey = 'age'\n```\n\n**Sample Output:**\n```python\n[{'name': 'Bob'}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef sort_by_key(dict_list, key):\n    \"\"\"\n    Sorts a list of dictionaries by a specified key. If the key does not exist in a dictionary,\n    it is treated as having a value of None. Values are converted to strings before sorting.\n\n    :param dict_list: List of dictionaries to sort.\n    :param key: The key to sort the dictionaries by.\n    :return: A new list of dictionaries sorted by the specified key.\n    \"\"\"\n    return sorted(dict_list, key=lambda x: str(x.get(key, None)))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with processing web server logs to determine the frequency of requests made by each client. Implement a function `parse_logs` that accepts a list of log entries as strings and returns a dictionary. The dictionary should map each client's IP address to the number of requests they have made. Each log entry is formatted such that the IP address is the first token, separated by a space. For example, given the input `['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.1 GET /home']`, the function should output `{'192.168.1.1': 2, '192.168.1.2': 1}`.\n\n**Sample Input:**\n```python\n['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.1 GET /home']\n```\n\n**Sample Output:**\n```python\n{'192.168.1.1': 2, '192.168.1.2': 1}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef parse_logs(log_entries):\n    \"\"\"\n    Parses a list of web server log entries and returns a dictionary mapping each client's IP address\n    to the number of requests they have made.\n\n    :param log_entries: List of log entries as strings, where each entry starts with an IP address.\n    :return: Dictionary with IP addresses as keys and the count of requests as values.\n    \"\"\"\n    ip_counts = {}\n    for entry in log_entries:\n        ip = entry.split()[0]\n        if ip in ip_counts:\n            ip_counts[ip] += 1\n        else:\n            ip_counts[ip] = 1\n    return ip_counts\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of file paths in a Unix-like file system. Your task is to implement a function `find_common_prefix` that identifies the longest common prefix among all the paths. If no common prefix exists, the function should return an empty string. The function should also handle the scenario where the input list is empty, returning an empty string in such cases.\n\n**Input:**\n- A list of strings, where each string represents a file path in a Unix-like file system.\n\n**Output:**\n- A string representing the longest common prefix among all the paths. If no common prefix exists, return an empty string.\n\n**Sample Input:**\n```python\n['/home/user/documents/report.txt', '/home/user/pictures/photo.png', '/home/user/music/song.mp3']\n```\n\n**Sample Output:**\n```\n'/home/user/'\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_common_prefix(paths):\n    \"\"\"\n    Finds the longest common prefix among a list of file paths.\n\n    :param paths: List of strings, where each string is a file path.\n    :return: A string representing the longest common prefix. Returns an empty string if no common prefix exists.\n    \"\"\"\n    if not paths:\n        return \"\"\n\n    prefix = paths[0]\n\n    for path in paths[1:]:\n        while not path.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n\n    return prefix\n\npaths = ['/home/user/documents/report.txt', '/home/user/pictures/photo.png', '/home/user/music/song.mp3']\nprint(find_common_prefix(paths))  # Output: '/home/user/'\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `BankAccount` class in Python that supports the following operations:\n\n1. **Initialization**: Create a bank account with an optional initial balance. If no initial balance is provided, the account should start with a balance of 0.\n2. **Deposit**: Add a specified amount of money to the account. The deposit amount must be positive; otherwise, raise a `ValueError` with the message \"Deposit amount must be positive.\"\n3. **Withdraw**: Remove a specified amount of money from the account. The withdrawal amount must be positive; otherwise, raise a `ValueError` with the message \"Withdrawal amount must be positive.\" If the account balance is insufficient for the withdrawal, raise a `ValueError` with the message \"Insufficient balance for the withdrawal.\"\n4. **Check Balance**: Return the current balance of the account.\n\n**Sample Input/Output**:\n```python\naccount = BankAccount(100)\naccount.deposit(50)\nprint(account.check_balance())  # Output: 150\naccount.withdraw(30)\nprint(account.check_balance())  # Output: 120\naccount.withdraw(150)  # Raises ValueError: Insufficient balance for the withdrawal.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        \"\"\"\n        Initialize a bank account with an optional initial balance.\n\n        :param initial_balance: The starting balance of the account (default is 0).\n        \"\"\"\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount of money into the account.\n\n        :param amount: The amount to deposit (must be positive).\n        :raises ValueError: If the deposit amount is not positive.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n        else:\n            raise ValueError(\"Deposit amount must be positive.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount of money from the account.\n\n        :param amount: The amount to withdraw (must be positive).\n        :raises ValueError: If the withdrawal amount is not positive or if there is insufficient balance.\n        \"\"\"\n        if amount > 0:\n            if self.balance >= amount:\n                self.balance -= amount\n            else:\n                raise ValueError(\"Insufficient balance for the withdrawal.\")\n        else:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n\n    def check_balance(self):\n        \"\"\"\n        Check the current balance of the account.\n\n        :return: The current balance of the account.\n        \"\"\"\n        return self.balance\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a CSV file named \"data.csv\" with headers. Your task is to write a Python function that reads this file and computes the average of a specified column. The function should handle cases where the column might not exist or contain non-numeric values by skipping those entries. The CSV file is structured as follows:\n\n```\nName,Age,Score\nJohn,28,85\nAlice,34,92\nBob,22,78\n```\n\n**Input:**\n- The function will take two parameters: the file path to the CSV file and the name of the column for which the average needs to be calculated.\n\n**Output:**\n- The function should return the average of the specified column as a float. If no valid entries are found, return `None`.\n\n**Sample Input:**\n- File Path: \"data.csv\"\n- Column Name: \"Score\"\n\n**Sample Output:**\n- The average of the column 'Score' is: 85.0\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport csv\n\ndef calculate_average_from_csv(file_path, column_name):\n    \"\"\"\n    Calculate the average of a specified column in a CSV file.\n\n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column to calculate the average for.\n\n    Returns:\n    float or None: The average of the column if valid entries are found, otherwise None.\n    \"\"\"\n    total = 0\n    count = 0\n\n    with open(file_path, mode='r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            try:\n                value = float(row[column_name])\n                total += value\n                count += 1\n            except (ValueError, KeyError):\n                continue\n\n    if count == 0:\n        return None\n\n    return total / count\n\nfile_path = \"data.csv\"\ncolumn_name = \"Score\"\naverage = calculate_average_from_csv(file_path, column_name)\nif average is not None:\n    print(f\"The average of the column '{column_name}' is: {average}\")\nelse:\n    print(f\"Could not calculate the average for the column '{column_name}'.\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a Python class `Book` that models a book in a library system. The class includes the following attributes: `title` (a string), `author` (a string), `isbn` (a string), and `available` (a boolean). The `available` attribute signifies whether the book is currently available for borrowing. Your task is to implement a method `borrow_book` within the `Book` class. This method should check the availability of the book. If the book is available, it should set the `available` attribute to `False` and print a message stating that the book has been borrowed. If the book is not available, it should print a message indicating that the book is already borrowed.\n\n**Sample Input/Output:**\n- Input: `book = Book(\"1984\", \"George Orwell\", \"1234567890\")`\n- Output:\n  - `book.borrow_book()` prints: `The book '1984' has been borrowed.`\n  - `book.borrow_book()` prints: `The book '1984' is already borrowed.`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn, available=True):\n        \"\"\"\n        Initializes a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN of the book.\n        :param available: Boolean indicating if the book is available for borrowing.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.available = available\n\n    def borrow_book(self):\n        \"\"\"\n        Attempts to borrow the book. If the book is available, it sets the available attribute to False\n        and prints a message indicating the book has been borrowed. If the book is not available, it\n        prints a message indicating the book is already borrowed.\n        \"\"\"\n        if self.available:\n            self.available = False\n            print(f\"The book '{self.title}' has been borrowed.\")\n        else:\n            print(f\"The book '{self.title}' is already borrowed.\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of uppercase and lowercase letters, digits, and special characters. Your task is to implement a function `clean_and_sort_text` that processes the string by removing all non-alphabetic characters, converting the remaining characters to lowercase, and sorting them in alphabetical order. The function should return the resulting string.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^5).\n\n**Output:**\n- A string containing the sorted lowercase alphabetic characters from the input string.\n\n**Sample Input:**\n```\n\"Hello, World! 123\"\n```\n\n**Sample Output:**\n```\n\"dehllloorw\"\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef clean_and_sort_text(text: str) -> str:\n    \"\"\"\n    Processes the input string by removing all non-alphabetic characters,\n    converting the remaining characters to lowercase, and sorting them\n    in alphabetical order.\n\n    :param text: The input string containing a mix of characters.\n    :return: A string of sorted lowercase alphabetic characters.\n    \"\"\"\n    return ''.join(sorted(''.join(filter(str.isalpha, text)).lower()))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given two text documents as strings. Your task is to implement a function `find_common_words` that identifies and returns a list of words that appear in both documents. The comparison should be case-insensitive and punctuation should be ignored. The resulting list of words should be sorted in alphabetical order.\n\n**Input:**\n- Two strings, `doc1` and `doc2`, representing the text documents.\n\n**Output:**\n- A list of strings, representing the common words sorted in alphabetical order.\n\n**Sample Input:**\n```python\ndoc1 = \"The quick brown fox jumps over the lazy dog\"\ndoc2 = \"The lazy dog sleeps in the sun\"\n```\n\n**Sample Output:**\n```python\n['dog', 'lazy', 'the']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport string\n\ndef find_common_words(doc1, doc2):\n    \"\"\"\n    Finds and returns a list of words that appear in both input documents.\n\n    Parameters:\n    - doc1 (str): The first text document.\n    - doc2 (str): The second text document.\n\n    Returns:\n    - list: A sorted list of common words, case-insensitive and punctuation-free.\n    \"\"\"\n    translator = str.maketrans('', '', string.punctuation)\n    words1 = doc1.lower().translate(translator).split()\n    words2 = doc2.lower().translate(translator).split()\n\n    common_words = set(words1) & set(words2)\n\n    return sorted(common_words)\n\ndoc1 = \"The quick brown fox jumps over the lazy dog\"\ndoc2 = \"The lazy dog sleeps in the sun\"\nprint(find_common_words(doc1, doc2))  # Output: ['dog', 'lazy', 'the']\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a JSON string representing a list of products. Each product is an object with the following attributes: `id` (integer), `name` (string), `price` (float), and `in_stock` (boolean). Your task is to implement a function `filter_products_by_price` that takes this JSON string and a price threshold as input and returns a list of products that are in stock and have a price less than or equal to the price threshold. The returned list should be sorted by price in ascending order.\n\n**Input:**\n- A JSON string `products_json` representing a list of products.\n- A float `price_threshold` representing the maximum price.\n\n**Output:**\n- A list of dictionaries, each representing a product that meets the criteria, sorted by price in ascending order.\n\n**Sample Input:**\n```json\n[{\"id\": 1, \"name\": \"Laptop\", \"price\": 1200, \"in_stock\": true}, {\"id\": 2, \"name\": \"Mouse\", \"price\": 25, \"in_stock\": false}, {\"id\": 3, \"name\": \"Keyboard\", \"price\": 75, \"in_stock\": true}]\n```\n- `price_threshold = 100`\n\n**Sample Output:**\n```python\n[{'id': 3, 'name': 'Keyboard', 'price': 75, 'in_stock': True}]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport json\n\ndef filter_products_by_price(products_json, price_threshold):\n    \"\"\"\n    Filters and sorts products based on the given price threshold.\n\n    Parameters:\n    products_json (str): A JSON string representing a list of products.\n    price_threshold (float): The maximum price for the products to be included.\n\n    Returns:\n    list: A list of dictionaries representing products that are in stock and have a price less than or equal to the price threshold, sorted by price in ascending order.\n    \"\"\"\n    products = json.loads(products_json)\n\n    filtered_products = [product for product in products if product['in_stock'] and product['price'] <= price_threshold]\n\n    filtered_products.sort(key=lambda x: x['price'])\n\n    return filtered_products\n\nproducts_json = '''[{\"id\": 1, \"name\": \"Laptop\", \"price\": 1200, \"in_stock\": true}, {\"id\": 2, \"name\": \"Mouse\", \"price\": 25, \"in_stock\": false}, {\"id\": 3, \"name\": \"Keyboard\", \"price\": 75, \"in_stock\": true}]'''\nprice_threshold = 100\n\nresult = filter_products_by_price(products_json, price_threshold)\nprint(result)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a task to implement a function `parse_json` that processes a JSON string and converts it into a Python dictionary. Your function must handle any malformed JSON input by raising a `ValueError` with the message `\"Invalid JSON input.\"`.\n\n**Input:**\n- A single string `json_str` representing a JSON object.\n\n**Output:**\n- A Python dictionary if the input is a valid JSON string.\n- Raises a `ValueError` with the message `\"Invalid JSON input.\"` if the input is not a valid JSON string.\n\n**Sample Input 1:**\n```\n'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n```\n\n**Sample Output 1:**\n```\n{'name': 'John', 'age': 30, 'city': 'New York'}\n```\n\n**Sample Input 2:**\n```\n'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"'\n```\n\n**Sample Output 2:**\n```\nValueError: Invalid JSON input.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport json\n\ndef parse_json(json_str):\n    \"\"\"\n    Parses a JSON string and returns a Python dictionary.\n\n    Args:\n    json_str (str): A string representing a JSON object.\n\n    Returns:\n    dict: A Python dictionary if the input is a valid JSON string.\n\n    Raises:\n    ValueError: If the input is not a valid JSON string.\n    \"\"\"\n    try:\n        return json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON input.\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with designing a Python class `Car` that encapsulates the properties of a car, including its make, model, year, color, mileage, and fuel type. Your class should provide getter and setter methods for each property. Additionally, implement a method `add_mileage(miles)` that increments the car's mileage by the specified number of miles. The `__str__` method should return a string representation of the car in the format `\"Make: <make>, Model: <model>, Year: <year>, Color: <color>, Mileage: <mileage> miles, Fuel Type: <fuel_type>\"`.\n\n**Sample Input:**\n```\ncar = Car(\"Toyota\", \"Corolla\", 2020, \"Blue\", 15000, \"Petrol\")\nprint(car)\ncar.add_mileage(500)\nprint(car)\n```\n\n**Sample Output:**\n```\nMake: Toyota, Model: Corolla, Year: 2020, Color: Blue, Mileage: 15000 miles, Fuel Type: Petrol\nMake: Toyota, Model: Corolla, Year: 2020, Color: Blue, Mileage: 15500 miles, Fuel Type: Petrol\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year, color, mileage, fuel_type):\n        \"\"\"\n        Initializes a new Car instance with the given attributes.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param color: The color of the car.\n        :param mileage: The current mileage of the car.\n        :param fuel_type: The type of fuel the car uses.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        self.fuel_type = fuel_type\n\n    def get_make(self):\n        \"\"\"\n        Returns the make of the car.\n\n        :return: The make of the car.\n        \"\"\"\n        return self.make\n\n    def set_make(self, make):\n        \"\"\"\n        Sets the make of the car.\n\n        :param make: The new make of the car.\n        \"\"\"\n        self.make = make\n\n    def get_model(self):\n        \"\"\"\n        Returns the model of the car.\n\n        :return: The model of the car.\n        \"\"\"\n        return self.model\n\n    def set_model(self, model):\n        \"\"\"\n        Sets the model of the car.\n\n        :param model: The new model of the car.\n        \"\"\"\n        self.model = model\n\n    def get_year(self):\n        \"\"\"\n        Returns the year the car was manufactured.\n\n        :return: The year the car was manufactured.\n        \"\"\"\n        return self.year\n\n    def set_year(self, year):\n        \"\"\"\n        Sets the year the car was manufactured.\n\n        :param year: The new year the car was manufactured.\n        \"\"\"\n        self.year = year\n\n    def get_color(self):\n        \"\"\"\n        Returns the color of the car.\n\n        :return: The color of the car.\n        \"\"\"\n        return self.color\n\n    def set_color(self, color):\n        \"\"\"\n        Sets the color of the car.\n\n        :param color: The new color of the car.\n        \"\"\"\n        self.color = color\n\n    def get_mileage(self):\n        \"\"\"\n        Returns the current mileage of the car.\n\n        :return: The current mileage of the car.\n        \"\"\"\n        return self.mileage\n\n    def set_mileage(self, mileage):\n        \"\"\"\n        Sets the current mileage of the car.\n\n        :param mileage: The new mileage of the car.\n        \"\"\"\n        self.mileage = mileage\n\n    def get_fuel_type(self):\n        \"\"\"\n        Returns the type of fuel the car uses.\n\n        :return: The type of fuel the car uses.\n        \"\"\"\n        return self.fuel_type\n\n    def set_fuel_type(self, fuel_type):\n        \"\"\"\n        Sets the type of fuel the car uses.\n\n        :param fuel_type: The new type of fuel the car uses.\n        \"\"\"\n        self.fuel_type = fuel_type\n\n    def add_mileage(self, miles):\n        \"\"\"\n        Adds the specified number of miles to the car's mileage.\n\n        :param miles: The number of miles to add.\n        \"\"\"\n        self.mileage += miles\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the car.\n\n        :return: A string representation of the car.\n        \"\"\"\n        return (f\"Make: {self.make}, Model: {self.model}, Year: {self.year}, \"\n                f\"Color: {self.color}, Mileage: {self.mileage} miles, \"\n                f\"Fuel Type: {self.fuel_type}\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of alphanumeric characters. Your task is to implement a function `find_largest_digit_sequence(s)` that identifies and returns the longest contiguous sequence of digits within the string. If there are multiple sequences of the same maximum length, return the first one encountered. \n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^5) containing alphanumeric characters.\n\n**Output:**\n- A string representing the longest contiguous sequence of digits. If no digits are present, return an empty string.\n\n**Sample Input:**\n```\nabc123def4567ghi\n```\n\n**Sample Output:**\n```\n4567\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_largest_digit_sequence(s):\n    \"\"\"\n    Finds the longest contiguous sequence of digits in the given string.\n\n    Parameters:\n    s (str): The input string containing alphanumeric characters.\n\n    Returns:\n    str: The longest contiguous sequence of digits. Returns an empty string if no digits are found.\n    \"\"\"\n    max_sequence = \"\"\n    current_sequence = \"\"\n\n    for char in s:\n        if char.isdigit():\n            current_sequence += char\n        else:\n            if len(current_sequence) > len(max_sequence):\n                max_sequence = current_sequence\n            current_sequence = \"\"\n\n    if len(current_sequence) > len(max_sequence):\n        max_sequence = current_sequence\n\n    return max_sequence\n\nprint(find_largest_digit_sequence(\"abc123def4567ghi\"))  # Output should be \"4567\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a directory containing a set of log files. Each file's name adheres to the pattern `data_YYYYMMDD_HHMMSS.log`, where `YYYYMMDD` denotes the date in year-month-day format, and `HHMMSS` denotes the time in hour-minute-second format. Your task is to implement a function `get_latest_log_file(directory)` that accepts the directory path as an argument and returns the name of the most recent log file in the directory.\n\n**Input:**\n- A string representing the path to the directory containing the log files.\n\n**Output:**\n- A string representing the name of the latest log file.\n\n**Sample Input:**\n```\n'/path/to/logs'\n```\n**Directory Contents:**\n```\ndata_20230101_123456.log\ndata_20230102_123456.log\ndata_20230101_123457.log\n```\n**Sample Output:**\n```\n'data_20230102_123456.log'\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport os\n\ndef get_latest_log_file(directory):\n    \"\"\"\n    Returns the name of the latest log file in the given directory.\n\n    :param directory: A string representing the path to the directory containing log files.\n    :return: A string representing the name of the latest log file.\n    \"\"\"\n    latest_file = None\n    latest_time = float('-inf')\n    for filename in os.listdir(directory):\n        if filename.startswith('data_') and filename.endswith('.log'):\n            try:\n                date_time_str = filename[5:-4]\n                timestamp = int(date_time_str)\n                if timestamp > latest_time:\n                    latest_time = timestamp\n                    latest_file = filename\n            except ValueError:\n                continue\n    return latest_file\n\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dataset of customer reviews for various products. Each review is represented as a dictionary with at least two keys: 'product_id' (a string) and 'rating' (an integer between 1 and 5 inclusive). Your task is to implement a function that computes the average rating for a specified product.\n\n**Function Signature:**\n```python\ndef calculate_average_rating(reviews: List[Dict[str, Union[str, int]]], product_id: str) -> float:\n```\n\n**Input:**\n- `reviews`: A list of dictionaries, where each dictionary contains at least the keys 'product_id' and 'rating'.\n- `product_id`: A string representing the ID of the product for which the average rating is to be calculated.\n\n**Output:**\n- A float representing the average rating of the specified product. If there are no reviews for the product, return 0.0.\n\n**Sample Input:**\n```python\nreviews = [\n    {'product_id': '001', 'rating': 4},\n    {'product_id': '002', 'rating': 5},\n    {'product_id': '001', 'rating': 3},\n    {'product_id': '001', 'rating': 5},\n    {'product_id': '003', 'rating': 2}\n]\nproduct_id = '001'\n```\n\n**Sample Output:**\n```\n4.0\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom typing import List, Dict, Union\n\ndef calculate_average_rating(reviews: List[Dict[str, Union[str, int]]], product_id: str) -> float:\n    \"\"\"\n    Calculate the average rating for a specified product from a list of reviews.\n\n    :param reviews: List of dictionaries, each containing 'product_id' and 'rating'.\n    :param product_id: The ID of the product for which to calculate the average rating.\n    :return: The average rating as a float. Returns 0.0 if there are no reviews for the product.\n    \"\"\"\n    product_reviews = [review for review in reviews if review['product_id'] == product_id]\n    if not product_reviews:\n        return 0.0\n    total_rating = sum(review['rating'] for review in product_reviews)\n    average_rating = total_rating / len(product_reviews)\n    return average_rating\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `BankAccount` class in Python that simulates basic banking operations. The class should support the following functionalities:\n\n- `deposit(amount)`: Adds the specified amount to the account balance. The amount must be positive.\n- `withdraw(amount)`: Subtracts the specified amount from the account balance, provided the balance is sufficient and the amount is positive.\n- `get_balance()`: Returns the current balance of the account.\n- `get_transactions()`: Returns a list of all transactions performed on the account. Each transaction should be a string indicating whether it was a deposit or withdrawal and the corresponding amount.\n\n**Constraints:**\n- The initial balance of the account is 0.\n- All transactions should be recorded, including failed attempts.\n\n**Sample Input/Output:**\n```python\naccount = BankAccount()\naccount.deposit(100)\naccount.withdraw(50)\naccount.withdraw(60)\naccount.deposit(-10)\nprint(account.get_balance())  # Output: 50\nprint(account.get_transactions())  # Output: ['Deposited: 100', 'Withdrew: 50', 'Withdrawal failed: Insufficient funds or invalid amount', 'Deposit failed: Amount must be positive']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass BankAccount:\n    def __init__(self):\n        self.balance = 0\n        self.transactions = []\n\n    def deposit(self, amount):\n        \"\"\"\n        Adds the specified amount to the account balance if the amount is positive.\n        Records the transaction in the transaction list.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n            self.transactions.append(f\"Deposited: {amount}\")\n        else:\n            self.transactions.append(\"Deposit failed: Amount must be positive\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Subtracts the specified amount from the account balance if the amount is positive and sufficient funds are available.\n        Records the transaction in the transaction list.\n        \"\"\"\n        if amount > 0 and self.balance >= amount:\n            self.balance -= amount\n            self.transactions.append(f\"Withdrew: {amount}\")\n        else:\n            self.transactions.append(\"Withdrawal failed: Insufficient funds or invalid amount\")\n\n    def get_balance(self):\n        \"\"\"\n        Returns the current balance of the account.\n        \"\"\"\n        return self.balance\n\n    def get_transactions(self):\n        \"\"\"\n        Returns a list of all transactions performed on the account.\n        \"\"\"\n        return self.transactions\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text`. Your task is to implement a function `count_unique_words(text)` that returns the number of unique words in the string. The comparison should be case-insensitive and punctuation should be ignored. \n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 10^5) containing English letters, spaces, and punctuation marks.\n\n**Output:**\n- An integer representing the number of unique words in the string.\n\n**Sample Input:**\n```\n\"Hello, world! Hello, Python. Hello, world!\"\n```\n\n**Sample Output:**\n```\n3\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport string\n\ndef count_unique_words(text):\n    \"\"\"\n    Counts the number of unique words in a given text.\n\n    Parameters:\n    text (str): The input string containing words.\n\n    Returns:\n    int: The number of unique words in the text.\n    \"\"\"\n    text = text.lower()\n\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    words = text.split()\n\n    unique_words = set(words)\n\n    return len(unique_words)\n\nprint(count_unique_words(\"Hello, world! Hello, Python. Hello, world!\"))  # Output: 3\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `to_roman(num)` that converts a given integer `num` into its corresponding Roman numeral representation. The function should handle integers in the range from 1 to 3999, inclusive. Your solution should return the Roman numeral as a string.\n\n**Sample Input and Output:**\n- Input: `num = 1994`\n- Output: `\"MCMXCIV\"`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef to_roman(num):\n    \"\"\"\n    Convert an integer to a Roman numeral.\n\n    Parameters:\n    num (int): An integer between 1 and 3999, inclusive.\n\n    Returns:\n    str: The Roman numeral representation of the integer.\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_numeral = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_numeral += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_numeral\n\nprint(to_roman(1994))  # Output: MCMXCIV\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `generate_sequence(n)` that constructs a sequence of `n` integers. The sequence is defined as follows: the first two numbers are both 1. Each subsequent number is calculated by multiplying the two preceding numbers and then adding the next integer in the natural number sequence. For example, the sequence starts as 1, 1, 3 (since 1*1+2), 6 (since 1*3+3), 21 (since 3*6+4), and so forth. Your function should return the first `n` numbers of this sequence.\n\n**Input:**\n- An integer `n` (1 \u2264 n \u2264 100), representing the number of terms in the sequence to generate.\n\n**Output:**\n- A list of `n` integers, representing the sequence.\n\n**Sample Input:**\n```\n5\n```\n\n**Sample Output:**\n```\n[1, 1, 3, 6, 21]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef generate_sequence(n):\n    \"\"\"\n    Generates a sequence of n integers where each number is generated based on the two preceding numbers.\n    The sequence starts with 1, 1, and each subsequent number is calculated by multiplying the two preceding\n    numbers and then adding the next integer in the natural number sequence.\n\n    Parameters:\n    n (int): The number of terms in the sequence to generate.\n\n    Returns:\n    list: A list of n integers representing the sequence.\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n\n    sequence = [1, 1]\n    for i in range(2, n):\n        next_value = sequence[i-1] * sequence[i-2] + (i + 1)\n        sequence.append(next_value)\n    return sequence\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a JSON file containing nested data structures. Your task is to write a Python script that reads this JSON file, normalizes the data, and writes it to a new JSON file. The normalization process involves the following steps:\n- Convert all string values to lowercase.\n- Replace all underscores with spaces in string values.\n- Strip leading and trailing whitespace from string values.\n\n**Input:**\n- A JSON file named `input.json` with the following content:\n```json\n{\n    \"First_Name\": \"JOHN\",\n    \"Last_Name\": \"DOE\",\n    \"Address\": {\n        \"Street_Name\": \"123_MAIN_STREET\",\n        \"City\": \"NEW_YORK\",\n        \"ZIP_Code\": \"10001\"\n    },\n    \"Phone_Numbers\": [\"123-456-7890\", \"987-654-3210\"]\n}\n```\n\n**Output:**\n- A new JSON file named `normalized_output.json` with the following content:\n```json\n{\n    \"first name\": \"john\",\n    \"last name\": \"doe\",\n    \"address\": {\n        \"street name\": \"123 main street\",\n        \"city\": \"new york\",\n        \"zip code\": \"10001\"\n    },\n    \"phone numbers\": [\n        \"123-456-7890\",\n        \"987-654-3210\"\n    ]\n}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport json\n\ndef normalize_value(value):\n    \"\"\"\n    Normalize a single value by converting it to lowercase, replacing underscores with spaces,\n    and stripping leading and trailing whitespace if it is a string.\n    \"\"\"\n    if isinstance(value, str):\n        return value.lower().replace('_', ' ').strip()\n    return value\n\ndef normalize_dict(d):\n    \"\"\"\n    Recursively normalize a dictionary by applying normalization to all string values,\n    including keys and values in nested dictionaries and lists.\n    \"\"\"\n    normalized_dict = {}\n    for key, value in d.items():\n        if isinstance(value, dict):\n            normalized_dict[normalize_value(key)] = normalize_dict(value)\n        elif isinstance(value, list):\n            normalized_dict[normalize_value(key)] = [normalize_value(item) for item in value]\n        else:\n            normalized_dict[normalize_value(key)] = normalize_value(value)\n    return normalized_dict\n\ndef read_json_file(filename):\n    \"\"\"\n    Read and parse a JSON file, returning the data as a Python dictionary.\n    \"\"\"\n    with open(filename, 'r') as file:\n        return json.load(file)\n\ndef write_json_file(data, filename):\n    \"\"\"\n    Write a Python dictionary to a JSON file with pretty printing (indentation).\n    \"\"\"\n    with open(filename, 'w') as file:\n        json.dump(data, file, indent=4)\n\nif __name__ == '__main__':\n    input_file = 'input.json'\n    output_file = 'normalized_output.json'\n\n    data = read_json_file(input_file)\n    normalized_data = normalize_dict(data)\n    write_json_file(normalized_data, output_file)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `paragraph` which consists of multiple sentences. A sentence is defined as a sequence of characters ending with a period (.), exclamation mark (!), or question mark (?), followed by a space or the end of the string. Your task is to write a function `extract_sentences(paragraph)` that splits the paragraph into sentences, trims any leading or trailing spaces from each sentence, and returns a list of these sentences.\n\n**Input:**\n- A single string `paragraph` (1 \u2264 len(paragraph) \u2264 1000).\n\n**Output:**\n- A list of strings, where each string is a sentence from the paragraph with no leading or trailing spaces.\n\n**Sample Input:**\n```\n\"Hello world! How are you doing today? I hope you're well.   \"\n```\n\n**Sample Output:**\n```\n['Hello world', 'How are you doing today', \"I hope you're well\"]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef extract_sentences(paragraph):\n    \"\"\"\n    Splits a paragraph into sentences based on punctuation marks and trims spaces.\n\n    :param paragraph: A string containing multiple sentences.\n    :return: A list of sentences with no leading or trailing spaces.\n    \"\"\"\n    sentences = re.split(r'(?<=[.!?])\\s*', paragraph)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    return sentences\n\nparagraph = \"Hello world! How are you doing today? I hope you're well.   \"\nprint(extract_sentences(paragraph))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `format_duration(seconds)` that takes an integer `seconds` as input and returns a string representing the duration in a human-readable format. The output should be formatted as \"X hours, Y minutes, and Z seconds\", omitting any part of the duration that is zero. For example, given the input `3661`, the function should return `\"1 hour, 1 minute, and 1 second\"`.\n\n**Sample Input:**\n```\n3661\n```\n\n**Sample Output:**\n```\n1 hour, 1 minute, and 1 second\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef format_duration(seconds):\n    \"\"\"\n    Converts a given number of seconds into a human-readable format.\n\n    Parameters:\n    seconds (int): The total number of seconds to be converted.\n\n    Returns:\n    str: A string representing the duration in the format \"X hours, Y minutes, and Z seconds\",\n         omitting any part of the duration that is zero.\n    \"\"\"\n    hours = minutes = remaining_seconds = 0\n\n    if seconds >= 3600:\n        hours = seconds // 3600\n        seconds %= 3600\n    if seconds >= 60:\n        minutes = seconds // 60\n        remaining_seconds = seconds % 60\n    else:\n        remaining_seconds = seconds\n\n    time_parts = []\n\n    if hours > 0:\n        time_parts.append(f\"{hours} hour{'s' if hours > 1 else ''}\")\n    if minutes > 0:\n        time_parts.append(f\"{minutes} minute{'s' if minutes > 1 else ''}\")\n    if remaining_seconds > 0:\n        time_parts.append(f\"{remaining_seconds} second{'s' if remaining_seconds > 1 else ''}\")\n\n    if len(time_parts) > 2:\n        return ', '.join(time_parts[:-1]) + f\", and {time_parts[-1]}\"\n    elif len(time_parts) == 2:\n        return f\"{time_parts[0]} and {time_parts[1]}\"\n    elif len(time_parts) == 1:\n        return time_parts[0]\n    else:\n        return \"0 seconds\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with developing a function to parse HTML documents and extract all email addresses embedded within the text. Your function should be able to handle various HTML structures and accurately identify email addresses using regular expressions. \n\n**Function Signature:**\n```python\ndef extract_emails(html_content: str) -> List[str]:\n```\n\n**Input:**\n- A single string `html_content` representing the HTML document. The string may contain multiple email addresses embedded within the text.\n\n**Output:**\n- A list of strings, where each string is an email address found in the HTML document. The order of the emails in the list should match their order of appearance in the HTML.\n\n**Constraints:**\n- The HTML content will not exceed 10,000 characters.\n- Email addresses are defined by the regular expression pattern `[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}`.\n\n**Sample Input:**\n```html\n<html><body><p>Contact us at support@example.com or sales@example.org</p></body></html>\n```\n\n**Sample Output:**\n```\n['support@example.com', 'sales@example.org']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\nfrom typing import List\n\ndef extract_emails(html_content: str) -> List[str]:\n    \"\"\"\n    Extracts all email addresses from the given HTML content using regular expressions.\n\n    :param html_content: A string representing the HTML document.\n    :return: A list of email addresses found in the HTML content.\n    \"\"\"\n    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n    emails = re.findall(email_pattern, html_content)\n    return emails\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a text file containing lowercase words separated by spaces. Your task is to write a program that reads the file, counts the frequency of each word, and prints the words along with their frequencies in descending order of frequency. If two words have the same frequency, they should be printed in the order they first appear in the file.\n\n**Input:**\n- The first line of input is the path to the text file.\n\n**Output:**\n- For each unique word in the file, print the word followed by its frequency, separated by a colon and a space, in descending order of frequency.\n\n**Sample Input:**\n```\n/sample.txt\n```\n**Content of sample.txt:**\n```\napple banana apple orange banana apple\n```\n\n**Sample Output:**\n```\napple: 3\nbanana: 2\norange: 1\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom collections import Counter\n\ndef count_word_frequencies(file_path):\n    \"\"\"\n    Reads a text file, counts the frequency of each word, and prints the word frequencies\n    in descending order of frequency.\n\n    :param file_path: str, the path to the text file\n    \"\"\"\n    with open(file_path, 'r') as file:\n        text = file.read()\n\n    words = text.split()\n    word_count = Counter(words)\n\n    sorted_word_count = word_count.most_common()\n\n    for word, count in sorted_word_count:\n        print(f'{word}: {count}')\n\ncount_word_frequencies('/sample.txt')\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of '(' and ')' characters. Your task is to determine the length of the longest valid (well-formed) parentheses substring. A valid parentheses substring is defined as a substring that has an equal number of opening and closing parentheses, with each opening parenthesis having a corresponding closing parenthesis in the correct order. Write a function `longest_valid_parentheses(s)` that takes a string `s` as input and returns the length of the longest valid parentheses substring.\n\n**Sample Input:**\n```\n(()())()\n```\n\n**Sample Output:**\n```\n8\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef longest_valid_parentheses(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest valid (well-formed) parentheses substring in the given string `s`.\n\n    :param s: A string consisting of '(' and ')' characters.\n    :return: The length of the longest valid parentheses substring.\n    \"\"\"\n    stack = [-1]\n    max_len = 0\n\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                stack.append(i)\n            else:\n                max_len = max(max_len, i - stack[-1])\n\n    return max_len\n\ns = \"(()())()\"\nprint(longest_valid_parentheses(s))  # Output: 8\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of strings, each representing a file path. Your task is to implement a function `get_file_extensions(paths)` that processes this list and returns a list of strings. Each string in the output list should be the file extension of the corresponding file path in the input list. If a file path does not have an extension, the corresponding output should be an empty string. The order of the output list should match the order of the input list.\n\n**Input:**\n- A list of strings `paths` (1 \u2264 len(paths) \u2264 1000), where each string is a valid file path.\n\n**Output:**\n- A list of strings, where each string is the file extension of the corresponding file path in the input list.\n\n**Sample Input:**\n```python\n[\"/home/user/image.png\", \"/var/log/messages\", \"/etc/hosts\", \"/tmp/file.tar.gz\"]\n```\n\n**Sample Output:**\n```python\n[\"png\", \"\", \"\", \"gz\"]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef get_file_extensions(paths):\n    \"\"\"\n    Returns a list of file extensions for each file path in the input list.\n\n    :param paths: List of strings representing file paths.\n    :return: List of strings representing file extensions.\n    \"\"\"\n    return [path.split('.')[-1] if '.' in path and not path.endswith('/') else '' for path in paths]\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `word` consisting of lowercase English letters and spaces. Your task is to implement a function `count_vowels(word)` that returns the number of vowels present in the string. A vowel is defined as one of the characters 'a', 'e', 'i', 'o', or 'u'.\n\n**Input:**\n- A single string `word` (1 \u2264 |word| \u2264 100), where |word| denotes the length of the string.\n\n**Output:**\n- An integer representing the number of vowels in the string.\n\n**Sample Input:**\n```\nhello world\n```\n\n**Sample Output:**\n```\n3\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef count_vowels(word):\n    \"\"\"\n    Counts the number of vowels in the given string.\n\n    Parameters:\n    word (str): A string consisting of lowercase English letters and spaces.\n\n    Returns:\n    int: The number of vowels in the string.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dictionary representing a JSON object. Your task is to implement a function `flatten_json` that takes this dictionary as input and returns a new dictionary where each key is a string representing the path to the corresponding value in the original JSON object, with keys separated by dots. For example, for the input `{\"name\": \"John\", \"age\": 30, \"address\": {\"city\": \"New York\", \"state\": \"NY\"}}`, the output should be `{\"name\": \"John\", \"age\": 30, \"address.city\": \"New York\", \"address.state\": \"NY\"}`.\n\n**Sample Input:**\n```python\n{\"name\": \"John\", \"age\": 30, \"address\": {\"city\": \"New York\", \"state\": \"NY\"}}\n```\n\n**Sample Output:**\n```python\n{\"name\": \"John\", \"age\": 30, \"address.city\": \"New York\", \"address.state\": \"NY\"}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef flatten_json(y):\n    \"\"\"\n    Flattens a nested dictionary into a single-level dictionary with keys representing the path to each value.\n\n    :param y: A dictionary representing a JSON object.\n    :return: A flattened dictionary with dot-separated keys.\n    \"\"\"\n    out = {}\n\n    def flatten(x, name=''):\n        if isinstance(x, dict):\n            for a in x:\n                flatten(x[a], name + a + '.')\n        elif isinstance(x, list):\n            for i, a in enumerate(x):\n                flatten(a, name + str(i) + '.')\n        else:\n            out[name[:-1]] = x\n\n    flatten(y)\n    return out\n\ninput_json = {\"name\": \"John\", \"age\": 30, \"address\": {\"city\": \"New York\", \"state\": \"NY\"}}\nflattened_json = flatten_json(input_json)\nprint(flattened_json)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nImplement a `Calculator` class in Python that supports four basic arithmetic operations: addition, subtraction, multiplication, and division. Each operation should be implemented as a method within the class. The division method should handle division by zero by returning the string \"Error: Division by zero is not allowed.\"\n\n**Input:**\n- The `Calculator` class will be instantiated, and its methods will be called with integer or float arguments.\n- The methods to be tested are `add`, `subtract`, `multiply`, and `divide`.\n\n**Output:**\n- For each method call, return the result of the arithmetic operation.\n- For the `divide` method, if the second argument is zero, return the string \"Error: Division by zero is not allowed.\"\n\n**Sample Input/Output:**\n- `calc = Calculator()`\n- `calc.add(10, 5)` should return `15`\n- `calc.subtract(10, 5)` should return `5`\n- `calc.multiply(10, 5)` should return `50`\n- `calc.divide(10, 5)` should return `2.0`\n- `calc.divide(10, 0)` should return `\"Error: Division by zero is not allowed.\"`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Calculator:\n    def add(self, a, b):\n        \"\"\"Return the sum of two numbers a and b.\"\"\"\n        return a + b\n\n    def subtract(self, a, b):\n        \"\"\"Return the result of subtracting number b from a.\"\"\"\n        return a - b\n\n    def multiply(self, a, b):\n        \"\"\"Return the product of two numbers a and b.\"\"\"\n        return a * b\n\n    def divide(self, a, b):\n        \"\"\"Return the result of dividing number a by b. Handle division by zero gracefully.\"\"\"\n        try:\n            return a / b\n        except ZeroDivisionError:\n            return \"Error: Division by zero is not allowed.\"\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Book` class in Python. The class should have the following attributes and methods:\n\n- **Attributes:**\n  - `title`: A string representing the title of the book.\n  - `author`: A string representing the author of the book.\n  - `isbn`: A string representing the ISBN of the book.\n  - `publication_year`: An integer representing the year the book was published.\n\n- **Methods:**\n  - `describe()`: Returns a string that describes the book in the format: `\"Title: {title}, Author: {author}, ISBN: {isbn}, Year: {publication_year}\"`.\n  - `is_classic()`: Returns `True` if the book was published before 1920, otherwise returns `False`.\n\n**Sample Input:**\n```python\nbook = Book(\"1984\", \"George Orwell\", \"9780451524935\", 1949)\nprint(book.describe())\nprint(book.is_classic())\n```\n\n**Sample Output:**\n```\nTitle: 1984, Author: George Orwell, ISBN: 9780451524935, Year: 1949\nFalse\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn, publication_year):\n        \"\"\"\n        Initializes a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN of the book.\n        :param publication_year: The year the book was published.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.publication_year = publication_year\n\n    def describe(self):\n        \"\"\"\n        Returns a string describing the book.\n\n        :return: A string in the format \"Title: {title}, Author: {author}, ISBN: {isbn}, Year: {publication_year}\".\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}, Year: {self.publication_year}\"\n\n    def is_classic(self):\n        \"\"\"\n        Determines if the book is a classic (published before 1920).\n\n        :return: True if the book is a classic, False otherwise.\n        \"\"\"\n        return self.publication_year < 1920\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `s` consisting of multiple words separated by spaces. Your task is to implement a function `count_vowels` that returns a dictionary with keys as vowels ('a', 'e', 'i', 'o', 'u') and values as the counts of each vowel in the string. The function should be case-insensitive. \n\n**Input:**\n- A single string `s` (1 \u2264 len(s) \u2264 1000).\n\n**Output:**\n- A dictionary with keys 'a', 'e', 'i', 'o', 'u' and their respective counts in the string.\n\n**Sample Input:**\n```\n\"Hello World\"\n```\n\n**Sample Output:**\n```\n{'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef count_vowels(s):\n    \"\"\"\n    Counts the occurrences of each vowel in a given string, case-insensitively.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    dict: A dictionary with vowels as keys and their counts as values.\n    \"\"\"\n    vowels = 'aeiou'\n    vowel_counts = {vowel: 0 for vowel in vowels}\n    s = s.lower()\n\n    for char in s:\n        if char in vowels:\n            vowel_counts[char] += 1\n\n    return vowel_counts\n\ninput_string = \"Hello World\"\nprint(count_vowels(input_string))  # Output: {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given two lists: `words` and `distances`. Each element in `words` is a string, and each element in `distances` is an integer representing the distance between consecutive words in `words`. Your task is to compute the average distance between all pairs of consecutive words in `words`. If `words` contains fewer than two elements or `distances` is empty, return `0.0`.\n\n**Input:**\n- A list of strings `words` (1 \u2264 len(words) \u2264 100).\n- A list of integers `distances` (0 \u2264 len(distances) \u2264 99).\n\n**Output:**\n- A float representing the average distance between consecutive words.\n\n**Sample Input 1:**\n```\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\ndistances = [3, 5, 2]\n```\n**Sample Output 1:**\n```\n3.3333333333333335\n```\n\n**Sample Input 2:**\n```\nwords = [\"apple\"]\ndistances = []\n```\n**Sample Output 2:**\n```\n0.0\n```\n\n**Sample Input 3:**\n```\nwords = []\ndistances = []\n```\n**Sample Output 3:**\n```\n0.0\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef average_distance(words, distances):\n    \"\"\"\n    Calculate the average distance between consecutive words in the list.\n\n    :param words: List of strings representing words.\n    :param distances: List of integers representing distances between consecutive words.\n    :return: Float representing the average distance, or 0.0 if no pairs exist.\n    \"\"\"\n    if len(words) < 2 or len(distances) == 0:\n        return 0.0\n\n    total_distance = sum(distances)\n    number_of_pairs = len(distances)\n\n    return total_distance / number_of_pairs\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given an undirected graph with `n` nodes and `m` edges. Each edge is represented as a tuple of two integers in the list `edges`, where each integer represents a node. Your task is to determine the number of connected components in the graph. A connected component is a subgraph in which there is a path between any pair of vertices, and which is not connected to any additional vertices in the graph.\n\n**Input:**\n- A list of tuples `edges` where each tuple `(u, v)` represents an undirected edge between nodes `u` and `v`.\n- The nodes are numbered from `1` to `n`.\n\n**Output:**\n- An integer representing the number of connected components in the graph.\n\n**Sample Input:**\n```\nedges = [(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]\n```\n\n**Sample Output:**\n```\n3\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass UnionFind:\n    def __init__(self, size):\n        \"\"\"Initialize the Union-Find data structure with a given size.\"\"\"\n        self.parent = list(range(size))\n        self.rank = [1] * size\n        self.count = size\n\n    def find(self, p):\n        \"\"\"Find the root of the set containing element p with path compression.\"\"\"\n        if self.parent[p] != p:\n            self.parent[p] = self.find(self.parent[p])\n        return self.parent[p]\n\n    def union(self, p, q):\n        \"\"\"Union the sets containing elements p and q with union by rank.\"\"\"\n        root_p = self.find(p)\n        root_q = self.find(q)\n\n        if root_p == root_q:\n            return\n\n        if self.rank[root_p] > self.rank[root_q]:\n            self.parent[root_q] = root_p\n        elif self.rank[root_p] < self.rank[root_q]:\n            self.parent[root_p] = root_q\n        else:\n            self.parent[root_q] = root_p\n            self.rank[root_p] += 1\n        self.count -= 1\n\ndef count_connected_components(edges):\n    \"\"\"Count the number of connected components in the graph represented by edges.\"\"\"\n    if not edges:\n        return 0\n\n    max_node = max(max(edge) for edge in edges)\n    uf = UnionFind(max_node + 1)\n\n    for u, v in edges:\n        uf.union(u, v)\n\n    isolated_nodes = set(range(1, max_node + 1)) - set(node for edge in edges for node in edge)\n\n    return uf.count - len(isolated_nodes)\n\nedges = [(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]\nprint(count_connected_components(edges))  # Output: 3\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a date string `date_str`, an input format `input_format`, and an output format `output_format`. Your task is to write a function `format_date(date_str, input_format, output_format)` that parses the date string according to the `input_format` and then formats it to the `output_format`. If the parsing fails, the function should return `None`. Use Python's `datetime` module to accomplish this.\n\n**Sample Input:**\n- `date_str = \"2023-10-15\"`\n- `input_format = \"%Y-%m-%d\"`\n- `output_format = \"%d/%m/%Y\"`\n\n**Sample Output:**\n- `\"15/10/2023\"`\n\n**Sample Input:**\n- `date_str = \"2023-10-32\"`\n- `input_format = \"%Y-%m-%d\"`\n- `output_format = \"%d/%m/%Y\"`\n\n**Sample Output:**\n- `None`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom datetime import datetime\n\ndef format_date(date_str, input_format, output_format):\n    \"\"\"\n    Parses a date string according to the input format and formats it to the output format.\n\n    Parameters:\n    date_str (str): The date string to be parsed.\n    input_format (str): The format of the input date string.\n    output_format (str): The desired format of the output date string.\n\n    Returns:\n    str or None: The formatted date string if parsing is successful, otherwise None.\n    \"\"\"\n    try:\n        date_obj = datetime.strptime(date_str, input_format)\n        return date_obj.strftime(output_format)\n    except ValueError:\n        return None\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `S` and a list of substrings `L`. Your task is to implement a function that returns a list of integers representing the starting indices of each substring in `L` as they appear in `S`. If a substring from `L` does not appear in `S`, the corresponding index should be `-1`.\n\n**Input:**\n- A string `S` (1 \u2264 |S| \u2264 10^3)\n- A list of substrings `L` (1 \u2264 |L| \u2264 10^3), where each substring has a length between 1 and 10.\n\n**Output:**\n- A list of integers, where each integer is the starting index of the corresponding substring in `L` within `S`, or `-1` if the substring is not found.\n\n**Sample Input:**\n```\nS = \"hello world, hello universe\"\nL = [\"hello\", \"world\", \"universe\", \"planet\"]\n```\n\n**Sample Output:**\n```\n[0, 6, 13, -1]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_substring_indices(string, substrings):\n    \"\"\"\n    Returns a list of starting indices of each substring in substrings as they appear in string.\n    If a substring is not found, the corresponding index is -1.\n\n    :param string: The main string to search within.\n    :param substrings: A list of substrings to find in the main string.\n    :return: A list of starting indices or -1 for each substring.\n    \"\"\"\n    indices = []\n    for substring in substrings:\n        index = string.find(substring)\n        indices.append(index)\n    return indices\n\nstring = \"hello world, hello universe\"\nsubstrings = [\"hello\", \"world\", \"universe\", \"planet\"]\nresult = find_substring_indices(string, substrings)\nprint(result)  # Output: [0, 6, 13, -1]\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `random_haiku` that generates a random haiku poem adhering to the traditional 5-7-5 syllable structure. Use a predefined list of words categorized by their syllable count to construct the poem. Your function should return a string representing the haiku.\n\n**Input:**\n- None\n\n**Output:**\n- A string representing a haiku poem with a 5-7-5 syllable structure.\n\n**Sample Output:**\n```\ndog cat run\nbird tree road\nhat bat mat\n```\n*Note: The output will vary as the words are chosen randomly.*\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport random\n\ndef random_haiku():\n    \"\"\"\n    Generates a random haiku poem with a 5-7-5 syllable structure using predefined lists of words categorized by syllable count.\n\n    Returns:\n        str: A string representing the generated haiku poem.\n    \"\"\"\n    one_syllable_words = [\"dog\", \"cat\", \"run\", \"sit\", \"fly\", \"hat\", \"bat\", \"mat\"]\n    two_syllable_words = [\"bird\", \"tree\", \"road\", \"beach\", \"heart\", \"love\", \"moon\", \"star\"]\n    three_syllable_words = [\"children\", \"mountain\", \"river\", \"forest\", \"happiness\", \"friendship\", \"universe\", \"ocean\"]\n\n    def select_word(syllables):\n        if syllables == 1:\n            return random.choice(one_syllable_words)\n        elif syllables == 2:\n            return random.choice(two_syllable_words)\n        elif syllables == 3:\n            return random.choice(three_syllable_words)\n        else:\n            raise ValueError(\"This function only supports syllable counts of 1, 2, or 3.\")\n\n    def create_line(syllable_count):\n        line = []\n        while sum(line) < syllable_count:\n            syllables_to_add = random.choice([1, 2, 3])\n            if sum(line) + syllables_to_add <= syllable_count:\n                line.append(syllables_to_add)\n        words = [select_word(syllables) for syllables in line]\n        return \" \".join(words)\n\n    haiku_lines = [create_line(5), create_line(7), create_line(5)]\n    haiku = \"\\n\".join(haiku_lines)\n    return haiku\n\nprint(random_haiku())\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Car` class in Python. The class should have the following attributes and methods:\n\n- **Attributes:**\n  - `make`: A string representing the manufacturer of the car.\n  - `model`: A string representing the model of the car.\n  - `year`: An integer representing the year the car was manufactured.\n  - `mileage`: An integer representing the current mileage of the car.\n  - `color`: A string representing the color of the car.\n\n- **Methods:**\n  - `__init__(self, make, model, year, mileage, color)`: Initializes the car with the given attributes.\n  - `paint(self, new_color)`: Changes the color of the car to `new_color`.\n  - `drive(self, distance)`: Increases the mileage by `distance` if `distance` is positive.\n  - `service(self)`: Resets the mileage to 0.\n  - `display_info(self)`: Prints the car's details in the format: `\"Car Info: {year} {make} {model}, Color: {color}, Mileage: {mileage} miles\"`.\n\n**Sample Input/Output:**\n```\nInput:\ncar = Car(\"Toyota\", \"Camry\", 2020, 15000, \"Blue\")\ncar.display_info()\ncar.paint(\"Red\")\ncar.drive(250)\ncar.display_info()\ncar.service()\ncar.display_info()\n\nOutput:\nCar Info: 2020 Toyota Camry, Color: Blue, Mileage: 15000 miles\nCar Info: 2020 Toyota Camry, Color: Red, Mileage: 15250 miles\nCar Info: 2020 Toyota Camry, Color: Red, Mileage: 0 miles\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year, mileage, color):\n        \"\"\"\n        Initializes a new Car instance with the specified attributes.\n\n        :param make: The manufacturer of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param mileage: The current mileage of the car.\n        :param color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n        self.color = color\n\n    def paint(self, new_color):\n        \"\"\"\n        Changes the color of the car.\n\n        :param new_color: The new color to paint the car.\n        \"\"\"\n        self.color = new_color\n\n    def drive(self, distance):\n        \"\"\"\n        Increases the mileage of the car by the specified distance if the distance is positive.\n\n        :param distance: The distance driven.\n        \"\"\"\n        if distance > 0:\n            self.mileage += distance\n\n    def service(self):\n        \"\"\"\n        Resets the mileage of the car to 0.\n        \"\"\"\n        self.mileage = 0\n\n    def display_info(self):\n        \"\"\"\n        Prints the car's details in a formatted string.\n        \"\"\"\n        print(f\"Car Info: {self.year} {self.make} {self.model}, Color: {self.color}, Mileage: {self.mileage} miles\")\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of strings, each representing an email address. Your task is to write a Python function `parse_emails` that processes this list and returns a list of tuples. Each tuple should contain three elements: the local part, the domain, and the top-level domain of the email address. If an email address is invalid, the corresponding tuple should contain `None` for all three elements.\n\n**Input:**\n- A list of strings, where each string is an email address.\n\n**Output:**\n- A list of tuples, where each tuple contains three elements: the local part, the domain, and the top-level domain of the email address, or `None` if the email is invalid.\n\n**Sample Input:**\n```python\n[\"user1@example.com\", \"invalid-email@\", \"user2@test.org\", \"user3@sample.net\"]\n```\n\n**Sample Output:**\n```python\n[('user1', 'example', 'com'), (None, None, None), ('user2', 'test', 'org'), ('user3', 'sample', 'net')]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef parse_emails(email_list):\n    \"\"\"\n    Parses a list of email addresses and returns a list of tuples containing the local part, domain, and top-level domain.\n    Invalid email addresses are represented by a tuple of None values.\n\n    :param email_list: List of email addresses as strings.\n    :return: List of tuples with (local_part, domain, top_level_domain) or (None, None, None) for invalid emails.\n    \"\"\"\n    result = []\n    email_pattern = re.compile(r'^(?P<local>[^@]+)@(?P<domain>[^@]+\\.(?P<tld>[^@.]+))$')\n\n    for email in email_list:\n        match = email_pattern.match(email)\n        if match:\n            local = match.group('local')\n            domain, tld = match.group('domain').rsplit('.', 1)\n            result.append((local, domain, tld))\n        else:\n            result.append((None, None, None))\n\n    return result\n\nemails = [\"user1@example.com\", \"invalid-email@\", \"user2@test.org\", \"user3@sample.net\"]\nprint(parse_emails(emails))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with creating a function `generate_html_table(data)` that constructs an HTML table from a given dictionary `data`. The dictionary's keys represent column headers, and the values are lists of data corresponding to each column. Your function should return a string that represents the HTML code for the table. The first row of the table should contain the column headers, and each subsequent row should contain the data values. Assume that all lists in the dictionary have the same length.\n\n**Sample Input:**\n```python\n{\"Name\": [\"Alice\", \"Bob\", \"Charlie\"], \"Age\": [25, 30, 35], \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]}\n```\n\n**Sample Output:**\n```html\n<table>\n  <tr>\n\t<th>Name</th>\n\t<th>Age</th>\n\t<th>City</th>\n  </tr>\n  <tr>\n\t<td>Alice</td>\n\t<td>25</td>\n\t<td>New York</td>\n  </tr>\n  <tr>\n\t<td>Bob</td>\n\t<td>30</td>\n\t<td>Los Angeles</td>\n  </tr>\n  <tr>\n\t<td>Charlie</td>\n\t<td>35</td>\n\t<td>Chicago</td>\n  </tr>\n</table>\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef generate_html_table(data):\n    \"\"\"\n    Generates an HTML table from a dictionary where keys are column headers\n    and values are lists of column data.\n\n    :param data: Dictionary with column headers as keys and lists of data as values.\n    :return: String containing the HTML code for the table.\n    \"\"\"\n    html = '<table>\\n'\n\n    headers = data.keys()\n    html += '  <tr>\\n'\n    for header in headers:\n        html += f'    <th>{header}</th>\\n'\n    html += '  </tr>\\n'\n\n    num_rows = len(next(iter(data.values())))\n    for i in range(num_rows):\n        html += '  <tr>\\n'\n        for header in headers:\n            html += f'    <td>{data[header][i]}</td>\\n'\n        html += '  </tr>\\n'\n\n    html += '</table>'\n\n    return html\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a simple calculator that supports basic arithmetic operations: addition, subtraction, multiplication, and division. Each operation is provided as a string: \"add\", \"subtract\", \"multiply\", \"divide\". The calculator receives two lists as input: one for operations and another for operands. The operations are to be performed sequentially on the operands. Your function `calculate` should handle exceptions such as division by zero and invalid operations gracefully by returning `None` and printing an error message. Assume that the input lists are valid, with the number of operations being one less than the number of operands.\n\n**Sample Input:**\n- Operations: `[\"add\", \"multiply\", \"subtract\"]`\n- Operands: `[5, 3, 2, 4]`\n\n**Sample Output:**\n- `10`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef calculate(operations, operands):\n    \"\"\"\n    Perform a sequence of arithmetic operations on a list of operands.\n\n    Parameters:\n    operations (list of str): A list of operations (\"add\", \"subtract\", \"multiply\", \"divide\").\n    operands (list of int/float): A list of operands to apply the operations to.\n\n    Returns:\n    int/float/None: The result of the operations, or None if an error occurs.\n    \"\"\"\n    if len(operations) != len(operands) - 1:\n        raise ValueError(\"The number of operations must be one less than the number of operands.\")\n\n    result = operands[0]\n\n    for i, operation in enumerate(operations):\n        try:\n            if operation == \"add\":\n                result += operands[i + 1]\n            elif operation == \"subtract\":\n                result -= operands[i + 1]\n            elif operation == \"multiply\":\n                result *= operands[i + 1]\n            elif operation == \"divide\":\n                if operands[i + 1] == 0:\n                    raise ZeroDivisionError(\"Division by zero is not allowed.\")\n                result /= operands[i + 1]\n            else:\n                raise ValueError(f\"Invalid operation: {operation}\")\n        except Exception as e:\n            print(f\"Error during {operation} with operand {operands[i + 1]}: {e}\")\n            return None\n\n    return result\n\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a vending machine simulation in Python. The vending machine should support the following operations:\n\n1. **Initialization**: The machine should start with a predefined set of products and their prices.\n2. **Accept Payment**: Given a list of coin values (in cents), calculate the total amount of money inserted.\n3. **Dispense Product**: Given a product name and the amount paid, check if the product is available and if the payment is sufficient. If so, dispense the product and return the change. Otherwise, return an appropriate message.\n4. **Show Products**: Display the list of available products along with their prices.\n\n**Input**:\n- The `accept_payment` method will receive a list of integers representing coin values in cents.\n- The `dispense_product` method will receive a string (product name) and a float (amount paid).\n\n**Output**:\n- The `accept_payment` method should return a float representing the total amount of money inserted.\n- The `dispense_product` method should return a string indicating the result of the transaction (dispensed product with change or an error message).\n- The `show_products` method should print the available products and their prices.\n\n**Sample Input/Output**:\n- Input: `coins_inserted = [25, 25, 25, 10, 10]`\n- Input: `product = 'cola'`\n- Output: `Dispensing cola. Change: $0.50`\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass VendingMachine:\n    def __init__(self):\n        \"\"\"\n        Initializes the vending machine with a set of products and their prices.\n        \"\"\"\n        self.products = {\n            'cola': 1.50,\n            'chips': 1.25,\n            'candy': 0.75\n        }\n\n    def accept_payment(self, coins):\n        \"\"\"\n        Calculates the total amount of money inserted based on the coin values.\n\n        :param coins: List of integers representing coin values in cents.\n        :return: Total amount of money inserted as a float.\n        \"\"\"\n        total = sum(coins) / 100  # Assuming the coins are in cents\n        return total\n\n    def dispense_product(self, product, amount_paid):\n        \"\"\"\n        Dispenses the product if available and sufficient funds are provided.\n\n        :param product: String representing the product name.\n        :param amount_paid: Float representing the amount of money paid.\n        :return: String indicating the result of the transaction.\n        \"\"\"\n        if product not in self.products:\n            return \"Product not available.\"\n        elif amount_paid < self.products[product]:\n            return \"Insufficient funds.\"\n        else:\n            change = amount_paid - self.products[product]\n            return f\"Dispensing {product}. Change: ${change:.2f}\"\n\n    def show_products(self):\n        \"\"\"\n        Prints the available products and their prices.\n        \"\"\"\n        print(\"Available products:\")\n        for product, price in self.products.items():\n            print(f\"{product}: ${price:.2f}\")\n\nvm = VendingMachine()\nvm.show_products()\n\ncoins_inserted = [25, 25, 25, 10, 10]  # 1.00 + 0.50 + 0.50 = 2.00\namount_paid = vm.accept_payment(coins_inserted)\nresult = vm.dispense_product('cola', amount_paid)\nprint(result)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text` and a dictionary `word_count` where each key is a word and its corresponding value is the frequency of that word in the `text`. Your task is to determine if the `text` can be split into a sequence of words from the dictionary such that each word in the sequence appears in the `word_count` and the frequency of each word in the sequence does not exceed its frequency in the `word_count`. Return `True` if such a split is possible, otherwise return `False`.\n\n**Input:**\n- A string `text` (1 \u2264 |text| \u2264 1000).\n- A dictionary `word_count` where keys are words and values are their respective frequencies (1 \u2264 number of words \u2264 100, 1 \u2264 frequency \u2264 10).\n\n**Output:**\n- Return `True` if the `text` can be split as described, otherwise return `False`.\n\n**Sample Input:**\n```\ntext = \"applebananaorange\"\nword_count = {\"apple\": 1, \"banana\": 1, \"orange\": 1}\n```\n\n**Sample Output:**\n```\nTrue\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom collections import Counter\n\ndef can_split_text(text, word_count):\n    \"\"\"\n    Determines if the given text can be split into a sequence of words from the word_count dictionary\n    such that each word's frequency in the sequence does not exceed its frequency in the dictionary.\n\n    :param text: The string to be split.\n    :param word_count: A dictionary with words as keys and their frequencies as values.\n    :return: True if the text can be split as described, False otherwise.\n    \"\"\"\n    def dfs(remaining_text, word_counter):\n        if not remaining_text:\n            return True\n        for word in word_counter:\n            if remaining_text.startswith(word) and word_counter[word] > 0:\n                word_counter[word] -= 1\n                if dfs(remaining_text[len(word):], word_counter):\n                    return True\n                word_counter[word] += 1\n        return False\n\n    word_counter = Counter(word_count)\n    return dfs(text, word_counter)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Matrix` class that supports basic matrix operations: addition, subtraction, and multiplication. The matrix should be initialized with a list of lists, where each inner list represents a row of the matrix. Your class should include the following methods:\n\n- `add(self, other)`: Adds two matrices and returns the resulting matrix. Raises a `ValueError` if the matrices do not have the same dimensions.\n- `subtract(self, other)`: Subtracts the second matrix from the first and returns the resulting matrix. Raises a `ValueError` if the matrices do not have the same dimensions.\n- `multiply(self, other)`: Multiplies two matrices and returns the resulting matrix. Raises a `ValueError` if the number of columns in the first matrix is not equal to the number of rows in the second matrix.\n\nImplement the `Matrix` class with the above specifications. Ensure that the class handles invalid inputs gracefully by raising appropriate exceptions.\n\n**Sample Input:**\n```python\nmatrix1 = Matrix([[1, 2, 3], [4, 5, 6]])\nmatrix2 = Matrix([[7, 8, 9], [10, 11, 12]])\nresult_add = matrix1.add(matrix2)\nresult_sub = matrix1.subtract(matrix2)\nmatrix3 = Matrix([[1, 2], [3, 4], [5, 6]])\nresult_mul = matrix1.multiply(matrix3)\n```\n\n**Sample Output:**\n```\n8 10 12\n14 16 18\n\n-6 -6 -6\n-6 -6 -6\n\n22 28\n49 64\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Matrix:\n    def __init__(self, data):\n        \"\"\"\n        Initializes the Matrix with a list of lists.\n        :param data: List of lists representing the matrix rows.\n        :raises ValueError: If all rows are not of the same length.\n        \"\"\"\n        if not all(isinstance(row, list) and len(row) == len(data[0]) for row in data):\n            raise ValueError(\"All rows must be lists of the same length.\")\n        self.data = data\n\n    def add(self, other):\n        \"\"\"\n        Adds two matrices.\n        :param other: Another Matrix instance.\n        :return: A new Matrix instance representing the sum.\n        :raises ValueError: If matrices do not have the same dimensions.\n        \"\"\"\n        if not isinstance(other, Matrix):\n            raise ValueError(\"The operand must be an instance of Matrix.\")\n        if self.get_dimensions() != other.get_dimensions():\n            raise ValueError(\"Matrices must have the same dimensions to be added.\")\n\n        result = [\n            [self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))]\n            for i in range(len(self.data))\n        ]\n        return Matrix(result)\n\n    def subtract(self, other):\n        \"\"\"\n        Subtracts one matrix from another.\n        :param other: Another Matrix instance.\n        :return: A new Matrix instance representing the difference.\n        :raises ValueError: If matrices do not have the same dimensions.\n        \"\"\"\n        if not isinstance(other, Matrix):\n            raise ValueError(\"The operand must be an instance of Matrix.\")\n        if self.get_dimensions() != other.get_dimensions():\n            raise ValueError(\"Matrices must have the same dimensions to be subtracted.\")\n\n        result = [\n            [self.data[i][j] - other.data[i][j] for j in range(len(self.data[0]))]\n            for i in range(len(self.data))\n        ]\n        return Matrix(result)\n\n    def multiply(self, other):\n        \"\"\"\n        Multiplies two matrices.\n        :param other: Another Matrix instance.\n        :return: A new Matrix instance representing the product.\n        :raises ValueError: If the number of columns in the first matrix is not equal to the number of rows in the second matrix.\n        \"\"\"\n        if not isinstance(other, Matrix):\n            raise ValueError(\"The operand must be an instance of Matrix.\")\n        if len(self.data[0]) != len(other.data):\n            raise ValueError(\"Number of columns in the first matrix must be equal to the number of rows in the second matrix for multiplication.\")\n\n        result = [\n            [sum(self.data[i][k] * other.data[k][j] for k in range(len(other.data)))\n             for j in range(len(other.data[0]))]\n            for i in range(len(self.data))\n        ]\n        return Matrix(result)\n\n    def get_dimensions(self):\n        \"\"\"\n        Returns the dimensions of the matrix.\n        :return: A tuple (rows, columns).\n        \"\"\"\n        return len(self.data), len(self.data[0])\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the matrix.\n        :return: A string with rows separated by newlines and elements separated by spaces.\n        \"\"\"\n        return '\\n'.join([' '.join(map(str, row)) for row in self.data])\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of integers. Your task is to determine the minimum number of operations required to make all elements in the list equal. In one operation, you can either increment or decrement any element by 1. For example, given the list `[1, 5, 3]`, the minimum number of operations needed is `3` because you can change `1` to `3` and `5` to `3`.\n\n**Input:**\n- A list of integers `nums` (1 \u2264 len(nums) \u2264 10^5), where each integer is in the range [-10^9, 10^9].\n\n**Output:**\n- An integer representing the minimum number of operations required.\n\n**Sample Input:**\n```\n[1, 5, 3]\n```\n\n**Sample Output:**\n```\n3\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef minimize_operations(nums):\n    \"\"\"\n    Calculate the minimum number of operations required to make all elements in the list equal.\n\n    :param nums: List of integers\n    :return: Minimum number of operations\n    \"\"\"\n    def find_median(nums):\n        \"\"\"\n        Find the median of a list of numbers.\n\n        :param nums: List of integers\n        :return: Median value\n        \"\"\"\n        nums.sort()\n        n = len(nums)\n        return nums[n // 2] if n % 2 == 1 else nums[n // 2 - 1]\n\n    median = find_median(nums)\n    return sum(abs(num - median) for num in nums)\n\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given two strings `s1` and `s2`. Your task is to write a function `find_common_substrings` that identifies all common substrings of length greater than 1 that appear in both strings. The substrings should be returned in lexicographical order.\n\n**Input:**\n- Two strings `s1` and `s2` (1 \u2264 |s1|, |s2| \u2264 100), consisting of lowercase English letters.\n\n**Output:**\n- A list of common substrings in lexicographical order.\n\n**Sample Input:**\n```\ns1 = \"abcde\"\ns2 = \"cdefg\"\n```\n\n**Sample Output:**\n```\n['cd', 'cde']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef find_common_substrings(s1, s2):\n    \"\"\"\n    Finds all common substrings of length greater than 1 that appear in both input strings.\n\n    Parameters:\n    s1 (str): The first input string.\n    s2 (str): The second input string.\n\n    Returns:\n    list: A list of common substrings in lexicographical order.\n    \"\"\"\n    def get_substrings(s):\n        substrings = set()\n        for i in range(len(s)):\n            for j in range(i + 2, len(s) + 1):\n                substrings.add(s[i:j])\n        return substrings\n\n    substrings_s1 = get_substrings(s1)\n    substrings_s2 = get_substrings(s2)\n\n    common_substrings = substrings_s1.intersection(substrings_s2)\n    return sorted(common_substrings)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dictionary `employees` where each key is an employee ID and each value is another dictionary containing the employee's name, department, and salary. Your task is to implement a function `average_salary_by_department` that computes the average salary for each department and returns a dictionary with department names as keys and their corresponding average salaries as values.\n\n**Input:**\n- A dictionary `employees` with the following structure:\n  - Keys: Employee IDs (integers).\n  - Values: Dictionaries with keys `\"name\"`, `\"department\"`, and `\"salary\"`.\n\n**Output:**\n- A dictionary where keys are department names (strings) and values are the average salaries (floats) of employees in each department.\n\n**Sample Input:**\n```python\nemployees = {\n    1: {\"name\": \"Alice\", \"department\": \"Engineering\", \"salary\": 90000},\n    2: {\"name\": \"Bob\", \"department\": \"HR\", \"salary\": 75000},\n    3: {\"name\": \"Charlie\", \"department\": \"Engineering\", \"salary\": 85000},\n    4: {\"name\": \"David\", \"department\": \"HR\", \"salary\": 70000},\n    5: {\"name\": \"Eva\", \"department\": \"Marketing\", \"salary\": 65000}\n}\n```\n\n**Sample Output:**\n```python\n{'Engineering': 87500.0, 'HR': 72500.0, 'Marketing': 65000.0}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef average_salary_by_department(employees):\n    \"\"\"\n    Computes the average salary for each department from the given employees dictionary.\n\n    Parameters:\n    employees (dict): A dictionary where keys are employee IDs and values are dictionaries\n                      containing employee information including 'name', 'department', and 'salary'.\n\n    Returns:\n    dict: A dictionary with department names as keys and their average salaries as values.\n    \"\"\"\n    department_salaries = {}\n\n    for emp_id, emp_info in employees.items():\n        department = emp_info['department']\n        salary = emp_info['salary']\n\n        if department not in department_salaries:\n            department_salaries[department] = {'total_salary': 0, 'count': 0}\n\n        department_salaries[department]['total_salary'] += salary\n        department_salaries[department]['count'] += 1\n\n    average_salaries = {\n        department: info['total_salary'] / info['count']\n        for department, info in department_salaries.items()\n    }\n\n    return average_salaries\n\nemployees = {\n    1: {\"name\": \"Alice\", \"department\": \"Engineering\", \"salary\": 90000},\n    2: {\"name\": \"Bob\", \"department\": \"HR\", \"salary\": 75000},\n    3: {\"name\": \"Charlie\", \"department\": \"Engineering\", \"salary\": 85000},\n    4: {\"name\": \"David\", \"department\": \"HR\", \"salary\": 70000},\n    5: {\"name\": \"Eva\", \"department\": \"Marketing\", \"salary\": 65000}\n}\n\nprint(average_salary_by_department(employees))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `Book` class in Python to manage book information. The class should have the following attributes:\n- `title`: A string representing the title of the book.\n- `author`: A string representing the author of the book.\n- `isbn`: A string representing the ISBN number of the book.\n- `publisher`: A string representing the publisher of the book.\n- `year`: An integer representing the year the book was published.\n- `genre`: A string representing the genre of the book.\n- `language`: A string representing the language in which the book is written.\n- `pages`: An integer representing the number of pages in the book.\n\nThe class should include the following methods:\n- `__init__`: Initialize the book with the given attributes.\n- `display_info`: Print a formatted string with the book's information.\n- `get_age`: Calculate and return the age of the book in years.\n\n**Sample Input:**\n```python\nbook = Book(\"1984\", \"George Orwell\", \"9780451524935\", \"Signet Classic\", 1949, \"Dystopian\", \"English\", 328)\nbook.display_info()\nprint(book.get_age())\n```\n\n**Sample Output:**\n```\nTitle: 1984\nAuthor: George Orwell\nISBN: 9780451524935\nPublisher: Signet Classic\nYear: 1949\nGenre: Dystopian\nLanguage: English\nPages: 328\n74  # Assuming the current year is 2023\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn, publisher, year, genre, language, pages):\n        \"\"\"\n        Initialize a new Book instance with the given attributes.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN number of the book.\n        :param publisher: The publisher of the book.\n        :param year: The year the book was published.\n        :param genre: The genre of the book.\n        :param language: The language in which the book is written.\n        :param pages: The number of pages in the book.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.publisher = publisher\n        self.year = year\n        self.genre = genre\n        self.language = language\n        self.pages = pages\n\n    def display_info(self):\n        \"\"\"\n        Print a formatted string with the book's information.\n        \"\"\"\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"ISBN: {self.isbn}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Year: {self.year}\")\n        print(f\"Genre: {self.genre}\")\n        print(f\"Language: {self.language}\")\n        print(f\"Pages: {self.pages}\")\n\n    def get_age(self):\n        \"\"\"\n        Calculate and return the age of the book in years.\n\n        :return: The age of the book in years.\n        \"\"\"\n        from datetime import datetime\n        current_year = datetime.now().year\n        return current_year - self.year\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with writing a Python script that processes a CSV file containing employee data. The CSV file has the following structure: `Employee ID,Employee Name,Department,Salary`. Your script should read this file and output a formatted table with the following columns: `Employee Name`, `Department`, and `Salary`. The script should prompt the user to input the path to the CSV file. If the file does not exist, the script should output an error message and terminate.\n\n**Sample Input:**\n```\nPlease enter the path to the CSV file: employees.csv\n```\n\n**Sample CSV File (`employees.csv`):**\n```\nEmployee ID,Employee Name,Department,Salary\n1,John Doe,Engineering,75000\n2,Jane Smith,Marketing,65000\n3,Bob Johnson,Sales,60000\n```\n\n**Sample Output:**\n```\nEmployee Name        Department         Salary  \n==================================================\nJohn Doe             Engineering        75000   \nJane Smith           Marketing          65000   \nBob Johnson          Sales              60000   \n```\n\n**Error Case Sample Input:**\n```\nPlease enter the path to the CSV file: non_existent_file.csv\n```\n\n**Error Case Sample Output:**\n```\nError: The file was not found.\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport csv\nimport os\n\ndef print_employee_data(file_path):\n    \"\"\"\n    Reads a CSV file and prints a formatted table of employee data.\n\n    Parameters:\n    file_path (str): The path to the CSV file containing employee data.\n    \"\"\"\n    try:\n        with open(file_path, mode='r', newline='') as file:\n            reader = csv.DictReader(file)\n            print(\"{:<20} {:<20} {:<10}\".format('Employee Name', 'Department', 'Salary'))\n            print(\"=\"*50)\n            for row in reader:\n                print(\"{:<20} {:<20} {:<10}\".format(row['Employee Name'], row['Department'], row['Salary']))\n    except FileNotFoundError:\n        print(\"Error: The file was not found.\")\n\ndef main():\n    \"\"\"\n    Prompts the user for the path to a CSV file and prints the employee data if the file exists.\n    \"\"\"\n    file_path = input(\"Please enter the path to the CSV file: \")\n    if not os.path.isfile(file_path):\n        print(\"Error: The file was not found.\")\n        return\n    print_employee_data(file_path)\n\nif __name__ == \"__main__\":\n    main()\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with writing a Python script that processes a text file to determine the frequency of each word, excluding common stop words. Your script should prompt the user for the file path and handle cases where the file does not exist by printing an error message and terminating. Utilize the `collections.Counter` for storing word frequencies and the `nltk.corpus.stopwords.words('english')` for filtering out stop words. Ensure the `nltk` library is installed before execution.\n\n**Input:**\n- A single line containing the path to a text file.\n\n**Output:**\n- A list of words and their frequencies, one per line, in the format `word: frequency`. Words should be in alphabetical order.\n\n**Sample Input:**\n```\n/path/to/sample.txt\n```\n\n**Sample Output:**\n```\nexample: 2\nprogramming: 1\npython: 3\nscript: 1\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport os\nfrom collections import Counter\nimport nltk\nfrom nltk.corpus import stopwords\n\nnltk.download('stopwords')\nstop_words = set(stopwords.words('english'))\n\ndef count_words_in_file(file_path):\n    \"\"\"\n    Counts the frequency of each word in a given text file, excluding stop words.\n\n    Parameters:\n    file_path (str): The path to the text file.\n\n    Returns:\n    None\n    \"\"\"\n    if not os.path.exists(file_path):\n        print(\"The file does not exist.\")\n        return\n\n    with open(file_path, 'r', encoding='utf-8') as file:\n        content = file.read().lower()\n        words = content.split()\n        filtered_words = [word for word in words if word.isalpha() and word not in stop_words]\n\n    word_counts = Counter(filtered_words)\n\n    for word, count in sorted(word_counts.items()):\n        print(f\"{word}: {count}\")\n\nif __name__ == \"__main__\":\n    user_input = input(\"Please enter the path to the text file: \")\n    count_words_in_file(user_input)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a string `text` which may contain punctuation marks. Your task is to write a function `count_words` that returns a dictionary with words as keys and their counts as values. Words should be considered case-insensitive and punctuation should be ignored. \n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 10^4) containing alphabetic characters, spaces, and punctuation marks.\n\n**Output:**\n- A dictionary where keys are words in lowercase and values are the number of times each word appears in the text.\n\n**Sample Input:**\n```\n\"Hello, world! Hello, everyone.\"\n```\n\n**Sample Output:**\n```\n{'hello': 2, 'world': 1, 'everyone': 1}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport string\n\ndef count_words(text: str) -> dict:\n    \"\"\"\n    Counts the number of occurrences of each word in a given text, ignoring punctuation and case.\n\n    :param text: A string containing words, spaces, and punctuation.\n    :return: A dictionary with words as keys and their counts as values.\n    \"\"\"\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    text = text.lower()\n    words = text.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ntext = \"Hello, world! Hello, everyone.\"\nprint(count_words(text))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nIn a Django project, design a model to represent a blog post with the following attributes:\n- `title`: A string with a maximum length of 200 characters.\n- `body`: A text field.\n- `author`: A foreign key linking to Django's built-in User model. When a user is deleted, all their blog posts should be deleted as well.\n- `publication_date`: A date-time field that automatically records the time when the blog post is created.\n- `tags`: A many-to-many relationship with another model named `Tag`. Each tag should have a unique name.\n\nDefine the `Tag` model with a single field `name` which is a string with a maximum length of 100 characters. Implement the `__str__` method for both models to return the `title` for `BlogPost` and `name` for `Tag`.\n\n**Sample Input:**\n- Creating a `Tag` with name \"Python\"\n- Creating a `BlogPost` with title \"Django Models\", body \"Django models are powerful...\", author (a User instance), and adding the \"Python\" tag.\n\n**Sample Output:**\n- `Tag` instance: \"Python\"\n- `BlogPost` instance: \"Django Models\"\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Tag(models.Model):\n    \"\"\"\n    Model representing a tag for blog posts.\n\n    Attributes:\n        name (str): The name of the tag, must be unique.\n    \"\"\"\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the name of the tag.\n\n        Returns:\n            str: The name of the tag.\n        \"\"\"\n        return self.name\n\nclass BlogPost(models.Model):\n    \"\"\"\n    Model representing a blog post.\n\n    Attributes:\n        title (str): The title of the blog post.\n        body (str): The body content of the blog post.\n        author (User): The author of the blog post, linked to Django's User model.\n        publication_date (datetime): The date and time when the blog post was published.\n        tags (Tag): Tags associated with the blog post.\n    \"\"\"\n    title = models.CharField(max_length=200)\n    body = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    publication_date = models.DateTimeField(auto_now_add=True)\n    tags = models.ManyToManyField(Tag, related_name='blog_posts')\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the blog post.\n\n        Returns:\n            str: The title of the blog post.\n        \"\"\"\n        return self.title\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a JSON configuration file represented as a nested structure of dictionaries and lists. Your task is to implement a function `extract_config_values(config, key)` that recursively traverses this structure and returns a list of all values associated with the specified key. The function should handle arbitrary levels of nesting.\n\n**Input:**\n- `config`: A nested dictionary or list representing the JSON configuration.\n- `key`: A string representing the key whose values need to be extracted.\n\n**Output:**\n- A list of values associated with the given key.\n\n**Sample Input:**\n```json\n{\n    \"server\": {\n        \"host\": \"localhost\",\n        \"port\": 8080\n    },\n    \"database\": {\n        \"host\": \"db.example.com\",\n        \"port\": 5432\n    },\n    \"logging\": {\n        \"level\": \"DEBUG\",\n        \"outputs\": [\"console\", \"file\"]\n    }\n}\n```\n**Key:** `\"host\"`\n\n**Sample Output:**\n```\n[\"localhost\", \"db.example.com\"]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef extract_config_values(config, key):\n    \"\"\"\n    Recursively extracts all values associated with a given key from a nested JSON configuration.\n\n    :param config: A nested dictionary or list representing the JSON configuration.\n    :param key: A string representing the key whose values need to be extracted.\n    :return: A list of values associated with the given key.\n    \"\"\"\n    def recursive_search(obj, key):\n        results = []\n        if isinstance(obj, dict):\n            for k, v in obj.items():\n                if k == key:\n                    results.append(v)\n                results.extend(recursive_search(v, key))\n        elif isinstance(obj, list):\n            for item in obj:\n                results.extend(recursive_search(item, key))\n        return results\n\n    return recursive_search(config, key)\n\nconfig = {\n    \"server\": {\n        \"host\": \"localhost\",\n        \"port\": 8080\n    },\n    \"database\": {\n        \"host\": \"db.example.com\",\n        \"port\": 5432\n    },\n    \"logging\": {\n        \"level\": \"DEBUG\",\n        \"outputs\": [\"console\", \"file\"]\n    }\n}\n\nkey = \"host\"\nprint(extract_config_values(config, key))  # Output: [\"localhost\", \"db.example.com\"]\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a Python class `Employee` that encapsulates the details of an employee. The class should have the following attributes: `name`, `id`, and `salary`. Implement getter and setter methods for each attribute. Additionally, implement a method `calculate_bonus` that computes and returns the bonus, which is 10% of the employee's salary. Each method should include a docstring that describes its purpose and usage.\n\n**Sample Input:**\n```python\nemployee = Employee(\"John Doe\", 12345, 50000.0)\nemployee.set_name(\"Jane Doe\")\nemployee.set_salary(60000.0)\nprint(employee.get_name())  # Output: Jane Doe\nprint(employee.get_id())    # Output: 12345\nprint(employee.get_salary())# Output: 60000.0\nprint(employee.calculate_bonus()) # Output: 6000.0\n```\n\n**Sample Output:**\n```\nJane Doe\n12345\n60000.0\n6000.0\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass Employee:\n    \"\"\"\n    A class to represent an Employee.\n\n    Attributes:\n    ----------\n    name : str\n        The name of the employee.\n    id : int\n        The ID of the employee.\n    salary : float\n        The salary of the employee.\n\n    Methods:\n    -------\n    get_name() -> str:\n        Returns the name of the employee.\n    set_name(name: str) -> None:\n        Sets the name of the employee.\n    get_id() -> int:\n        Returns the ID of the employee.\n    set_id(id: int) -> None:\n        Sets the ID of the employee.\n    get_salary() -> float:\n        Returns the salary of the employee.\n    set_salary(salary: float) -> None:\n        Sets the salary of the employee.\n    calculate_bonus() -> float:\n        Calculates and returns the bonus for the employee, which is 10% of the salary.\n    \"\"\"\n\n    def __init__(self, name: str, id: int, salary: float):\n        self._name = name\n        self._id = id\n        self._salary = salary\n\n    def get_name(self) -> str:\n        \"\"\"\n        Returns the name of the employee.\n\n        Returns:\n        -------\n        str\n        \"\"\"\n        return self._name\n\n    def set_name(self, name: str) -> None:\n        \"\"\"\n        Sets the name of the employee.\n\n        Parameters:\n        ----------\n        name : str\n            The new name for the employee.\n        \"\"\"\n        self._name = name\n\n    def get_id(self) -> int:\n        \"\"\"\n        Returns the ID of the employee.\n\n        Returns:\n        -------\n        int\n        \"\"\"\n        return self._id\n\n    def set_id(self, id: int) -> None:\n        \"\"\"\n        Sets the ID of the employee.\n\n        Parameters:\n        ----------\n        id : int\n            The new ID for the employee.\n        \"\"\"\n        self._id = id\n\n    def get_salary(self) -> float:\n        \"\"\"\n        Returns the salary of the employee.\n\n        Returns:\n        -------\n        float\n        \"\"\"\n        return self._salary\n\n    def set_salary(self, salary: float) -> None:\n        \"\"\"\n        Sets the salary of the employee.\n\n        Parameters:\n        ----------\n        salary : float\n            The new salary for the employee.\n        \"\"\"\n        self._salary = salary\n\n    def calculate_bonus(self) -> float:\n        \"\"\"\n        Calculates and returns the bonus for the employee, which is 10% of the salary.\n\n        Returns:\n        -------\n        float\n        \"\"\"\n        return self._salary * 0.1\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dictionary `data` where each key is a book title and the value is another dictionary containing details about the book such as `author`, `year`, and `pages`. Implement a function `get_books_by_author(data, author)` that returns a list of book titles written by the specified author. \n\n**Input:**\n- A dictionary `data` with book titles as keys and dictionaries as values. Each value dictionary contains keys `author`, `year`, and `pages`.\n- A string `author` representing the name of the author.\n\n**Output:**\n- A list of book titles written by the specified author.\n\n**Sample Input:**\n```python\ndata = {\n    \"The Great Gatsby\": {\"author\": \"F. Scott Fitzgerald\", \"year\": 1925, \"pages\": 180},\n    \"To Kill a Mockingbird\": {\"author\": \"Harper Lee\", \"year\": 1960, \"pages\": 281},\n    \"1984\": {\"author\": \"George Orwell\", \"year\": 1949, \"pages\": 328},\n    \"Pride and Prejudice\": {\"author\": \"Jane Austen\", \"year\": 1813, \"pages\": 432},\n    \"The Catcher in the Rye\": {\"author\": \"J.D. Salinger\", \"year\": 1951, \"pages\": 277},\n    \"Brave New World\": {\"author\": \"Aldous Huxley\", \"year\": 1932, \"pages\": 311},\n    \"Animal Farm\": {\"author\": \"George Orwell\", \"year\": 1945, \"pages\": 112},\n}\nauthor = \"George Orwell\"\n```\n\n**Sample Output:**\n```python\n['1984', 'Animal Farm']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef get_books_by_author(data, author):\n    \"\"\"\n    Returns a list of book titles written by the specified author.\n\n    :param data: Dictionary with book titles as keys and dictionaries as values.\n                 Each value dictionary contains keys 'author', 'year', and 'pages'.\n    :param author: String representing the name of the author.\n    :return: List of book titles written by the specified author.\n    \"\"\"\n    return [title for title, book_info in data.items() if book_info['author'] == author]\n\ndata = {\n    \"The Great Gatsby\": {\"author\": \"F. Scott Fitzgerald\", \"year\": 1925, \"pages\": 180},\n    \"To Kill a Mockingbird\": {\"author\": \"Harper Lee\", \"year\": 1960, \"pages\": 281},\n    \"1984\": {\"author\": \"George Orwell\", \"year\": 1949, \"pages\": 328},\n    \"Pride and Prejudice\": {\"author\": \"Jane Austen\", \"year\": 1813, \"pages\": 432},\n    \"The Catcher in the Rye\": {\"author\": \"J.D. Salinger\", \"year\": 1951, \"pages\": 277},\n    \"Brave New World\": {\"author\": \"Aldous Huxley\", \"year\": 1932, \"pages\": 311},\n    \"Animal Farm\": {\"author\": \"George Orwell\", \"year\": 1945, \"pages\": 112},\n}\n\nprint(get_books_by_author(data, \"George Orwell\"))  # Output: ['1984', 'Animal Farm']\nprint(get_books_by_author(data, \"Harper Lee\"))     # Output: ['To Kill a Mockingbird']\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `DataProcessor` class in Python to preprocess data for machine learning tasks. The class should include the following methods:\n\n1. `load_data(filepath)`: This method should read data from a CSV file located at `filepath` and store it as a pandas DataFrame in an instance variable. Handle potential errors such as file not found, empty file, or parsing errors by printing appropriate error messages.\n\n2. `normalize_data(columns)`: This method should normalize the specified columns of the DataFrame using Min-Max scaling. It should return the normalized DataFrame. Ensure that the specified columns exist in the DataFrame; otherwise, raise a `ValueError`.\n\n3. `handle_missing_data()`: This method should fill missing values in the DataFrame with the median of the respective columns. It should return the DataFrame after handling missing values. Ensure that data is loaded before calling this method; otherwise, raise a `ValueError`.\n\n**Sample Input:**\n- CSV file `data.csv` contains:\n  ```\n  A,B,C\n  1,2,3\n  4,5,6\n  7,8,9\n  ```\n\n**Sample Output:**\n- After calling `load_data('data.csv')`, `normalize_data(['A', 'B'])`, and `handle_missing_data()`, the DataFrame should remain unchanged as there are no missing values and normalization does not affect the sample data.\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nclass DataProcessor:\n    def __init__(self):\n        self.data = None\n\n    def load_data(self, filepath):\n        \"\"\"Read data from a CSV file and store it as a pandas DataFrame.\"\"\"\n        try:\n            self.data = pd.read_csv(filepath)\n        except FileNotFoundError:\n            print(f\"Error: The file {filepath} was not found.\")\n        except pd.errors.EmptyDataError:\n            print(f\"Error: The file {filepath} is empty.\")\n        except pd.errors.ParserError:\n            print(f\"Error: The file {filepath} could not be parsed.\")\n\n    def normalize_data(self, columns):\n        \"\"\"Normalize specified columns using Min-Max scaling and return the normalized DataFrame.\"\"\"\n        if self.data is None:\n            raise ValueError(\"Data not loaded. Please load data using load_data(filepath).\")\n\n        if not set(columns).issubset(self.data.columns):\n            raise ValueError(\"One or more specified columns do not exist in the dataset.\")\n\n        scaler = MinMaxScaler()\n        self.data[columns] = scaler.fit_transform(self.data[columns])\n        return self.data\n\n    def handle_missing_data(self):\n        \"\"\"Fill missing values with the median of the respective columns and return the DataFrame.\"\"\"\n        if self.data is None:\n            raise ValueError(\"Data not loaded. Please load data using load_data(filepath).\")\n\n        self.data.fillna(self.data.median(), inplace=True)\n        return self.data\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a list of DNA sequences, where each sequence is a string consisting of the characters 'A', 'C', 'G', and 'T'. Your task is to implement a function `mutate_sequences` that takes this list as input and returns a new list of the same length. Each string in the output list should be a mutated version of the corresponding string in the input list. In the mutation process, each nucleotide has a 10% chance of being replaced with one of the other three nucleotides. The input sequences can be very long, so your solution should be efficient.\n\n**Input:**\n- A list of strings, where each string is a DNA sequence.\n\n**Output:**\n- A list of strings, where each string is a mutated version of the corresponding input DNA sequence.\n\n**Sample Input:**\n```python\n[\"ACGT\", \"TTAC\"]\n```\n\n**Sample Output:**\n```python\n[\"ACGG\", \"TTCC\"]\n```\n(Note: The output may vary due to the random nature of the mutation process.)\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport random\n\ndef mutate_sequences(dna_sequences):\n    \"\"\"\n    Mutates each DNA sequence in the input list with a 10% chance of replacing each nucleotide\n    with one of the other three nucleotides.\n\n    :param dna_sequences: List of DNA sequences (strings).\n    :return: List of mutated DNA sequences (strings).\n    \"\"\"\n    nucleotides = \"ACGT\"\n    mutation_options = {\n        \"A\": \"CGT\",\n        \"C\": \"AGT\",\n        \"G\": \"ACT\",\n        \"T\": \"ACG\"\n    }\n\n    def mutate_sequence(sequence):\n        return ''.join(random.choice(mutation_options.get(nucleotide, nucleotide)) if random.random() < 0.1 else nucleotide\n                       for nucleotide in sequence)\n\n    return [mutate_sequence(seq) for seq in dna_sequences]\n\ndna_sequences = [\"ACGT\", \"TTAC\"]\nmutated_sequences = mutate_sequences(dna_sequences)\nprint(mutated_sequences)\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are given a dictionary representing the salaries of employees in a company, where the keys are the names of the employees and the values are their respective salaries. Your task is to implement a function `add_bonus` that accepts this dictionary and a bonus amount as parameters. The function should return a new dictionary with the same keys, but with each salary incremented by the specified bonus amount.\n\n**Input:**\n- A dictionary `salaries` where each key is a string representing an employee's name and each value is an integer representing the employee's salary.\n- An integer `bonus` representing the bonus amount to be added to each salary.\n\n**Output:**\n- A dictionary with the same keys as `salaries`, but with each value increased by `bonus`.\n\n**Sample Input:**\n```python\n{\"Alice\": 50000, \"Bob\": 60000, \"Charlie\": 70000}, 5000\n```\n\n**Sample Output:**\n```python\n{\"Alice\": 55000, \"Bob\": 65000, \"Charlie\": 75000}\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef add_bonus(salaries, bonus):\n    \"\"\"\n    Adds a bonus amount to each employee's salary in the given dictionary.\n\n    Parameters:\n    salaries (dict): A dictionary with employee names as keys and their salaries as values.\n    bonus (int): The bonus amount to be added to each salary.\n\n    Returns:\n    dict: A new dictionary with the same employee names as keys and updated salaries as values.\n    \"\"\"\n    return {name: salary + bonus for name, salary in salaries.items()}\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a function `extract_emails` that processes a given string and identifies all valid email addresses embedded within it. An email address is defined by the pattern `username@domain.com`, where the username can include letters, digits, dots, underscores, percent signs, plus signs, and hyphens. The domain part consists of labels separated by dots, where each label includes letters, digits, and hyphens, and the top-level domain (TLD) must be at least two characters long. Your function should be robust enough to handle multiple email addresses within the same string, as well as edge cases involving subdomains and special characters in the username.\n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 10,000) containing the text to be processed.\n\n**Output:**\n- A list of strings, each representing a valid email address found in the input text.\n\n**Sample Input:**\n```\nPlease contact John Doe at johndoe@example.com or Jane Smith at jane.smith@work.org for further information. You can also reach out to the support team at support@help.co.uk or sales@products.com.\n```\n\n**Sample Output:**\n```\n['johndoe@example.com', 'jane.smith@work.org', 'support@help.co.uk', 'sales@products.com']\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nimport re\n\ndef extract_emails(text):\n    \"\"\"\n    Extracts all valid email addresses from the given text.\n\n    :param text: A string containing the text to be processed.\n    :return: A list of strings, each representing a valid email address found in the input text.\n    \"\"\"\n    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n\n    emails = re.findall(email_pattern, text)\n\n    return emails\n\nsample_text = (\"Please contact John Doe at johndoe@example.com or Jane Smith at jane.smith@work.org for further information. \"\n               \"You can also reach out to the support team at support@help.co.uk or sales@products.com.\")\nprint(extract_emails(sample_text))\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with creating a function `generate_matrix` that constructs a 2D list (matrix) of dimensions `rows x columns`. The matrix should be filled with unique integers starting from 1 up to `rows * columns` in row-major order. Your function should efficiently generate and return this matrix.\n\n**Input:**\n- Two integers `rows` and `columns` (1 \u2264 rows, columns \u2264 100).\n\n**Output:**\n- A 2D list representing the matrix filled with integers from 1 to `rows * columns`.\n\n**Sample Input:**\n```\n3 4\n```\n\n**Sample Output:**\n```\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11, 12]\n]\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\ndef generate_matrix(rows, columns):\n    \"\"\"\n    Generates a 2D list (matrix) of dimensions rows x columns filled with unique integers\n    from 1 to rows * columns in row-major order.\n\n    :param rows: Number of rows in the matrix.\n    :param columns: Number of columns in the matrix.\n    :return: A 2D list representing the matrix.\n    \"\"\"\n    matrix = []\n    current_number = 1\n    for row in range(rows):\n        current_row = []\n        for col in range(columns):\n            current_row.append(current_number)\n            current_number += 1\n        matrix.append(current_row)\n    return matrix\n```\n"
  },
  {
    "input": "You are solving a programming contest problem.\n\nYou are tasked with implementing a `BankAccount` class that simulates basic bank account operations. The class should support the following functionalities:\n\n- **Initialization**: Create a bank account with a given account holder's name and an initial balance.\n- **Deposit**: Add a specified amount to the account balance. Ensure the deposit amount is positive.\n- **Withdraw**: Subtract a specified amount from the account balance if sufficient funds are available. Ensure the withdrawal amount is positive.\n- **Check Balance**: Return the current balance of the account.\n- **Display Holder Name**: Print the name of the account holder.\n\n**Input/Output Specifications**:\n- The `__init__` method will be called with a string `name` and a float `balance`.\n- The `deposit` method will be called with a float `amount`.\n- The `withdraw` method will be called with a float `amount`.\n- The `check_balance` method will return a float.\n- The `display_holder_name` method will print the account holder's name.\n\n**Sample Input/Output**:\n```python\naccount = BankAccount(\"John Doe\", 100.0)\naccount.deposit(50.0)          # No output, balance is now 150.0\naccount.withdraw(20.0)         # No output, balance is now 130.0\naccount.withdraw(200.0)        # Output: Insufficient funds.\naccount.check_balance()        # Returns: 130.0\naccount.display_holder_name()  # Output: John Doe\n```\n\nWrite a Python program that reads from standard input and prints the answer to standard output.",
    "output": "```python\nclass BankAccount:\n    def __init__(self, name, balance):\n        \"\"\"\n        Initialize a new bank account with the given name and balance.\n\n        :param name: str, the name of the account holder\n        :param balance: float, the initial balance of the account\n        \"\"\"\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount into the account.\n\n        :param amount: float, the amount to deposit\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n        else:\n            print(\"Deposit amount should be positive.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount from the account if sufficient funds are available.\n\n        :param amount: float, the amount to withdraw\n        \"\"\"\n        if amount > self.balance:\n            print(\"Insufficient funds.\")\n        elif amount <= 0:\n            print(\"Withdrawal amount should be positive.\")\n        else:\n            self.balance -= amount\n\n    def check_balance(self):\n        \"\"\"\n        Return the current balance of the account.\n\n        :return: float, the current balance\n        \"\"\"\n        return self.balance\n\n    def display_holder_name(self):\n        \"\"\"\n        Print the name of the account holder.\n        \"\"\"\n        print(self.name)\n```\n"
  }
]