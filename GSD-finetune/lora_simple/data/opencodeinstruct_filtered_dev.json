[
  {
    "input": "You are given a string `text`. Your task is to implement a function `convert_case(text)` that converts the string from snake_case to camelCase. If the string is not in snake_case, return it unchanged. A string is considered to be in snake_case if it consists of lowercase letters and underscores, with no leading or trailing underscores, and no consecutive underscores.\n\n**Input:**\n- A single string `text` (1 \u2264 |text| \u2264 100).\n\n**Output:**\n- The converted string in camelCase if it was originally in snake_case, otherwise the original string.\n\n**Sample Input 1:**\n```\nthis_is_a_test\n```\n**Sample Output 1:**\n```\nthisIsATest\n```\n\n**Sample Input 2:**\n```\nalreadyCamelCase\n```\n**Sample Output 2:**\n```\nalreadyCamelCase\n```\n\n**Sample Input 3:**\n```\nnot_snake_case_\n```\n**Sample Output 3:**\n```\nnot_snake_case_\n```",
    "output": "```python\ndef convert_case(text):\n    \"\"\"\n    Converts a given text from snake_case to camelCase.\n    If the input text is not in snake_case, returns the original text unchanged.\n    \n    :param text: str - The input string to be converted.\n    :return: str - The converted string in camelCase or the original string.\n    \"\"\"\n    if '_' not in text or not text.islower() or not all(w.islower() or w == '_' for w in text):\n        return text\n    \n    words = text.split('_')\n    camel_case_text = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_text\n```",
    "_category": "tree_graph"
  },
  {
    "input": "Implement a class `BinarySearchTree` in Python that supports the following operations:\n- `insert(key)`: Inserts a new node with the given key into the BST.\n- `search(key)`: Searches for a node with the given key in the BST and returns the node if found, otherwise returns `None`.\n- `delete(key)`: Deletes the node with the given key from the BST.\n\nYour implementation should handle duplicate keys by not inserting them again.\n\n**Sample Input:**\n```python\nbst = BinarySearchTree()\nbst.insert(50)\nbst.insert(30)\nbst.insert(20)\nbst.insert(40)\nbst.insert(70)\nbst.insert(60)\nbst.insert(80)\nprint(bst.search(60).val)  # Output: 60\nbst.delete(20)\nprint(bst.search(20))      # Output: None\nbst.delete(30)\nprint(bst.search(30).val)  # Output: 40\nbst.delete(50)\nprint(bst.search(50).val)  # Output: 60\n```\n\n**Sample Output:**\n```\n60\nNone\n40\n60\n```",
    "output": "```python\nclass TreeNode:\n    \"\"\"Node class representing a node in a binary search tree.\"\"\"\n    def __init__(self, key):\n        self.left = None  # Left child of the node\n        self.right = None # Right child of the node\n        self.val = key    # Value of the node\n\nclass BinarySearchTree:\n    \"\"\"Binary Search Tree class with methods for insertion, searching, and deletion.\"\"\"\n    def __init__(self):\n        self.root = None  # Root of the tree\n\n    def insert(self, key):\n        \"\"\"Insert a new node with the given key into the BST.\"\"\"\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert_recursively(self.root, key)\n\n    def _insert_recursively(self, current_node, key):\n        \"\"\"Helper method to insert a new node with the given key recursively.\"\"\"\n        if key < current_node.val:\n            if current_node.left is None:\n                current_node.left = TreeNode(key)\n            else:\n                self._insert_recursively(current_node.left, key)\n        elif key > current_node.val:\n            if current_node.right is None:\n                current_node.right = TreeNode(key)\n            else:\n                self._insert_recursively(current_node.right, key)\n\n    def search(self, key):\n        \"\"\"Search for a node with the given key in the BST.\"\"\"\n        return self._search_recursively(self.root, key)\n\n    def _search_recursively(self, current_node, key):\n        \"\"\"Helper method to search for a node with the given key recursively.\"\"\"\n        if current_node is None or current_node.val == key:\n            return current_node\n        if key < current_node.val:\n            return self._search_recursively(current_node.left, key)\n        else:\n            return self._search_recursively(current_node.right, key)\n\n    def delete(self, key):\n        \"\"\"Delete the node with the given key from the BST.\"\"\"\n        self.root = self._delete_recursively(self.root, key)\n\n    def _delete_recursively(self, current_node, key):\n        \"\"\"Helper method to delete the node with the given key recursively.\"\"\"\n        if current_node is None:\n            return current_node\n\n        if key < current_node.val:\n            current_node.left = self._delete_recursively(current_node.left, key)\n        elif key > current_node.val:\n            current_node.right = self._delete_recursively(current_node.right, key)\n        else:\n            if current_node.left is None:\n                return current_node.right\n            elif current_node.right is None:\n                return current_node.left\n\n            current_node.val = self._min_value_node(current_node.right).val\n            current_node.right = self._delete_recursively(current_node.right, current_node.val)\n\n        return current_node\n\n    def _min_value_node(self, node):\n        \"\"\"Helper method to find the node with the minimum value in a given subtree.\"\"\"\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given a binary search tree (BST) and a series of operations to perform on it. Each operation is either an insertion, deletion, or an in-order traversal request. Implement a class `BinaryTree` that supports these operations. The BST should maintain its properties after each insertion and deletion.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 100), the number of operations.\n- The next `n` lines describe the operations. Each operation is one of the following:\n  - `insert x`: Insert the integer `x` (1 \u2264 x \u2264 1000) into the BST.\n  - `delete x`: Delete the integer `x` from the BST if it exists.\n  - `inorder`: Print the in-order traversal of the BST.\n\n**Output:**\n- For each `inorder` operation, print the elements of the BST in in-order traversal on a single line, separated by spaces.\n\n**Sample Input:**\n```\n7\ninsert 50\ninsert 30\ninsert 20\ninorder\ndelete 20\ninorder\ndelete 50\n```\n\n**Sample Output:**\n```\n20 30 50\n30\n```",
    "output": "```python\nclass TreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        \"\"\"Insert a new node with the given key into the BST.\"\"\"\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, node, key):\n        if key < node.val:\n            if node.left is None:\n                node.left = TreeNode(key)\n            else:\n                self._insert(node.left, key)\n        else:\n            if node.right is None:\n                node.right = TreeNode(key)\n            else:\n                self._insert(node.right, key)\n\n    def inorder_traversal(self):\n        \"\"\"Return the in-order traversal of the BST as a list.\"\"\"\n        return self._inorder_traversal(self.root)\n\n    def _inorder_traversal(self, node):\n        result = []\n        if node:\n            result = self._inorder_traversal(node.left)\n            result.append(node.val)\n            result = result + self._inorder_traversal(node.right)\n        return result\n\n    def delete(self, key):\n        \"\"\"Delete the node with the given key from the BST.\"\"\"\n        self.root = self._delete(self.root, key)\n\n    def _delete(self, node, key):\n        if node is None:\n            return node\n\n        if key < node.val:\n            node.left = self._delete(node.left, key)\n        elif key > node.val:\n            node.right = self._delete(node.right, key)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            node.val = self._min_value_node(node.right).val\n            node.right = self._delete(node.right, node.val)\n\n        return node\n\n    def _min_value_node(self, node):\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current\n```",
    "_category": "tree_graph"
  },
  {
    "input": "Given a binary search tree (BST) with nodes containing integer values, implement a recursive function to perform an in-order traversal of the BST. The function should return the traversal as a list.\n\n**Input:**\n- The root node of a binary search tree. Each node is represented as an instance of the `TreeNode` class, which contains an integer value `val`, and pointers to the left and right children `left` and `right`.\n\n**Output:**\n- A list of integers representing the in-order traversal of the BST.\n\n**Sample Input:**\n```\n      4\n     / \\\n    2   5\n   / \\\n  1   3\n```\n\n**Sample Output:**\n```\n[1, 2, 3, 4, 5]\n```",
    "output": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder_traversal(root):\n    \"\"\"\n    Perform an in-order traversal of a binary search tree (BST) recursively.\n    \n    :param root: TreeNode, the root of the BST\n    :return: List[int], the in-order traversal of the BST\n    \"\"\"\n    result = []\n    \n    def inorder(node):\n        if node is not None:\n            inorder(node.left)\n            result.append(node.val)\n            inorder(node.right)\n    \n    inorder(root)\n    \n    return result\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are tasked with implementing a function to generate RSA public and private keys of a specified size. Your function should utilize the `cryptography` library to perform this task. The keys should be returned as PEM-encoded strings.\n\n**Function Signature:**\n```python\ndef generate_rsa_keys(key_size: int) -> Tuple[str, str]:\n```\n\n**Input:**\n- An integer `key_size` representing the size of the RSA key in bits. It is guaranteed that `key_size` is a positive integer and a multiple of 8.\n\n**Output:**\n- A tuple containing two strings: the first string is the PEM-encoded private key, and the second string is the PEM-encoded public key.\n\n**Sample Input:**\n```python\ngenerate_rsa_keys(2048)\n```\n\n**Sample Output:**\n```python\n('-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQD...\\n-----END PRIVATE KEY-----',\n '-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...\\n-----END PUBLIC KEY-----')\n```",
    "output": "```python\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nfrom typing import Tuple\n\ndef generate_rsa_keys(key_size: int) -> Tuple[str, str]:\n    \"\"\"\n    Generate RSA public and private keys of a specified size and return them as PEM-encoded strings.\n\n    :param key_size: The size of the RSA key in bits.\n    :return: A tuple containing the PEM-encoded private key and the PEM-encoded public key.\n    \"\"\"\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n    )\n\n    public_key = private_key.public_key()\n\n    pem_private_key = private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.TraditionalOpenSSL,\n        encryption_algorithm=serialization.NoEncryption()\n    )\n\n    pem_public_key = public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    )\n\n    return pem_private_key.decode(), pem_public_key.decode()\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given an undirected graph represented as an adjacency list using a dictionary. The keys in the dictionary are the nodes, and the values are lists of adjacent nodes. Your task is to implement a function that performs a depth-first search (DFS) starting from a given node and returns a list of nodes in the order they are visited.\n\n**Input:**\n- A dictionary `graph` where each key is a node and the corresponding value is a list of adjacent nodes.\n- A string `start` representing the starting node for the DFS.\n\n**Output:**\n- A list of nodes in the order they are visited during the DFS traversal.\n\n**Sample Input:**\n```python\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\nstart = 'A'\n```\n\n**Sample Output:**\n```python\n['A', 'B', 'D', 'E', 'F', 'C']\n```",
    "output": "```python\ndef dfs(graph, start):\n    \"\"\"\n    Perform a depth-first search (DFS) on the given graph starting from the specified node.\n\n    :param graph: A dictionary representing the graph where keys are nodes and values are lists of adjacent nodes.\n    :param start: The starting node for the DFS traversal.\n    :return: A list of nodes in the order they are visited during the DFS traversal.\n    \"\"\"\n    visited = set()\n    dfs_result = []\n    \n    def dfs_helper(node):\n        if node in visited:\n            return\n        visited.add(node)\n        dfs_result.append(node)\n        for neighbor in graph[node]:\n            dfs_helper(neighbor)\n    \n    dfs_helper(start)\n    return dfs_result\n\n# Example usage:\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\n\nprint(dfs(graph, 'A'))  # Output: ['A', 'B', 'D', 'E', 'F', 'C']\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given a text file named 'input.txt' containing a paragraph of text. Your task is to write a Python program that reads the file, counts the number of occurrences of each word, and prints the top 10 most frequent words along with their counts. The program should ignore common stop words such as \"the\", \"and\", \"is\", etc.\n\n**Input:**\n- A text file 'input.txt' containing a paragraph of text.\n\n**Output:**\n- Print the top 10 most frequent words (excluding stop words) along with their counts in descending order of frequency. Each word and its count should be printed on a new line in the format: `word: count`.\n\n**Sample Input:**\n```\nThe quick brown fox jumps over the lazy dog. The dog was not amused.\n```\n\n**Sample Output:**\n```\nthe: 2\ndog: 2\nquick: 1\nbrown: 1\nfox: 1\njumps: 1\nover: 1\nlazy: 1\nwas: 1\nnot: 1\n```",
    "output": "```python\nfrom collections import Counter\nimport re\n\ndef count_words(filename):\n    \"\"\"\n    Reads a text file, counts the occurrences of each word excluding common stop words,\n    and prints the top 10 most frequent words along with their counts.\n\n    :param filename: str, the name of the file to read from\n    \"\"\"\n    # Define a set of common stop words to ignore\n    stop_words = set([\n        \"the\", \"and\", \"is\", \"in\", \"to\", \"a\", \"of\", \"that\", \"it\", \"on\", \n        \"for\", \"was\", \"as\", \"with\", \"his\", \"they\", \"i\", \"at\", \"be\", \"this\", \n        \"have\", \"from\", \"or\", \"one\", \"had\", \"by\", \"not\", \"word\", \"but\", \"what\", \n        \"some\", \"we\", \"can\", \"out\", \"other\", \"were\", \"which\", \"when\", \"an\", \n        \"all\", \"are\", \"this\", \"these\", \"their\", \"there\", \"about\", \"into\", \"who\", \n        \"will\", \"would\", \"should\", \"up\", \"over\", \"so\", \"if\", \"because\", \"than\", \n        \"then\", \"them\", \"its\", \"your\", \"he\", \"she\", \"her\", \"him\", \"has\", \n        \"had\", \"do\", \"does\", \"did\", \"can\", \"could\", \"may\", \"might\", \"must\", \n        \"shall\"\n    ])\n\n    # Read the file\n    with open(filename, 'r') as file:\n        text = file.read()\n    \n    # Extract words, convert to lower case\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    \n    # Filter out stop words\n    filtered_words = [word for word in words if word not in stop_words]\n    \n    # Count the occurrences of each word\n    word_counts = Counter(filtered_words)\n    \n    # Get the top 10 most common words\n    top_words = word_counts.most_common(10)\n\n    # Print results\n    for word, count in top_words:\n        print(f'{word}: {count}')\n\n# Run the function with the input file name\ncount_words('input.txt')\n```",
    "_category": "tree_graph"
  },
  {
    "input": "Implement a `BinaryTree` class in Python that supports the following operations:\n- `insert(value)`: Inserts a new value into the binary search tree. If the value already exists, do nothing.\n- `search(value)`: Returns `True` if the value exists in the tree, otherwise returns `False`.\n- `in_order_traversal()`: Returns a list of values in the tree in in-order traversal order.\n\nThe tree should handle duplicate values by ignoring them during insertion. The implementation should be efficient and handle edge cases appropriately.\n\n**Sample Input/Output:**\n- Input:\n  ```\n  bt = BinaryTree()\n  bt.insert(10)\n  bt.insert(5)\n  bt.insert(15)\n  print(bt.search(5))  # Output: True\n  print(bt.search(7))  # Output: False\n  print(bt.in_order_traversal())  # Output: [5, 10, 15]\n  ```",
    "output": "```python\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        \"\"\"\n        Inserts a new value into the binary search tree.\n        If the value already exists, do nothing.\n        \"\"\"\n        if self.root is None:\n            self.root = TreeNode(value)\n        else:\n            self._insert_recursively(self.root, value)\n\n    def _insert_recursively(self, node, value):\n        if value < node.value:\n            if node.left is None:\n                node.left = TreeNode(value)\n            else:\n                self._insert_recursively(node.left, value)\n        elif value > node.value:\n            if node.right is None:\n                node.right = TreeNode(value)\n            else:\n                self._insert_recursively(node.right, value)\n\n    def search(self, value):\n        \"\"\"\n        Returns True if the value exists in the tree, otherwise returns False.\n        \"\"\"\n        return self._search_recursively(self.root, value)\n\n    def _search_recursively(self, node, value):\n        if node is None:\n            return False\n        if value == node.value:\n            return True\n        elif value < node.value:\n            return self._search_recursively(node.left, value)\n        else:\n            return self._search_recursively(node.right, value)\n\n    def in_order_traversal(self):\n        \"\"\"\n        Returns a list of values in the tree in in-order traversal order.\n        \"\"\"\n        return self._in_order_traversal_recursively(self.root)\n\n    def _in_order_traversal_recursively(self, node):\n        if node is None:\n            return []\n        return (self._in_order_traversal_recursively(node.left) +\n                [node.value] +\n                self._in_order_traversal_recursively(node.right))\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given a well-formed HTML file. Your task is to write a Python function that reads this file and extracts all the text contained within `<p>` tags. The function should return a list of strings, where each string represents the text from a single `<p>` tag.\n\n**Sample Input:**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample Page</title>\n</head>\n<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph with <b>bold</b> text.</p>\n    <p>And this is the third one.</p>\n</body>\n</html>\n```\n\n**Sample Output:**\n```\n['This is the first paragraph.', 'This is the second paragraph with bold text.', 'And this is the third one.']\n```",
    "output": "```python\nfrom html.parser import HTMLParser\n\nclass ParagraphTextExtractor(HTMLParser):\n    def __init__(self):\n        super().__init__()\n        self.in_paragraph = False\n        self.paragraphs = []\n\n    def handle_starttag(self, tag, attrs):\n        \"\"\"Handles the start of an HTML tag.\"\"\"\n        if tag == 'p':\n            self.in_paragraph = True\n\n    def handle_endtag(self, tag):\n        \"\"\"Handles the end of an HTML tag.\"\"\"\n        if tag == 'p':\n            self.in_paragraph = False\n\n    def handle_data(self, data):\n        \"\"\"Handles the data within an HTML tag.\"\"\"\n        if self.in_paragraph:\n            self.paragraphs.append(data)\n\ndef extract_paragraph_text_from_html_file(file_path):\n    \"\"\"\n    Extracts all text within <p> tags from a given HTML file.\n\n    :param file_path: Path to the HTML file.\n    :return: List of strings, each representing text from a <p> tag.\n    \"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:\n        html_content = file.read()\n\n    parser = ParagraphTextExtractor()\n    parser.feed(html_content)\n\n    return parser.paragraphs\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are tasked with implementing a `BinaryTree` class in Python that represents a binary tree data structure. The class should support the following operations:\n\n- `__init__(self, value)`: Initializes a new node with the specified value and no children.\n- `insert_left(self, value)`: Inserts a new left child node with the specified value. If a left child already exists, it should be replaced.\n- `insert_right(self, value)`: Inserts a new right child node with the specified value. If a right child already exists, it should be replaced.\n- `get_left_child(self)`: Returns the left child node, or `None` if it does not exist.\n- `get_right_child(self)`: Returns the right child node, or `None` if it does not exist.\n- `set_value(self, value)`: Sets the value of the current node.\n- `get_value(self)`: Returns the value of the current node.\n\nYour implementation should be efficient and well-documented with comments explaining each method.\n\n**Sample Input/Output:**\n```python\ntree = BinaryTree(10)\ntree.insert_left(5)\ntree.insert_right(15)\nprint(tree.get_left_child().get_value())  # Output: 5\nprint(tree.get_right_child().get_value()) # Output: 15\ntree.set_value(20)\nprint(tree.get_value())                 # Output: 20\n```",
    "output": "```python\nclass BinaryTree:\n    def __init__(self, value):\n        \"\"\"\n        Initialize a new node with the specified value and no children.\n        \n        :param value: The value to be stored in the node.\n        \"\"\"\n        self.value = value\n        self.left_child = None\n        self.right_child = None\n\n    def insert_left(self, value):\n        \"\"\"\n        Insert a new left child node with the specified value.\n        If a left child already exists, it will be replaced.\n        \n        :param value: The value to be stored in the new left child node.\n        \"\"\"\n        self.left_child = BinaryTree(value)\n\n    def insert_right(self, value):\n        \"\"\"\n        Insert a new right child node with the specified value.\n        If a right child already exists, it will be replaced.\n        \n        :param value: The value to be stored in the new right child node.\n        \"\"\"\n        self.right_child = BinaryTree(value)\n\n    def get_left_child(self):\n        \"\"\"\n        Return the left child node, or None if it does not exist.\n        \n        :return: The left child node, or None.\n        \"\"\"\n        return self.left_child\n\n    def get_right_child(self):\n        \"\"\"\n        Return the right child node, or None if it does not exist.\n        \n        :return: The right child node, or None.\n        \"\"\"\n        return self.right_child\n\n    def set_value(self, value):\n        \"\"\"\n        Set the value of the current node.\n        \n        :param value: The new value to be stored in the node.\n        \"\"\"\n        self.value = value\n\n    def get_value(self):\n        \"\"\"\n        Return the value of the current node.\n        \n        :return: The value stored in the node.\n        \"\"\"\n        return self.value\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given an undirected graph represented by an adjacency list. Implement a function `shortest_path(graph, start, end)` that finds the shortest path between two vertices using the Breadth-First Search (BFS) algorithm. The graph is represented by a `Graph` class with an attribute `adj_list`, which is a dictionary where keys are vertices and values are lists of adjacent vertices. Your function should return a list of vertices representing the shortest path from `start` to `end`, or an empty list if no path exists.\n\n**Input:**\n- An instance of the `Graph` class.\n- Two vertices `start` and `end`.\n\n**Output:**\n- A list of vertices representing the shortest path from `start` to `end`, or an empty list if no path exists.\n\n**Sample Input:**\n```python\ngraph = Graph()\ngraph.adj_list = {'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}\nstart = 'A'\nend = 'F'\n```\n\n**Sample Output:**\n```python\n['A', 'C', 'F']\n```",
    "output": "```python\nfrom collections import deque\n\nclass Graph:\n    def __init__(self):\n        self.adj_list = {}\n\ndef shortest_path(graph, start, end):\n    \"\"\"\n    Finds the shortest path between two vertices in an undirected graph using BFS.\n\n    :param graph: An instance of the Graph class.\n    :param start: The starting vertex.\n    :param end: The ending vertex.\n    :return: A list of vertices representing the shortest path, or an empty list if no path exists.\n    \"\"\"\n    if start not in graph.adj_list or end not in graph.adj_list:\n        return []\n\n    queue = deque([(start, [start])])\n    visited = set()\n\n    while queue:\n        current, path = queue.popleft()\n        visited.add(current)\n\n        if current == end:\n            return path\n\n        for neighbor in graph.adj_list[current]:\n            if neighbor not in visited:\n                queue.append((neighbor, path + [neighbor]))\n\n    return []\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given a directed acyclic graph (DAG) represented as an adjacency list `graph`, where `graph[i]` is a list of all nodes `j` for which there is a directed edge from node `i` to node `j`. Your task is to implement a function `topological_sort(graph)` that returns a list containing a topological ordering of the nodes. If the graph contains a cycle, return an empty list.\n\n**Input:**\n- A dictionary `graph` where keys are nodes and values are lists of nodes representing the adjacency list.\n\n**Output:**\n- A list of nodes representing a topological ordering, or an empty list if a cycle exists.\n\n**Sample Input 1:**\n```python\ngraph = {0: [1, 2], 1: [3], 2: [3], 3: []}\n```\n\n**Sample Output 1:**\n```python\n[0, 2, 1, 3]  # or any other valid topological ordering\n```\n\n**Sample Input 2:**\n```python\ngraph = {0: [1], 1: [2], 2: [0]}\n```\n\n**Sample Output 2:**\n```python\n[]\n```",
    "output": "```python\ndef topological_sort(graph):\n    \"\"\"\n    Returns a topological ordering of the nodes in the given directed acyclic graph (DAG).\n    If the graph contains a cycle, returns an empty list.\n\n    :param graph: A dictionary representing the adjacency list of the graph.\n    :return: A list of nodes in topological order, or an empty list if a cycle exists.\n    \"\"\"\n    def dfs(node):\n        if visited[node] == -1:\n            return False\n        if visited[node] == 1:\n            return True\n        visited[node] = -1\n        for neighbor in graph[node]:\n            if not dfs(neighbor):\n                return False\n        visited[node] = 1\n        topo_order.append(node)\n        return True\n\n    visited = {node: 0 for node in graph}\n    topo_order = []\n    for node in graph:\n        if not visited[node]:\n            if not dfs(node):\n                return []\n    return topo_order[::-1]\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given an HTML string as input. Your task is to implement a function `parse_html` that extracts and returns a list of all text content within `<p>` tags. Use the BeautifulSoup library for parsing the HTML.\n\n**Input:**\n- A single string `html_string` representing the HTML content.\n\n**Output:**\n- A list of strings, where each string is the text content of a `<p>` tag found in the HTML.\n\n**Sample Input:**\n```html\n<html>\n<head><title>Sample Page</title></head>\n<body>\n<p>This is the first paragraph.</p>\n<p>This is the second paragraph.</p>\n<div>This is not a paragraph.</div>\n<p>Another paragraph here.</p>\n</body>\n</html>\n```\n\n**Sample Output:**\n```\n['This is the first paragraph.', 'This is the second paragraph.', 'Another paragraph here.']\n```",
    "output": "```python\nfrom bs4 import BeautifulSoup\n\ndef parse_html(html_string):\n    \"\"\"\n    Parses an HTML string and returns a list of text content within <p> tags.\n\n    :param html_string: A string containing HTML content.\n    :return: A list of strings, each representing the text content of a <p> tag.\n    \"\"\"\n    soup = BeautifulSoup(html_string, 'html.parser')\n    paragraphs = soup.find_all('p')\n    texts = [p.get_text() for p in paragraphs]\n    return texts\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are given a string `s` that may contain spaces, hyphens, underscores, and camelCase words. Your task is to write a function `convert_to_snake_case(s)` that converts the string to snake_case. The output should be a lowercase string with words separated by underscores.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 1000) containing alphanumeric characters, spaces, hyphens, and underscores.\n\n**Output:**\n- A single string representing the input string converted to snake_case.\n\n**Sample Input:**\n```\nThisIsAString-With Spaces_underscores\n```\n\n**Sample Output:**\n```\nthis_is_a_string_with_spaces_underscores\n```",
    "output": "```python\nimport re\n\ndef convert_to_snake_case(s):\n    \"\"\"\n    Convert a given string to snake_case.\n    \n    Parameters:\n    s (str): The input string containing spaces, hyphens, underscores, and camelCase words.\n    \n    Returns:\n    str: The converted string in snake_case.\n    \"\"\"\n    # Replace hyphens and spaces with underscores\n    s = re.sub(r'[\\s-]+', '_', s)\n    # Insert underscores between words in camelCase\n    s = re.sub(r'(?<!^)(?=[A-Z])', '_', s)\n    # Convert the entire string to lowercase\n    s = s.lower()\n    return s\n\n# Test the function with the given input\nprint(convert_to_snake_case(\"ThisIsAString-With Spaces_underscores\"))\n```",
    "_category": "tree_graph"
  },
  {
    "input": "You are tasked with implementing a function to verify the validity of a URL by sending a HEAD request. Your function should return `True` if the URL responds with a status code of 200, and `False` otherwise. The function must handle any exceptions that may occur during the request process gracefully.\n\n**Input:**\n- A single string representing the URL to be validated.\n\n**Output:**\n- A boolean value indicating whether the URL is valid.\n\n**Sample Input:**\n```\nhttps://www.example.com\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\nhttps://nonexistentwebsite12345.com\n```\n\n**Sample Output:**\n```\nFalse\n```",
    "output": "```python\nimport requests\n\ndef is_url_valid(url):\n    \"\"\"\n    Checks if a given URL is valid by sending a HEAD request.\n    \n    Parameters:\n    url (str): The URL to be validated.\n    \n    Returns:\n    bool: True if the URL responds with a status code of 200, False otherwise.\n    \"\"\"\n    try:\n        response = requests.head(url)\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function to process a CSV file containing customer data. The CSV file has the following columns: `customer_id`, `first_name`, `last_name`, and `email`. Your function should read this file and return a dictionary where each key is a `customer_id` and the corresponding value is another dictionary containing the `first_name`, `last_name`, and `email` of the customer.\n\n**Input:**\n- A string `filename` representing the path to the CSV file.\n\n**Output:**\n- A dictionary where each key is a `customer_id` (string) and the value is a dictionary with keys `first_name`, `last_name`, and `email`, each mapping to the respective string values from the CSV.\n\n**Sample Input:**\nGiven a CSV file `customers.csv` with the following content:\n```\ncustomer_id,first_name,last_name,email\n1,John,Doe,john.doe@example.com\n2,Jane,Smith,jane.smith@example.com\n```\n\n**Sample Output:**\n```python\n{\n    '1': {'first_name': 'John', 'last_name': 'Doe', 'email': 'john.doe@example.com'},\n    '2': {'first_name': 'Jane', 'last_name': 'Smith', 'email': 'jane.smith@example.com'}\n}\n```",
    "output": "```python\nimport csv\n\ndef read_customer_data(filename):\n    \"\"\"\n    Reads a CSV file containing customer data and returns a dictionary where the keys are customer IDs\n    and the values are dictionaries containing the customer's first name, last name, and email address.\n\n    :param filename: A string representing the path to the CSV file.\n    :return: A dictionary with customer IDs as keys and dictionaries of customer details as values.\n    \"\"\"\n    customers = {}\n    with open(filename, mode='r', newline='') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            customer_id = row['customer_id']\n            customers[customer_id] = {\n                'first_name': row['first_name'],\n                'last_name': row['last_name'],\n                'email': row['email']\n            }\n    return customers\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Matrix` class in Python that supports basic matrix operations: addition, subtraction, multiplication, and transposition. The class should handle matrices represented as 2D lists. For operations that require compatible dimensions (addition, subtraction, multiplication), your class should raise a `ValueError` if the dimensions do not match the required criteria.\n\n**Input:**\n- The `Matrix` class will be instantiated with a 2D list of integers.\n- The `__add__`, `__sub__`, and `__mul__` methods will be called with another `Matrix` object as an argument.\n- The `transpose` method will be called without any arguments.\n\n**Output:**\n- The `__add__`, `__sub__`, and `__mul__` methods should return a new `Matrix` object representing the result of the operation.\n- The `transpose` method should return a new `Matrix` object representing the transposed matrix.\n- The `__repr__` method should return a string representation of the matrix suitable for printing.\n\n**Sample Input/Output:**\n```python\nm1 = Matrix([[1, 2], [3, 4]])\nm2 = Matrix([[2, 0], [1, 2]])\nprint(m1 + m2)  # Output: [3, 2]\n                #         [4, 6]\nprint(m1 - m2)  # Output: [-1, 2]\n                #         [2, 2]\nprint(m1 * m2)  # Output: [4, 4]\n                #         [10, 8]\nprint(m1.transpose())  # Output: [1, 3]\n                         #         [2, 4]\n```",
    "output": "```python\nclass Matrix:\n    def __init__(self, data):\n        \"\"\"\n        Initializes a Matrix object with the given 2D list data.\n        Raises ValueError if the input is not a valid 2D list with consistent row lengths.\n        \"\"\"\n        if not all(isinstance(row, list) and len(row) == len(data[0]) for row in data):\n            raise ValueError(\"All rows must be lists of the same length.\")\n        self.data = data\n\n    def __add__(self, other):\n        \"\"\"\n        Adds two matrices of the same shape.\n        Raises ValueError if the matrices do not have the same dimensions.\n        \"\"\"\n        if not isinstance(other, Matrix) or self.shape() != other.shape():\n            raise ValueError(\"Matrices must be of the same shape to be added.\")\n        return Matrix([[a + b for a, b in zip(self_row, other_row)] \n                       for self_row, other_row in zip(self.data, other.data)])\n\n    def __sub__(self, other):\n        \"\"\"\n        Subtracts one matrix from another of the same shape.\n        Raises ValueError if the matrices do not have the same dimensions.\n        \"\"\"\n        if not isinstance(other, Matrix) or self.shape() != other.shape():\n            raise ValueError(\"Matrices must be of the same shape to be subtracted.\")\n        return Matrix([[a - b for a, b in zip(self_row, other_row)]\n                       for self_row, other_row in zip(self.data, other.data)])\n\n    def __mul__(self, other):\n        \"\"\"\n        Multiplies two matrices where the number of columns in the first matrix\n        equals the number of rows in the second matrix.\n        Raises ValueError if the matrices cannot be multiplied due to incompatible dimensions.\n        \"\"\"\n        if not isinstance(other, Matrix) or self.shape()[1] != other.shape()[0]:\n            raise ValueError(\"Matrices can only be multiplied if the number of columns in the first one equals the number of rows in the second.\")\n        result = [\n            [sum(a * b for a, b in zip(self_row, other_col)) \n             for other_col in zip(*other.data)] \n            for self_row in self.data\n        ]\n        return Matrix(result)\n\n    def transpose(self):\n        \"\"\"\n        Returns the transpose of the matrix.\n        \"\"\"\n        return Matrix([list(row) for row in zip(*self.data)])\n\n    def shape(self):\n        \"\"\"\n        Returns the shape of the matrix as a tuple (number of rows, number of columns).\n        \"\"\"\n        return len(self.data), len(self.data[0])\n\n    def __repr__(self):\n        \"\"\"\n        Returns a string representation of the matrix suitable for printing.\n        \"\"\"\n        return '\\n'.join(['[' + ', '.join(map(str, row)) + ']' for row in self.data])\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of words and a rhythm pattern. The rhythm pattern is represented by a string consisting of dashes (`-`) and dots (`.`), where each dash represents a long syllable and each dot represents a short syllable. Your task is to implement a function `find_rhythmic_words(word_list, rhythm)` that returns a list of words from `word_list` that match the given rhythm pattern.\n\n**Input:**\n- `word_list`: A list of strings, where each string is a word.\n- `rhythm`: A string consisting of dashes (`-`) and dots (`.`).\n\n**Output:**\n- A list of strings from `word_list` that match the rhythm pattern.\n\n**Sample Input:**\n```python\nword_list = [\"banana\", \"potato\", \"apple\", \"orange\", \"grape\", \"peach\"]\nrhythm = \"-..\"\n```\n\n**Sample Output:**\n```python\n[\"banana\", \"potato\"]\n```",
    "output": "```python\ndef find_rhythmic_words(word_list, rhythm):\n    \"\"\"\n    Returns a list of words from word_list that match the given rhythm pattern.\n    \n    :param word_list: List of words to be checked.\n    :param rhythm: Rhythm pattern to match.\n    :return: List of words matching the rhythm pattern.\n    \"\"\"\n    vowels = set('aeiou')\n    matching_words = []\n\n    def get_rhythm(word):\n        \"\"\"\n        Generates the rhythm pattern for a given word.\n        \n        :param word: The word to generate the rhythm pattern for.\n        :return: Rhythm pattern as a string.\n        \"\"\"\n        rhythm = []\n        i = 0\n        while i < len(word):\n            if word[i] in vowels:\n                if i + 1 < len(word) and word[i + 1] in vowels:\n                    rhythm.append('-')\n                    i += 2\n                else:\n                    rhythm.append('.')\n                    i += 1\n            else:\n                if i + 1 < len(word) and word[i + 1] in vowels:\n                    rhythm.append('-')\n                else:\n                    rhythm.append('.')\n                i += 1\n        return ''.join(rhythm)\n\n    for word in word_list:\n        if get_rhythm(word) == rhythm:\n            matching_words.append(word)\n\n    return matching_words\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing an `InventoryManager` class for a store's inventory system. The class should support the following operations:\n\n1. **Add Item**: Add a new item to the inventory or update the quantity if the item already exists.\n2. **Remove Item**: Remove a specified quantity of an item from the inventory. If the quantity to be removed exceeds the available quantity, raise a `ValueError`. If the item does not exist, raise a `KeyError`.\n3. **Update Item Quantity**: Update the quantity of a specific item in the inventory. If the item does not exist, raise a `KeyError`.\n4. **Update Item Price**: Update the price per unit of a specific item in the inventory. If the item does not exist, raise a `KeyError`.\n5. **Generate Inventory Report**: Generate a report that includes the total number of items in the inventory and the total value of the inventory.\n\n**Input/Output Specification**:\n- The `InventoryManager` class will be tested with a series of operations. Each operation will be a tuple where the first element is the operation name (a string) and the subsequent elements are the arguments for the operation.\n- The operations are:\n  - `(\"add_item\", item_name, quantity, price_per_unit)`\n  - `(\"remove_item\", item_name, quantity)`\n  - `(\"update_item_quantity\", item_name, quantity)`\n  - `(\"update_item_price\", item_name, price_per_unit)`\n  - `(\"generate_inventory_report\",)`\n\n**Sample Input**:\n```python\noperations = [\n    (\"add_item\", \"apple\", 10, 0.5),\n    (\"add_item\", \"banana\", 5, 0.3),\n    (\"update_item_quantity\", \"apple\", 15),\n    (\"remove_item\", \"banana\", 2),\n    (\"generate_inventory_report\",),\n    (\"update_item_price\", \"apple\", 0.6),\n    (\"generate_inventory_report\",)\n]\n```\n\n**Sample Output**:\n```python\n{'total_items': 18, 'total_value': 10.8}\n{'total_items': 18, 'total_value': 12.6}\n```",
    "output": "```python\nclass InventoryManager:\n    def __init__(self):\n        \"\"\"Initialize an empty dictionary to hold inventory.\"\"\"\n        self.inventory = {}\n\n    def add_item(self, item_name, quantity, price_per_unit):\n        \"\"\"Add a new item to the inventory or update quantity if it exists.\"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n        else:\n            self.inventory[item_name] = {'quantity': quantity, 'price_per_unit': price_per_unit}\n\n    def remove_item(self, item_name, quantity):\n        \"\"\"Remove a certain quantity of an item from the inventory.\"\"\"\n        if item_name in self.inventory:\n            if self.inventory[item_name]['quantity'] > quantity:\n                self.inventory[item_name]['quantity'] -= quantity\n            elif self.inventory[item_name]['quantity'] == quantity:\n                del self.inventory[item_name]\n            else:\n                raise ValueError(\"Not enough inventory to remove\")\n        else:\n            raise KeyError(\"Item not found in inventory\")\n\n    def update_item_quantity(self, item_name, quantity):\n        \"\"\"Update the quantity of a specific item in the inventory.\"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] = quantity\n        else:\n            raise KeyError(\"Item not found in inventory\")\n\n    def update_item_price(self, item_name, price_per_unit):\n        \"\"\"Update the price per unit of a specific item in the inventory.\"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['price_per_unit'] = price_per_unit\n        else:\n            raise KeyError(\"Item not found in inventory\")\n\n    def generate_inventory_report(self):\n        \"\"\"Generate a report of the current inventory.\"\"\"\n        total_items = 0\n        total_value = 0.0\n        for item_name, details in self.inventory.items():\n            quantity = details['quantity']\n            price_per_unit = details['price_per_unit']\n            item_value = quantity * price_per_unit\n            total_items += quantity\n            total_value += item_value\n\n        return {'total_items': total_items, 'total_value': total_value}\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `validate_date(date_str)` that determines if a given date string is valid according to the Gregorian calendar. The date string must be in the format `YYYY-MM-DD`. Your function should return `True` if the date is valid, and `False` otherwise.\n\n**Sample Input:**\n```\nvalidate_date(\"2023-02-29\")\nvalidate_date(\"2020-02-29\")\nvalidate_date(\"2021-04-31\")\nvalidate_date(\"2021-04-30\")\n```\n\n**Sample Output:**\n```\nFalse\nTrue\nFalse\nTrue\n```",
    "output": "```python\nfrom datetime import datetime\n\ndef validate_date(date_str):\n    \"\"\"\n    Validates if the given date string is in the correct format and represents a real calendar date.\n    \n    Parameters:\n    date_str (str): A date string in the format YYYY-MM-DD.\n    \n    Returns:\n    bool: True if the date is valid, False otherwise.\n    \"\"\"\n    try:\n        datetime.strptime(date_str, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a CSV file with headers. Your task is to write a Python function that reads this file, processes its contents, and calculates the average of a specified column. The function should handle potential errors such as missing files or invalid data by returning appropriate error messages. The function should return the average as a float if successful, or an error message as a string if an error occurs.\n\n**Input:**\n- A string `file_path` representing the path to the CSV file.\n- A string `column_name` representing the name of the column for which the average should be calculated.\n\n**Output:**\n- A float representing the average of the specified column if successful.\n- A string representing an error message if an error occurs.\n\n**Sample Input:**\n- File `data.csv` contents:\n  ```\n  name,age,score\n  Alice,25,85\n  Bob,30,90\n  Charlie,22,78\n  David,28,92\n  Eve,24,88\n  ```\n- Function call: `calculate_average_from_csv('data.csv', 'age')`\n\n**Sample Output:**\n- `26.0`",
    "output": "```python\nimport csv\n\ndef calculate_average_from_csv(file_path, column_name):\n    \"\"\"\n    Calculate the average of a specified column in a CSV file.\n\n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column to calculate the average for.\n\n    Returns:\n    float: The average of the specified column if successful.\n    str: An error message if an error occurs.\n    \"\"\"\n    try:\n        with open(file_path, mode='r', newline='', encoding='utf-8') as file:\n            reader = csv.DictReader(file)\n            if column_name not in reader.fieldnames:\n                return f\"Column '{column_name}' not found in CSV headers.\"\n            \n            total = 0\n            count = 0\n            \n            for row in reader:\n                try:\n                    value = float(row[column_name])\n                    total += value\n                    count += 1\n                except ValueError:\n                    print(f\"Warning: Non-numeric data encountered in '{column_name}' column, skipping row.\")\n                    continue\n            \n            if count == 0:\n                return f\"No valid numeric data found in column '{column_name}'.\"\n            \n            return total / count\n    \n    except FileNotFoundError:\n        return f\"File '{file_path}' not found.\"\n    except Exception as e:\n        return f\"An error occurred: {e}\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dataset in the form of a pandas DataFrame and a target label column name. Your task is to implement a function `classify_data` that splits the dataset into training and testing sets using an 80-20 split. Train a logistic regression model on the training set and evaluate its performance on the testing set. Return the accuracy of the model.\n\n**Input:**\n- `data`: A pandas DataFrame containing the dataset.\n- `target_label`: A string representing the column name of the target variable.\n\n**Output:**\n- A float representing the accuracy of the logistic regression model on the testing set.\n\n**Sample Input:**\n```python\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'feature2': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'target': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n})\ntarget_label = 'target'\n```\n\n**Sample Output:**\n```\n0.8\n```",
    "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\ndef classify_data(data, target_label):\n    \"\"\"\n    Splits the dataset into training and testing sets, trains a logistic regression model,\n    and returns the accuracy of the model on the testing set.\n\n    Parameters:\n    - data: pandas DataFrame containing the dataset.\n    - target_label: string, the column name of the target variable.\n\n    Returns:\n    - float, the accuracy of the logistic regression model on the testing set.\n    \"\"\"\n    # Split the features and the target variable\n    X = data.drop(columns=[target_label])\n    y = data[target_label]\n    \n    # Split the dataset into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Initialize the Logistic Regression model\n    model = LogisticRegression(max_iter=200)\n    \n    # Fit the model on the training data\n    model.fit(X_train, y_train)\n    \n    # Predict on the testing set\n    y_pred = model.predict(X_test)\n    \n    # Calculate the accuracy of the model\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    return accuracy\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to implement a function `find_longest_palindrome` that returns the longest palindromic substring within `s`. If there are multiple palindromic substrings of the same maximum length, return the one that appears first in the string. If no palindromic substring is found, return an empty string. A palindromic substring is a sequence of characters that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^3), which may contain uppercase and lowercase letters, digits, spaces, and punctuation.\n\n**Output:**\n- A string representing the longest palindromic substring in its original form, including spaces and punctuation.\n\n**Sample Input:**\n```\n\"Madam Arora teaches malayalam\"\n```\n\n**Sample Output:**\n```\n\"Madam Arora\"\n```\n\n**Sample Input:**\n```\n\"A man, a plan, a canal, Panama\"\n```\n\n**Sample Output:**\n```\n\"A man, a plan, a canal, Panama\"\n```\n\n**Sample Input:**\n```\n\"No lemon, no melon\"\n```\n\n**Sample Output:**\n```\n\"No lemon, no melon\"\n```",
    "output": "```python\nimport re\n\ndef find_longest_palindrome(s: str) -> str:\n    \"\"\"\n    Finds the longest palindromic substring in the given string `s`.\n    Ignores spaces, punctuation, and capitalization.\n    \n    :param s: The input string.\n    :return: The longest palindromic substring in its original form.\n    \"\"\"\n    cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower()\n\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n\n    max_length = 0\n    longest_palindrome = ''\n    \n    for i in range(len(cleaned_s)):\n        for j in range(i + 1, len(cleaned_s) + 1):\n            substring = cleaned_s[i:j]\n            if is_palindrome(substring) and len(substring) > max_length:\n                max_length = len(substring)\n                longest_palindrome = substring\n\n    start_index = s.lower().find(longest_palindrome)\n    end_index = start_index + len(longest_palindrome)\n    return s[start_index:end_index]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of tuples, where each tuple consists of a person's name (a string) and their age (an integer). Your task is to implement a function that sorts this list in descending order based on age. If two individuals share the same age, they should be sorted alphabetically by their names in ascending order.\n\n**Input:**\n- A list of tuples, where each tuple contains a string (name) and an integer (age).\n\n**Output:**\n- A new list of tuples sorted by age in descending order. If ages are equal, sort by name in ascending order.\n\n**Sample Input:**\n```python\n[(\"Alice\", 30), (\"Bob\", 25), (\"Charlie\", 30), (\"David\", 20)]\n```\n\n**Sample Output:**\n```python\n[(\"Alice\", 30), (\"Charlie\", 30), (\"Bob\", 25), (\"David\", 20)]\n```",
    "output": "```python\ndef sort_people_by_age(people):\n    \"\"\"\n    Sorts a list of tuples containing names and ages.\n    \n    Parameters:\n    people (list of tuples): A list where each tuple contains a name (str) and an age (int).\n    \n    Returns:\n    list of tuples: A new list sorted by age in descending order, and by name in ascending order if ages are equal.\n    \"\"\"\n    return sorted(people, key=lambda x: (-x[1], x[0]))\n\n# Example usage\npeople = [(\"Alice\", 30), (\"Bob\", 25), (\"Charlie\", 30), (\"David\", 20)]\nsorted_people = sort_people_by_age(people)\nprint(sorted_people)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Student` class that models a student's information and their academic performance. The class should have the following attributes:\n- `name`: A string representing the student's name.\n- `age`: An integer representing the student's age.\n- `scores`: A list of integers representing the scores the student has received on various exams.\n\nYour task is to implement a method `average_score` within the `Student` class that computes and returns the average of the student's scores. If the `scores` list is empty, the method should return `0`.\n\n**Sample Input:**\n- `name`: \"John Doe\"\n- `age`: 20\n- `scores`: [85, 90, 78, 92]\n\n**Sample Output:**\n- `86.25`",
    "output": "```python\nclass Student:\n    def __init__(self, name, age, scores):\n        \"\"\"\n        Initialize a new Student instance.\n\n        :param name: str, the name of the student\n        :param age: int, the age of the student\n        :param scores: list of int, the scores of the student\n        \"\"\"\n        self.name = name\n        self.age = age\n        self.scores = scores\n\n    def average_score(self):\n        \"\"\"\n        Calculate and return the average score of the student.\n\n        :return: float, the average score; 0 if no scores are available\n        \"\"\"\n        if not self.scores:\n            return 0\n        return sum(self.scores) / len(self.scores)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to write a function `find_palindromes` that identifies all unique palindromic substrings within `s`. A palindromic substring is a sequence of characters that reads the same forward and backward. The function should return a list of these substrings.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 1000), consisting of lowercase English letters.\n\n**Output:**\n- A list of unique palindromic substrings found in `s`.\n\n**Sample Input:**\n```\nracecar\n```\n\n**Sample Output:**\n```\n['racecar', 'cec', 'aceca', 'ece', 'r', 'a', 'c', 'e']\n```",
    "output": "```python\ndef find_palindromes(s: str) -> list:\n    \"\"\"\n    Finds all unique palindromic substrings in the given string.\n\n    :param s: The input string.\n    :return: A list of unique palindromic substrings.\n    \"\"\"\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n\n    palindromes = set()\n    length = len(s)\n    \n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                palindromes.add(substring)\n    \n    return list(palindromes)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of binary strings `binary_strings` and a target binary string `target`. Your task is to implement a function `find_common_prefix(binary_strings, target)` that returns the length of the longest common prefix between the `target` string and any string in the `binary_strings` list. If no common prefix exists, the function should return 0.\n\n**Input:**\n- A list of binary strings `binary_strings` (1 \u2264 len(binary_strings) \u2264 1000).\n- A binary string `target` (1 \u2264 len(target) \u2264 1000).\n\n**Output:**\n- An integer representing the length of the longest common prefix.\n\n**Sample Input:**\n- `binary_strings = ['10101', '10011', '11000']`\n- `target = '10101'`\n\n**Sample Output:**\n- `5`\n\n**Sample Input:**\n- `binary_strings = ['10101', '10011', '11000']`\n- `target = '11111'`\n\n**Sample Output:**\n- `0`\n\n**Sample Input:**\n- `binary_strings = ['10101', '10011', '11000']`\n- `target = '10011'`\n\n**Sample Output:**\n- `3`",
    "output": "```python\ndef find_common_prefix(binary_strings, target):\n    \"\"\"\n    Returns the length of the longest common prefix between the target string\n    and any string in the binary_strings list.\n    \n    :param binary_strings: List of binary strings.\n    :param target: Target binary string.\n    :return: Length of the longest common prefix.\n    \"\"\"\n    def common_prefix_length(s1, s2):\n        \"\"\"\n        Returns the length of the common prefix between two binary strings.\n        \n        :param s1: First binary string.\n        :param s2: Second binary string.\n        :return: Length of the common prefix.\n        \"\"\"\n        min_length = min(len(s1), len(s2))\n        for i in range(min_length):\n            if s1[i] != s2[i]:\n                return i\n        return min_length\n\n    max_common_prefix = 0\n    for binary_string in binary_strings:\n        current_common_prefix = common_prefix_length(binary_string, target)\n        if current_common_prefix > max_common_prefix:\n            max_common_prefix = current_common_prefix\n\n    return max_common_prefix\n\n# Example usage:\nprint(find_common_prefix(['10101', '10011', '11000'], '10101'))  # Output: 5\nprint(find_common_prefix(['10101', '10011', '11000'], '11111'))  # Output: 0\nprint(find_common_prefix(['10101', '10011', '11000'], '10011'))  # Output: 3\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `generate_ngrams(input_text, n)` that processes a given string `input_text` and an integer `n`. The function should return a list of all `n`-grams from the input text. An `n`-gram is defined as a contiguous sequence of `n` words. Before generating the `n`-grams, the function must remove any punctuation from the text and convert it to lowercase.\n\n**Input:**\n- A string `input_text` (1 \u2264 |input_text| \u2264 1000) containing words separated by spaces and possibly including punctuation.\n- An integer `n` (1 \u2264 n \u2264 number of words in `input_text`).\n\n**Output:**\n- A list of strings, where each string is an `n`-gram from the processed text.\n\n**Sample Input:**\n```\n\"Hello, world! This is a test.\"\n2\n```\n\n**Sample Output:**\n```\n['hello world', 'world this', 'this is', 'is a', 'a test']\n```",
    "output": "```python\nimport re\n\ndef generate_ngrams(input_text, n):\n    \"\"\"\n    Generate a list of n-grams from the input text.\n    \n    Parameters:\n    input_text (str): The input text from which to generate n-grams.\n    n (int): The number of words in each n-gram.\n    \n    Returns:\n    list: A list of n-grams.\n    \"\"\"\n    # Remove punctuation using regex and convert text to lowercase\n    cleaned_text = re.sub(r'[^\\w\\s]', '', input_text).lower()\n    # Split the cleaned text into words\n    words = cleaned_text.split()\n    # Generate n-grams\n    ngrams = [' '.join(words[i:i+n]) for i in range(len(words) - n + 1)]\n    return ngrams\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a well-formed HTML string `html_content` without nested tags of the same type. Your task is to write a Python function `parse_html_tags(html_content)` that returns a dictionary. The keys of the dictionary should be the tag names, and the values should be the number of times each tag appears in the HTML content. Only count the opening tags.\n\n**Input:**\n- A single string `html_content` (1 \u2264 len(html_content) \u2264 10^4) representing the HTML content.\n\n**Output:**\n- A dictionary where keys are tag names and values are the counts of each tag.\n\n**Sample Input:**\n```html\n<html><head><title>Test</title></head><body><h1>Hello</h1><p>World</p></body></html>\n```\n\n**Sample Output:**\n```python\n{'html': 1, 'head': 1, 'title': 1, 'body': 1, 'h1': 1, 'p': 1}\n```",
    "output": "```python\nimport re\n\ndef parse_html_tags(html_content):\n    \"\"\"\n    Parses the given HTML content and returns a dictionary with the count of each opening tag.\n\n    :param html_content: A string representing the HTML content.\n    :return: A dictionary with tag names as keys and their counts as values.\n    \"\"\"\n    tag_pattern = re.compile(r'<(/?)(\\w+)')\n    tags = tag_pattern.findall(html_content)\n    tag_counts = {}\n\n    for is_closing, tag in tags:\n        if not is_closing:\n            if tag in tag_counts:\n                tag_counts[tag] += 1\n            else:\n                tag_counts[tag] = 1\n\n    return tag_counts\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of strings, where each string represents a sentence. Your task is to write a Python function that capitalizes the first word of each sentence while keeping the rest of the sentence unchanged. The function should return a new list with the modified sentences.\n\n**Sample Input:**\n```python\n[\"hello world\", \"this is a test\", \"python programming\"]\n```\n\n**Sample Output:**\n```python\n[\"Hello world\", \"This is a test\", \"Python programming\"]\n```",
    "output": "```python\ndef capitalize_first_word(sentences):\n    \"\"\"\n    Capitalizes the first word of each sentence in a list of sentences.\n\n    Parameters:\n    sentences (list of str): A list of strings where each string is a sentence.\n\n    Returns:\n    list of str: A list of strings with the first word of each sentence capitalized.\n    \"\"\"\n    return [' '.join([word.capitalize() if i == 0 else word for i, word in enumerate(sentence.split())]) for sentence in sentences]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dictionary where each key is a category and the corresponding value is a list of items belonging to that category. Your task is to create a new dictionary where each item from the lists becomes a key, and its category becomes the value. Note that each item appears in exactly one category.\n\n**Input:**\n- A dictionary `input_dict` where keys are strings representing categories and values are lists of strings representing items.\n\n**Output:**\n- A dictionary where each key is an item from the lists and each value is the category to which the item belongs.\n\n**Sample Input:**\n```python\n{\n    'fruits': ['apple', 'banana', 'orange'],\n    'vegetables': ['carrot', 'lettuce', 'spinach']\n}\n```\n\n**Sample Output:**\n```python\n{\n    'apple': 'fruits', \n    'banana': 'fruits', \n    'orange': 'fruits',\n    'carrot': 'vegetables', \n    'lettuce': 'vegetables', \n    'spinach': 'vegetables'\n}\n```",
    "output": "```python\ndef swap_dict_items_categories(input_dict):\n    \"\"\"\n    Swap the keys and values of the given dictionary.\n    \n    Each item in the lists becomes a key in the returned dictionary, and the original key (category)\n    becomes the value of the new dictionary.\n    \n    Args:\n    input_dict (dict): Dictionary with categories as keys and lists of items as values.\n    \n    Returns:\n    dict: A dictionary with items as keys and their categories as values.\n    \"\"\"\n    output_dict = {}\n    for category, items in input_dict.items():\n        for item in items:\n            output_dict[item] = category\n    return output_dict\n\n# Example usage:\ncategory_items_dict = {\n    'fruits': ['apple', 'banana', 'orange'],\n    'vegetables': ['carrot', 'lettuce', 'spinach']\n}\n\nswapped_dict = swap_dict_items_categories(category_items_dict)\nprint(swapped_dict)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s` consisting of lowercase English letters. Your task is to determine the number of unique vowels present in the string. A vowel is defined as one of the following characters: 'a', 'e', 'i', 'o', 'u'. \n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 100).\n\n**Output:**\n- An integer representing the number of unique vowels in the string.\n\n**Sample Input:**\n```\nhello\nworld\naeiou\nxyz\n```\n\n**Sample Output:**\n```\n2\n1\n5\n0\n```",
    "output": "```python\ndef count_unique_vowels(s: str) -> int:\n    \"\"\"\n    Counts the number of unique vowels in the given string.\n\n    :param s: A string consisting of lowercase English letters.\n    :return: An integer representing the number of unique vowels in the string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    unique_vowels = set()\n    \n    for char in s:\n        if char in vowels:\n            unique_vowels.add(char)\n    \n    return len(unique_vowels)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given two strings `X` and `Y`. Your task is to find the longest common subsequence (LCS) between these two strings. The LCS is the longest sequence that appears in both strings in the same order, but not necessarily consecutively. Your function should return the LCS as a string.\n\n**Input:**\n- Two strings `X` and `Y` (1 \u2264 |X|, |Y| \u2264 1000), consisting of uppercase English letters.\n\n**Output:**\n- A single string representing the longest common subsequence of `X` and `Y`.\n\n**Sample Input:**\n```\nAGGTAB\nGXTXAYB\n```\n\n**Sample Output:**\n```\nGTAB\n```",
    "output": "```python\ndef longest_common_subsequence(X: str, Y: str) -> str:\n    \"\"\"\n    Finds the longest common subsequence between two strings X and Y.\n\n    :param X: First input string\n    :param Y: Second input string\n    :return: Longest common subsequence as a string\n    \"\"\"\n    m, n = len(X), len(Y)\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    index = L[m][n]\n    lcs = [\"\"] * (index + 1)\n    lcs[index] = \"\"\n\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(lcs)\n\n# Example usage\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Longest Common Subsequence:\", longest_common_subsequence(X, Y))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to determine the minimum number of characters that need to be deleted from `s` to make it a palindrome. A palindrome is a string that reads the same forwards and backwards.\n\n**Input:**\n- A single line containing the string `s` (1 \u2264 |s| \u2264 1000), consisting of lowercase English letters.\n\n**Output:**\n- A single integer representing the minimum number of deletions required.\n\n**Sample Input:**\n```\nabcda\n```\n\n**Sample Output:**\n```\n2\n```",
    "output": "```python\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Computes the minimum number of deletions required to make the input string a palindrome.\n\n    :param s: Input string to transform into a palindrome\n    :return: Minimum number of deletions required\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n\n    return dp[0][n - 1]\n\n# Example usage:\nprint(min_deletions_to_palindrome(\"abcda\"))  # Output: 2\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with developing a chatbot system capable of answering programming-related questions, including common interview questions. Implement a function `generate_response` that takes a string `user_message` as input and returns a string `chatbot_response`. The chatbot should provide brief explanations and applications of programming concepts. For example, if the input is `\"What is a stack data structure?\"`, the output should be a concise explanation of the stack data structure and its uses in programming.\n\n**Sample Input:**\n```\n\"What is a stack data structure?\"\n```\n\n**Sample Output:**\n```\n\"A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. Common applications include function call management, expression evaluation, and backtracking algorithms.\"\n```",
    "output": "```python\ndef generate_response(user_message: str) -> str:\n    \"\"\"\n    Generates a response to a user's programming-related question.\n\n    Parameters:\n    user_message (str): The question asked by the user.\n\n    Returns:\n    str: A brief explanation and applications of the programming concept.\n    \"\"\"\n    if \"What is a stack data structure?\" in user_message:\n        return \"A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. Common applications include function call management, expression evaluation, and backtracking algorithms.\"\n    # Additional conditions can be added here for other questions\n    return \"I'm sorry, I don't have an answer for that question.\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Book` class that manages the details and availability of a book in a library system. The class should support the following functionalities:\n\n- Store the book's title, author, year of publication, number of pages, and its checkout status.\n- Provide methods to check out and check in the book.\n- Return a formatted string containing the book's title, author, and year of publication.\n- Calculate the estimated reading time in hours for a person reading at an average speed of 250 words per minute.\n\nImplement the `Book` class with the following specifications:\n\n- **Attributes:**\n  - `title`: A string representing the title of the book.\n  - `author`: A string representing the author of the book.\n  - `year_published`: An integer representing the year the book was published.\n  - `number_of_pages`: An integer representing the number of pages in the book.\n  - `is_checked_out`: A boolean indicating whether the book is currently checked out.\n\n- **Methods:**\n  - `check_out()`: Marks the book as checked out.\n  - `check_in()`: Marks the book as checked in.\n  - `get_book_details()`: Returns a string in the format `\"'Title' by Author, published in Year\"`.\n  - `calculate_reading_time()`: Returns the estimated reading time in hours.\n\n**Sample Input/Output:**\n```python\nbook = Book(\"1984\", \"George Orwell\", 1949, 328)\nprint(book.get_book_details())  # Output: \"'1984' by George Orwell, published in 1949\"\nprint(book.calculate_reading_time())  # Output: 4.373333333333333\nbook.check_out()\nprint(book.is_checked_out)  # Output: True\nbook.check_in()\nprint(book.is_checked_out)  # Output: False\n```",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, year_published, number_of_pages, is_checked_out=False):\n        \"\"\"\n        Initializes a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param year_published: The year the book was published.\n        :param number_of_pages: The number of pages in the book.\n        :param is_checked_out: The checkout status of the book.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n        self.number_of_pages = number_of_pages\n        self.is_checked_out = is_checked_out\n\n    def check_out(self):\n        \"\"\"\n        Marks the book as checked out.\n        \"\"\"\n        self.is_checked_out = True\n\n    def check_in(self):\n        \"\"\"\n        Marks the book as checked in.\n        \"\"\"\n        self.is_checked_out = False\n\n    def get_book_details(self):\n        \"\"\"\n        Returns a formatted string containing the book's title, author, and year of publication.\n\n        :return: A string in the format \"'Title' by Author, published in Year\".\n        \"\"\"\n        return f\"'{self.title}' by {self.author}, published in {self.year_published}\"\n\n    def calculate_reading_time(self):\n        \"\"\"\n        Calculates the estimated reading time in hours for a person reading at an average speed of 250 words per minute.\n\n        :return: The estimated reading time in hours.\n        \"\"\"\n        average_words_per_page = 250\n        average_words_per_minute = 250\n        total_words = self.number_of_pages * average_words_per_page\n        reading_time_minutes = total_words / average_words_per_minute\n        reading_time_hours = reading_time_minutes / 60\n        return reading_time_hours\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `convert_to_snake_case` that transforms a given string from camel case to snake case. The function should accept a single string argument and return the transformed string. The input string will consist of alphanumeric characters only, starting with a lowercase letter, and may contain uppercase letters indicating the start of a new word. Your solution should handle edge cases such as strings with no uppercase letters or strings that are already in snake case.\n\n**Sample Input:**\n```\n\"userName\"\n\"convertToSnakeCase\"\n\"thisIsATestString\"\n\"already_snake_case\"\n\"noUppercase\"\n```\n\n**Sample Output:**\n```\n\"user_name\"\n\"convert_to_snake_case\"\n\"this_is_a_test_string\"\n\"already_snake_case\"\n\"nouppercase\"\n```",
    "output": "```python\nimport re\n\ndef convert_to_snake_case(string):\n    \"\"\"\n    Convert a camel case string to snake case.\n\n    Parameters:\n    string (str): The camel case string to be converted.\n\n    Returns:\n    str: The converted snake case string.\n    \"\"\"\n    snake_case_string = re.sub(r'(?<!^)(?=[A-Z])', '_', string).lower()\n    return snake_case_string\n\n# Example usage:\nprint(convert_to_snake_case(\"userName\"))  # Output: user_name\nprint(convert_to_snake_case(\"convertToSnakeCase\"))  # Output: convert_to_snake_case\nprint(convert_to_snake_case(\"thisIsATestString\"))  # Output: this_is_a_test_string\nprint(convert_to_snake_case(\"already_snake_case\"))  # Output: already_snake_case\nprint(convert_to_snake_case(\"noUppercase\"))  # Output: nouppercase\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Product` class in Python to manage product details in an inventory system. The class should support the following functionalities:\n\n- **Attributes:**\n  - `name`: A string representing the product's name.\n  - `price`: A float representing the product's price.\n  - `category`: A string representing the product's category.\n  - `stock_quantity`: An integer representing the quantity of the product available in stock.\n\n- **Methods:**\n  - `update_price(new_price)`: Updates the product's price to `new_price`.\n  - `update_stock(quantity)`: Updates the product's stock quantity to `quantity`.\n  - `is_in_stock()`: Returns `True` if the product is in stock (i.e., `stock_quantity` is greater than 0), otherwise returns `False`.\n\n**Sample Input/Output:**\n```python\nproduct = Product(\"Laptop\", 999.99, \"Electronics\", 10)\nproduct.update_price(899.99)\nproduct.update_stock(5)\nprint(product.is_in_stock())  # Output: True\nproduct.update_stock(0)\nprint(product.is_in_stock())  # Output: False\n```",
    "output": "```python\nclass Product:\n    def __init__(self, name, price, category, stock_quantity):\n        \"\"\"Initialize a new product with the given attributes.\"\"\"\n        self.name = name\n        self.price = price\n        self.category = category\n        self.stock_quantity = stock_quantity\n\n    def update_price(self, new_price):\n        \"\"\"Update the price of the product to new_price.\"\"\"\n        self.price = new_price\n\n    def update_stock(self, quantity):\n        \"\"\"Update the stock quantity of the product to quantity.\"\"\"\n        self.stock_quantity = quantity\n\n    def is_in_stock(self):\n        \"\"\"Return True if the product is in stock, otherwise False.\"\"\"\n        return self.stock_quantity > 0\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s` consisting of English words separated by spaces. Words are case-insensitive and may contain punctuation. Your task is to write a function that returns the number of unique words in the string. \n\n**Input:**\n- A single string `s` (1 \u2264 len(s) \u2264 10^5).\n\n**Output:**\n- An integer representing the number of unique words in the string.\n\n**Sample Input:**\n```\n\"The quick brown fox jumps over the lazy dog. The quick brown fox.\"\n```\n\n**Sample Output:**\n```\n8\n```",
    "output": "```python\ndef count_unique_words(input_string: str) -> int:\n    \"\"\"\n    Counts the number of unique words in a given string.\n    \n    Parameters:\n    input_string (str): The input string containing words separated by spaces.\n    \n    Returns:\n    int: The number of unique words in the string.\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    input_string = ''.join(char for char in input_string if char.isalnum() or char.isspace()).lower()\n    \n    # Split the string into words and use a set to find unique words\n    unique_words = set(input_string.split())\n    \n    # Return the number of unique words\n    return len(unique_words)\n\n# Example usage\nstring = \"The quick brown fox jumps over the lazy dog. The quick brown fox.\"\nprint(count_unique_words(string))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of tuples, where each tuple consists of a person's first name (a string), last name (a string), and age (an integer). Your task is to write a function that sorts this list of tuples in descending order based on age. If two individuals have the same age, they should be sorted by their last name in alphabetical order. \n\n**Input:**\n- A list of tuples, where each tuple is in the form `(first_name, last_name, age)`.\n\n**Output:**\n- A list of tuples sorted by the specified criteria.\n\n**Sample Input:**\n```python\n[(\"John\", \"Doe\", 30), (\"Jane\", \"Smith\", 25), (\"Emily\", \"Jones\", 30), (\"Michael\", \"Brown\", 28)]\n```\n\n**Sample Output:**\n```python\n[(\"Emily\", \"Jones\", 30), (\"John\", \"Doe\", 30), (\"Michael\", \"Brown\", 28), (\"Jane\", \"Smith\", 25)]\n```",
    "output": "```python\ndef sort_people_by_age(people):\n    \"\"\"\n    Sorts a list of tuples representing people by age in descending order.\n    If two people have the same age, they are sorted by last name in alphabetical order.\n\n    :param people: List of tuples, where each tuple is (first_name, last_name, age)\n    :return: Sorted list of tuples based on the specified criteria\n    \"\"\"\n    return sorted(people, key=lambda x: (-x[2], x[1]))\n\n# Example usage\npeople = [(\"John\", \"Doe\", 30), (\"Jane\", \"Smith\", 25), (\"Emily\", \"Jones\", 30), (\"Michael\", \"Brown\", 28)]\nsorted_people = sort_people_by_age(people)\nprint(sorted_people)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dictionary `student_scores` where each key is a student's name and each value is a list of integers representing the scores of that student. Your task is to implement a function `top_student(student_scores)` that identifies the student with the highest average score. If there are multiple students with the same highest average score, return the name of the student who appears first in the dictionary. If the dictionary is empty, return `None`.\n\n**Input:**\n- A dictionary `student_scores` where keys are strings (student names) and values are lists of integers (scores).\n\n**Output:**\n- A string representing the name of the student with the highest average score, or `None` if the dictionary is empty.\n\n**Sample Input:**\n```python\n{\"Alice\": [88, 92, 85], \"Bob\": [91, 89, 94], \"Charlie\": [78, 82, 80]}\n```\n\n**Sample Output:**\n```\n\"Bob\"\n```",
    "output": "```python\ndef top_student(student_scores):\n    \"\"\"\n    Finds the student with the highest average score from a dictionary of student scores.\n    \n    Parameters:\n    student_scores (dict): A dictionary where keys are student names and values are lists of scores.\n    \n    Returns:\n    str or None: The name of the student with the highest average score, or None if the dictionary is empty.\n    \"\"\"\n    if not student_scores:\n        return None\n    \n    top_student_name = None\n    highest_average = float('-inf')\n    \n    for student, scores in student_scores.items():\n        average_score = sum(scores) / len(scores)\n        if average_score > highest_average:\n            highest_average = average_score\n            top_student_name = student\n    \n    return top_student_name\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `count_words_in_file(file_path)` that reads a text file from the given `file_path` and returns the number of words in the file. The function should handle exceptions gracefully by returning an appropriate error message if the file does not exist or is unreadable. \n\n**Input:**\n- A string `file_path` representing the path to the text file.\n\n**Output:**\n- An integer representing the number of words in the file, or a string error message if an error occurs.\n\n**Sample Input:**\n- `\"/path/to/sample.txt\"` (where `sample.txt` contains \"Hello world this is a test\")\n\n**Sample Output:**\n- `6`\n\n**Sample Input:**\n- `\"/path/to/nonexistentfile.txt\"`\n\n**Sample Output:**\n- `\"Error: File does not exist.\"`\n\n**Sample Input:**\n- `\"/path/to/unreadablefile.txt\"` (where the file permissions do not allow reading)\n\n**Sample Output:**\n- `\"Error: File is unreadable.\"`",
    "output": "```python\ndef count_words_in_file(file_path):\n    \"\"\"\n    Counts the number of words in a given text file.\n\n    Parameters:\n    file_path (str): The path to the text file.\n\n    Returns:\n    int or str: The number of words in the file, or an error message if an error occurs.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            words = content.split()\n            return len(words)\n    except FileNotFoundError:\n        return \"Error: File does not exist.\"\n    except IOError:\n        return \"Error: File is unreadable.\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `text` containing various characters and email addresses. Your task is to write a Python function `extract_emails_from_text(text: str) -> List[str]` that extracts all unique email addresses from the string using regular expressions. The function should return a list of these unique email addresses.\n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 10^4) containing alphanumeric characters, spaces, punctuation, and email addresses.\n\n**Output:**\n- A list of unique email addresses found in the text.\n\n**Sample Input:**\n```\n\"John Doe <john.doe@example.com>, Jane Smith <jane.smith@example.com>, John Doe <john.doe@example.com>, Foo Bar <foo.bar@anotherdomain.com>\"\n```\n\n**Sample Output:**\n```\n['john.doe@example.com', 'jane.smith@example.com', 'foo.bar@anotherdomain.com']\n```",
    "output": "```python\nimport re\nfrom typing import List\n\ndef extract_emails_from_text(text: str) -> List[str]:\n    \"\"\"\n    Extracts all unique email addresses from the given text using regular expressions.\n\n    :param text: A string containing various characters and email addresses.\n    :return: A list of unique email addresses found in the text.\n    \"\"\"\n    # Regular expression pattern for matching email addresses\n    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(email_pattern, text)\n    \n    # Return a list of unique email addresses\n    return list(set(matches))\n\n# Test the function with the sample text\nsample_text = \"John Doe <john.doe@example.com>, Jane Smith <jane.smith@example.com>, John Doe <john.doe@example.com>, Foo Bar <foo.bar@anotherdomain.com>\"\nprint(extract_emails_from_text(sample_text))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to implement a function that returns the most frequently occurring word in the string. If there is a tie, return the word that first reaches the highest frequency. Assume that words are separated by spaces and consist of alphanumeric characters only. Punctuation should be ignored, and the comparison should be case-insensitive.\n\n**Sample Input:**\n```\n\"Hello world! Hello everyone. Welcome to the world of Python.\"\n```\n\n**Sample Output:**\n```\n\"hello\"\n```",
    "output": "```python\ndef most_frequent_word(s: str) -> str:\n    \"\"\"\n    Returns the most frequently occurring word in the string.\n    In case of a tie, returns the first word that reaches the highest frequency.\n    \n    :param s: Input string containing words separated by spaces.\n    :return: The most frequently occurring word.\n    \"\"\"\n    s = ''.join(c if c.isalnum() else ' ' for c in s).lower()\n    words = s.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    max_count = 0\n    most_frequent = None\n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            most_frequent = word\n    return most_frequent\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a nested dictionary representing a data structure. Your task is to implement a function `convert_to_json(data)` that converts this dictionary into a JSON string. The JSON string should be formatted with an indentation of 4 spaces.\n\n**Input:**\n- A nested dictionary `data` where keys are strings and values can be strings, integers, or other dictionaries.\n\n**Output:**\n- A string representing the JSON formatted version of the input dictionary with an indentation of 4 spaces.\n\n**Sample Input:**\n```python\n{\"name\": \"Alice\", \"age\": 25, \"address\": {\"city\": \"Los Angeles\", \"zipcode\": 90001}}\n```\n\n**Sample Output:**\n```json\n{\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"address\": {\n        \"city\": \"Los Angeles\",\n        \"zipcode\": 90001\n    }\n}\n```",
    "output": "```python\nimport json\n\ndef convert_to_json(data):\n    \"\"\"\n    Converts a nested dictionary into a JSON string with an indentation of 4 spaces.\n\n    Parameters:\n    data (dict): A nested dictionary to be converted.\n\n    Returns:\n    str: A JSON formatted string with an indentation of 4 spaces.\n    \"\"\"\n    return json.dumps(data, indent=4)\n\n# Example usage:\ndata = {\"name\": \"Alice\", \"age\": 25, \"address\": {\"city\": \"Los Angeles\", \"zipcode\": 90001}}\njson_string = convert_to_json(data)\nprint(json_string)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `json_to_dict` that converts a JSON string into a Python dictionary. The function should be capable of handling any valid JSON format, including nested objects and arrays. In the event of an invalid JSON string, the function should return `None` and print an error message indicating the issue.\n\n**Sample Input:**\n```json\n{\"name\": \"John\", \"age\": 30, \"children\": [{\"name\": \"Jane\", \"age\": 10}]}\n```\n\n**Sample Output:**\n```python\n{'name': 'John', 'age': 30, 'children': [{'name': 'Jane', 'age': 10}]}\n```\n\n**Sample Input:**\n```json\n{\"name\": \"John\", \"age\": 30, \"children\": [{\"name\": \"Jane\", \"age\": 10\n```\n\n**Sample Output:**\n```\nInvalid JSON string: Expecting '}' delimiter: line 1 column 47 (char 46)\n```\n```python\nNone\n```",
    "output": "```python\nimport json\n\ndef json_to_dict(json_string):\n    \"\"\"\n    Converts a JSON string to a Python dictionary.\n    \n    Parameters:\n    json_string (str): A string in JSON format.\n    \n    Returns:\n    dict or None: A dictionary representation of the JSON string, or None if the string is invalid.\n    \"\"\"\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError as e:\n        print(f\"Invalid JSON string: {e}\")\n        return None\n```",
    "_category": "string_pattern"
  },
  {
    "input": "Implement a Python class `Employee` with the following specifications:\n\n- The class should have an initializer that accepts four parameters: `name` (a string), `employee_id` (an integer), `position` (a string), and `salary` (a float).\n- Implement a method `give_raise` that takes an `amount` (a float) and increases the `salary` by this amount.\n- Implement a method `promote` that takes a `new_position` (a string) and updates the `position` of the employee.\n- Implement a method `display_info` that prints the employee's details in the following format:\n  ```\n  Employee Name: <name>\n  Employee ID: <employee_id>\n  Position: <position>\n  Salary: $<salary>\n  ```\n  where `<salary>` is formatted to two decimal places.\n\n**Sample Input:**\n```python\nemp = Employee(\"John Doe\", 12345, \"Software Engineer\", 75000)\nemp.give_raise(5000)\nemp.promote(\"Senior Software Engineer\")\nemp.display_info()\n```\n\n**Sample Output:**\n```\nEmployee Name: John Doe\nEmployee ID: 12345\nPosition: Senior Software Engineer\nSalary: $80000.00\n```",
    "output": "```python\nclass Employee:\n    def __init__(self, name, employee_id, position, salary):\n        \"\"\"\n        Initializes an Employee object with the given name, employee_id, position, and salary.\n        \n        :param name: str - The name of the employee.\n        :param employee_id: int - The unique identifier for the employee.\n        :param position: str - The current position of the employee.\n        :param salary: float - The current salary of the employee.\n        \"\"\"\n        self.name = name\n        self.employee_id = employee_id\n        self.position = position\n        self.salary = salary\n\n    def give_raise(self, amount):\n        \"\"\"\n        Increases the employee's salary by the specified amount.\n        \n        :param amount: float - The amount to increase the salary by.\n        \"\"\"\n        self.salary += amount\n\n    def promote(self, new_position):\n        \"\"\"\n        Updates the employee's position to the new position specified.\n        \n        :param new_position: str - The new position of the employee.\n        \"\"\"\n        self.position = new_position\n\n    def display_info(self):\n        \"\"\"\n        Prints the employee's details in a formatted manner.\n        \"\"\"\n        print(f\"Employee Name: {self.name}\")\n        print(f\"Employee ID: {self.employee_id}\")\n        print(f\"Position: {self.position}\")\n        print(f\"Salary: ${self.salary:.2f}\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "Implement a Python class `Car` with the following specifications:\n- Attributes: `make`, `model`, `year`, and `mileage`.\n- Methods:\n  - `update_mileage(new_mileage)`: Updates the mileage if `new_mileage` is greater than or equal to the current mileage. Otherwise, prints \"Mileage cannot be rolled back.\"\n  - `display_details()`: Returns a string in the format \"{year} {make} {model} with {mileage} miles.\"\n\nAdditionally, create a subclass `ElectricCar` that inherits from `Car` and includes:\n- An additional attribute `battery_size`.\n- A method `display_battery_info()` that returns a string in the format \"This car has a {battery_size}-kWh battery.\"\n\n**Sample Input:**\n```\ncar = Car(\"Toyota\", \"Corolla\", 2020, 15000)\ncar.display_details()\ncar.update_mileage(20000)\ncar.display_details()\n\nelectric_car = ElectricCar(\"Tesla\", \"Model S\", 2021, 5000, 75)\nelectric_car.display_details()\nelectric_car.display_battery_info()\n```\n\n**Sample Output:**\n```\n2020 Toyota Corolla with 15000 miles.\n2020 Toyota Corolla with 20000 miles.\n2021 Tesla Model S with 5000 miles.\nThis car has a 75-kWh battery.\n```",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year, mileage):\n        \"\"\"\n        Initializes a new Car instance.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param mileage: The current mileage of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n\n    def update_mileage(self, new_mileage):\n        \"\"\"\n        Updates the mileage of the car if the new mileage is greater than or equal to the current mileage.\n\n        :param new_mileage: The new mileage to be set.\n        \"\"\"\n        if new_mileage >= self.mileage:\n            self.mileage = new_mileage\n        else:\n            print(\"Mileage cannot be rolled back.\")\n\n    def display_details(self):\n        \"\"\"\n        Returns a string containing the car's details.\n\n        :return: A string in the format \"{year} {make} {model} with {mileage} miles.\"\n        \"\"\"\n        return f\"{self.year} {self.make} {self.model} with {self.mileage} miles.\"\n\nclass ElectricCar(Car):\n    def __init__(self, make, model, year, mileage, battery_size):\n        \"\"\"\n        Initializes a new ElectricCar instance.\n\n        :param make: The make of the electric car.\n        :param model: The model of the electric car.\n        :param year: The year the electric car was manufactured.\n        :param mileage: The current mileage of the electric car.\n        :param battery_size: The size of the battery in kWh.\n        \"\"\"\n        super().__init__(make, model, year, mileage)\n        self.battery_size = battery_size\n\n    def display_battery_info(self):\n        \"\"\"\n        Returns a string containing the battery information of the electric car.\n\n        :return: A string in the format \"This car has a {battery_size}-kWh battery.\"\n        \"\"\"\n        return f\"This car has a {self.battery_size}-kWh battery.\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with processing server logs for an analysis project. Each log entry is a string formatted as follows: \"IP_ADDRESS - USER_ID [TIMESTAMP] \\\"HTTP_METHOD URL HTTP_VERSION\\\" STATUS_CODE RESPONSE_SIZE\". Your goal is to implement a function `parse_log_entry` that parses a log entry and returns a dictionary containing the extracted fields: IP address, user ID, timestamp, HTTP method, URL, HTTP version, status code, and response size.\n\n**Input:**\n- A single string representing a log entry.\n\n**Output:**\n- A dictionary with keys: 'ip_address', 'user_id', 'timestamp', 'http_method', 'url', 'http_version', 'status_code', 'response_size'.\n\n**Sample Input:**\n```\n'123.45.67.89 - user1 [2023-01-01T12:34:56] \"GET /index.html HTTP/1.1\" 200 2326'\n```\n\n**Sample Output:**\n```\n{\n    'ip_address': '123.45.67.89',\n    'user_id': 'user1',\n    'timestamp': '2023-01-01T12:34:56',\n    'http_method': 'GET',\n    'url': '/index.html',\n    'http_version': 'HTTP/1.1',\n    'status_code': '200',\n    'response_size': '2326'\n}\n```",
    "output": "```python\nimport re\n\ndef parse_log_entry(log_entry):\n    \"\"\"\n    Parses a log entry string and returns a dictionary with extracted fields.\n\n    Parameters:\n    log_entry (str): A string representing a log entry.\n\n    Returns:\n    dict: A dictionary containing the extracted fields from the log entry.\n    \"\"\"\n    pattern = r'(?P<ip_address>\\d+\\.\\d+\\.\\d+\\.\\d+) - (?P<user_id>\\S+) \\[(?P<timestamp>[^\\]]+)\\] \"(?P<http_method>\\S+) (?P<url>[^\\s]+) (?P<http_version>HTTP/\\S+)\" (?P<status_code>\\d+) (?P<response_size>\\d+)'\n    match = re.match(pattern, log_entry)\n    return match.groupdict() if match else None\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `text`. Your task is to write a Python function that generates a bar chart displaying the frequency of each letter in the text, ignoring case and punctuation. Use the `matplotlib` library to create the bar chart. The function should not return anything but should display the bar chart.\n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 1000).\n\n**Output:**\n- A bar chart with letters on the x-axis and their frequencies on the y-axis.\n\n**Sample Input:**\n```\n\"This is a sample text to demonstrate the creation of a bar chart showing letter frequency.\"\n```\n\n**Sample Output:**\n- A bar chart displaying the frequency of each letter from 'a' to 'z' in the given text.",
    "output": "```python\nimport matplotlib.pyplot as plt\nimport string\nfrom collections import Counter\n\ndef plot_letter_frequency(text):\n    \"\"\"\n    Generates a bar chart displaying the frequency of each letter in the given text,\n    ignoring case and punctuation.\n\n    Parameters:\n    text (str): The input text from which to count letter frequencies.\n    \"\"\"\n    # Convert text to lower case\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Count occurrences of each letter\n    letter_counts = Counter([char for char in text if char.isalpha()])\n    \n    # Prepare data for plotting\n    letters = sorted(letter_counts.keys())\n    counts = [letter_counts[letter] for letter in letters]\n    \n    # Create bar chart\n    plt.figure(figsize=(10, 6))\n    plt.bar(letters, counts, color='skyblue')\n    plt.title('Letter Frequency in Text')\n    plt.xlabel('Letters')\n    plt.ylabel('Frequency')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()\n\n# Given text\ntext = \"This is a sample text to demonstrate the creation of a bar chart showing letter frequency.\"\nplot_letter_frequency(text)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with developing a sentiment analysis tool using the TextBlob library. Your program should accept a string input and output a sentiment score ranging from -1 to 1. The score should be interpreted as follows: -1 indicates a strong negative sentiment, 0 indicates a neutral sentiment, and 1 indicates a strong positive sentiment.\n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 1000) representing the text to be analyzed.\n\n**Output:**\n- A single floating-point number representing the sentiment score of the text.\n\n**Sample Input:**\n```\nGreat service and amazing food! I will definitely come back again.\n```\n\n**Sample Output:**\n```\n0.85\n```",
    "output": "```python\nfrom textblob import TextBlob\n\ndef analyze_sentiment(text):\n    \"\"\"\n    Analyzes the sentiment of a given text using TextBlob and returns a sentiment score.\n    \n    Parameters:\n    text (str): The text to analyze.\n    \n    Returns:\n    float: Sentiment score ranging from -1 (strong negative) to 1 (strong positive).\n    \"\"\"\n    blob = TextBlob(text)\n    sentiment_score = blob.sentiment.polarity\n    return sentiment_score\n\n# Example usage\ntext = \"Great service and amazing food! I will definitely come back again.\"\nsentiment_score = analyze_sentiment(text)\nprint(f\"The sentiment score of the given text is: {sentiment_score}\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with developing a sentiment analysis model to classify customer reviews for a restaurant into three categories: \"positive\", \"negative\", or \"neutral\". Implement a program using the `scikit-learn` library and the Naive Bayes classifier. Your program should be able to handle a dataset of reviews and output the classification accuracy and a detailed classification report. Additionally, provide a function to classify new reviews.\n\n**Input:**\n- A list of customer reviews (strings).\n- Corresponding labels for the reviews (strings): \"positive\", \"negative\", or \"neutral\".\n\n**Output:**\n- Classification report and accuracy score for the test set.\n- Predicted sentiments for new reviews.\n\n**Sample Input:**\n```python\nreviews = [\n    \"The food was amazing and the service was excellent!\",\n    \"The soup was cold and the service was rude.\",\n    \"Overall, a good experience, not the best though.\",\n    \"Terrible experience! Never returning.\",\n    \"Worst experience of my life.\",\n    \"It was okay, not-too-hot-not-too-cold.\",\n    \"A great place to visit, everyone should go.\",\n    \"The food was okay, but the service could be better.\",\n    \"Highly recommend, superb food!\",\n]\n\nlabels = [\"positive\", \"negative\", \"neutral\", \"negative\", \"negative\", \"neutral\", \"positive\", \"neutral\", \"positive\"]\n\nnew_reviews = [\n    \"The food was fantastic and the staff was friendly.\",\n    \"Absolutely awful service, will not come back.\",\n    \"Decent food, could have been better.\",\n]\n```\n\n**Sample Output:**\n```\nClassification Report: \n              precision    recall  f1-score   support\n\n    negative       1.00      1.00      1.00         2\n     neutral       1.00      1.00      1.00         2\n    positive       1.00      1.00      1.00         2\n\n    accuracy                           1.00         6\n   macro avg       1.00      1.00      1.00         6\nweighted avg       1.00      1.00      1.00         6\n\nAccuracy:  1.0\nPredicted Sentiments for new reviews: ['positive' 'negative' 'neutral']\n```",
    "output": "```python\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, accuracy_score\n\ndef train_and_evaluate_model(reviews, labels):\n    \"\"\"\n    Trains a Naive Bayes classifier on the provided reviews and labels,\n    evaluates the model, and prints the classification report and accuracy.\n    \n    Parameters:\n    - reviews: List of strings, customer reviews.\n    - labels: List of strings, corresponding sentiment labels.\n    \"\"\"\n    X_train, X_test, y_train, y_test = train_test_split(reviews, labels, test_size=0.2, random_state=42)\n    vectorizer = CountVectorizer()\n    X_train_vectorized = vectorizer.fit_transform(X_train)\n    X_test_vectorized = vectorizer.transform(X_test)\n    \n    naive_bayes_classifier = MultinomialNB()\n    naive_bayes_classifier.fit(X_train_vectorized, y_train)\n    \n    predicted_labels = naive_bayes_classifier.predict(X_test_vectorized)\n    print(\"Classification Report: \", classification_report(y_test, predicted_labels, zero_division=1))\n    print(\"Accuracy: \", accuracy_score(y_test, predicted_labels))\n    \n    return vectorizer, naive_bayes_classifier\n\ndef classify_new_reviews(vectorizer, classifier, new_reviews):\n    \"\"\"\n    Classifies new reviews using a pre-trained Naive Bayes classifier.\n    \n    Parameters:\n    - vectorizer: CountVectorizer object, used to transform new reviews.\n    - classifier: MultinomialNB object, pre-trained Naive Bayes classifier.\n    - new_reviews: List of strings, new customer reviews to classify.\n    \n    Returns:\n    - List of strings, predicted sentiment labels for the new reviews.\n    \"\"\"\n    new_reviews_vectorized = vectorizer.transform(new_reviews)\n    predictions = classifier.predict(new_reviews_vectorized)\n    return predictions\n\n# Sample dataset\nreviews = [\n    \"The food was amazing and the service was excellent!\",\n    \"The soup was cold and the service was rude.\",\n    \"Overall, a good experience, not the best though.\",\n    \"Terrible experience! Never returning.\",\n    \"Worst experience of my life.\",\n    \"It was okay, not-too-hot-not-too-cold.\",\n    \"A great place to visit, everyone should go.\",\n    \"The food was okay, but the service could be better.\",\n    \"Highly recommend, superb food!\",\n]\n\nlabels = [\"positive\", \"negative\", \"neutral\", \"negative\", \"negative\", \"neutral\", \"positive\", \"neutral\", \"positive\"]\n\n# Train and evaluate the model\nvectorizer, classifier = train_and_evaluate_model(reviews, labels)\n\n# New reviews to classify\nnew_reviews = [\n    \"The food was fantastic and the staff was friendly.\",\n    \"Absolutely awful service, will not come back.\",\n    \"Decent food, could have been better.\",\n]\n\n# Classify new reviews\npredicted_sentiments = classify_new_reviews(vectorizer, classifier, new_reviews)\nprint(\"Predicted Sentiments for new reviews:\", predicted_sentiments)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a Python class named `Employee` to manage employee records in a company's database. The `Employee` class should encapsulate the following attributes:\n- `name`: a string representing the employee's name.\n- `employee_id`: an integer representing the employee's unique identifier.\n- `department`: a string representing the department where the employee works.\n\nYour class must include the following methods:\n- `__init__(self, name, employee_id, department)`: A constructor that initializes the attributes with the provided values.\n- `display_info(self)`: A method that outputs the employee's information in the format: \"Employee ID: {employee_id}, Name: {name}, Department: {department}\".\n\n**Sample Input/Output:**\n- Input: `Employee(\"John Doe\", 12345, \"Sales\")`\n- Output: `Employee ID: 12345, Name: John Doe, Department: Sales`",
    "output": "```python\nclass Employee:\n    def __init__(self, name, employee_id, department):\n        \"\"\"\n        Initializes an Employee object with the given name, employee_id, and department.\n\n        :param name: str, the name of the employee\n        :param employee_id: int, the unique identifier of the employee\n        :param department: str, the department where the employee works\n        \"\"\"\n        self.name = name\n        self.employee_id = employee_id\n        self.department = department\n\n    def display_info(self):\n        \"\"\"\n        Prints the employee's information in the format:\n        \"Employee ID: {employee_id}, Name: {name}, Department: {department}\"\n        \"\"\"\n        print(f\"Employee ID: {self.employee_id}, Name: {self.name}, Department: {self.department}\")\n\n# Example usage:\n# emp = Employee(\"John Doe\", 12345, \"Sales\")\n# emp.display_info()\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Car` class in Python. The class should have the following attributes and methods:\n\n- **Attributes:**\n  - `make`: A string representing the car's make.\n  - `model`: A string representing the car's model.\n  - `year`: An integer representing the car's year.\n\n- **Methods:**\n  - `__init__(self, make, model, year)`: A constructor that initializes the attributes with the given values.\n  - `display_info(self)`: A method that prints the car's information in the format: \"Make: {make}, Model: {model}, Year: {year}\".\n  - `update_year(self, new_year)`: A method that updates the car's year attribute with the provided `new_year`.\n\n**Sample Input/Output:**\n- Input: `car = Car(\"Toyota\", \"Corolla\", 2020); car.display_info(); car.update_year(2023); car.display_info()`\n- Output:\n  ```\n  Make: Toyota, Model: Corolla, Year: 2020\n  Make: Toyota, Model: Corolla, Year: 2023\n  ```",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        \"\"\"\n        Initializes a new Car instance with the given make, model, and year.\n\n        :param make: A string representing the car's make.\n        :param model: A string representing the car's model.\n        :param year: An integer representing the car's year.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def display_info(self):\n        \"\"\"\n        Prints the car's information in the format: \"Make: {make}, Model: {model}, Year: {year}\".\n        \"\"\"\n        print(f\"Make: {self.make}, Model: {self.model}, Year: {self.year}\")\n\n    def update_year(self, new_year):\n        \"\"\"\n        Updates the car's year attribute with the provided new_year.\n\n        :param new_year: An integer representing the new year for the car.\n        \"\"\"\n        self.year = new_year\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `convert_to_json(data)` that transforms a given Python dictionary `data` into a JSON-formatted string. The resulting JSON string must adhere to the following specifications:\n- It should be indented with 4 spaces.\n- The keys in the JSON string must be sorted in ascending order.\n- The JSON string must end with a newline character.\n\n**Input:**\n- A Python dictionary `data` where keys are strings and values can be any JSON-serializable data types.\n\n**Output:**\n- A string representing the JSON-formatted version of the input dictionary, following the specified formatting rules.\n\n**Sample Input:**\n```python\n{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n```\n\n**Sample Output:**\n```\n{\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"name\": \"Alice\"\n}\n```",
    "output": "```python\nimport json\n\ndef convert_to_json(data):\n    \"\"\"\n    Converts a Python dictionary to a JSON-formatted string with sorted keys,\n    4-space indentation, and a trailing newline character.\n\n    :param data: A dictionary with string keys and JSON-serializable values.\n    :return: A JSON-formatted string.\n    \"\"\"\n    return json.dumps(data, indent=4, sort_keys=True) + \"\\n\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `sentence` consisting of a sequence of space-separated words. Your task is to implement a function `count_unique_words(sentence)` that returns the number of unique words in the sentence. The function should be case-insensitive and should ignore punctuation.\n\n**Input:**\n- A single string `sentence` (1 \u2264 len(sentence) \u2264 1000) containing words separated by spaces. Words may include punctuation.\n\n**Output:**\n- An integer representing the number of unique words in the sentence.\n\n**Sample Input:**\n```\n\"The quick brown fox jumps over the lazy dog. The dog barks.\"\n```\n\n**Sample Output:**\n```\n8\n```",
    "output": "```python\nimport string\n\ndef count_unique_words(sentence):\n    \"\"\"\n    Counts the number of unique words in a given sentence, ignoring case and punctuation.\n\n    :param sentence: A string containing a sequence of space-separated words.\n    :return: An integer representing the number of unique words.\n    \"\"\"\n    sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n    sentence = sentence.lower()\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)\n\n# Example usage\nsentence = \"The quick brown fox jumps over the lazy dog. The dog barks.\"\nprint(count_unique_words(sentence))  # Output: 8\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Book` class in Python. The class should have the following attributes: `title`, `author`, `isbn`, and `publication_year`. Implement the `__str__` method to return a string representation of the book in the format: \"Title: {title}, Author: {author}, ISBN: {isbn}, Year: {year}\". Additionally, implement a method `is_outdated` that returns `True` if the publication year is before 2000, and `False` otherwise.\n\n**Sample Input:**\n```python\nbook = Book(\"Pride and Prejudice\", \"Jane Austen\", \"9780141439518\", 1813)\n```\n\n**Sample Output:**\n```\nTitle: Pride and Prejudice, Author: Jane Austen, ISBN: 9780141439518, Year: 1813\nTrue\n```",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn, publication_year):\n        \"\"\"\n        Initializes a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN of the book.\n        :param publication_year: The publication year of the book.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.publication_year = publication_year\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the book.\n\n        :return: A string in the format \"Title: {title}, Author: {author}, ISBN: {isbn}, Year: {year}\".\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}, Year: {self.publication_year}\"\n\n    def is_outdated(self):\n        \"\"\"\n        Checks if the book is outdated (published before the year 2000).\n\n        :return: True if the publication year is before 2000, False otherwise.\n        \"\"\"\n        return self.publication_year < 2000\n\n# Example usage:\nbook = Book(\"Pride and Prejudice\", \"Jane Austen\", \"9780141439518\", 1813)\nprint(book)  # Output: Title: Pride and Prejudice, Author: Jane Austen, ISBN: 9780141439518, Year: 1813\nprint(book.is_outdated())  # Output: True\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of sentences. Your task is to compute the average sentence length in words, ignoring punctuation. Sentences are separated by a period followed by a space. The punctuation marks to be ignored are: '.', ',', '!', '?', ':', ';', '-', '(', ')'. \n\n**Input:**\n- A list of strings, where each string is a sentence.\n\n**Output:**\n- A float representing the average sentence length in words.\n\n**Sample Input:**\n```python\n[\"Hello world!\", \"This is a test sentence.\", \"Let's calculate the average length.\"]\n```\n\n**Sample Output:**\n```\n4.0\n```",
    "output": "```python\nimport string\n\ndef average_sentence_length(sentences):\n    \"\"\"\n    Calculate the average sentence length in words, ignoring punctuation.\n\n    :param sentences: List of sentences (strings).\n    :return: Average sentence length as a float.\n    \"\"\"\n    total_words = 0\n    for sentence in sentences:\n        translator = str.maketrans('', '', string.punctuation)\n        cleaned_sentence = sentence.translate(translator)\n        words = cleaned_sentence.split()\n        total_words += len(words)\n    average_length = total_words / len(sentences)\n    return average_length\n\n# Test the function\nsentences = [\"Hello world!\", \"This is a test sentence.\", \"Let's calculate the average length.\"]\nprint(average_sentence_length(sentences))  # Output: 4.0\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Book` class that models a book with attributes for its title, author, and year of publication. Your class should include an initializer method to set these attributes and a `describe` method that returns a formatted string detailing the book's information.\n\n**Input:**\n- The `Book` class will be instantiated with three parameters: `title` (a string), `author` (a string), and `year_published` (an integer).\n\n**Output:**\n- The `describe` method should return a string in the format: `\"Title: {title}, Author: {author}, Year Published: {year_published}\"`.\n\n**Sample Input/Output:**\n- Input: `Book(\"1984\", \"George Orwell\", 1949)`\n- Output: `\"Title: 1984, Author: George Orwell, Year Published: 1949\"`",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, year_published):\n        \"\"\"\n        Initializes a new Book instance with the given title, author, and year of publication.\n\n        :param title: The title of the book (str).\n        :param author: The author of the book (str).\n        :param year_published: The year the book was published (int).\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def describe(self):\n        \"\"\"\n        Returns a formatted string describing the book.\n\n        :return: A string in the format \"Title: {title}, Author: {author}, Year Published: {year_published}\".\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, Year Published: {self.year_published}\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with designing a RESTful API endpoint using Flask that retrieves and returns a list of users from a database. The database contains a table named `users` with the following schema:\n\n- `id`: An integer representing the unique identifier for each user.\n- `name`: A string representing the user's name, with a maximum length of 100 characters.\n- `email`: A string representing the user's email, with a maximum length of 100 characters, and must be unique.\n\nYour API should expose a GET endpoint at `/api/users` that returns a JSON array of user objects. Each user object should contain the `id`, `name`, and `email` fields.\n\n**Sample Input:**\nAssume the `users` table contains the following data:\n```\nid | name     | email\n---|----------|-------------------\n1  | Alice    | alice@example.com\n2  | Bob      | bob@example.com\n```\n\n**Sample Output:**\n```json\n[\n    {\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"},\n    {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"}\n]\n```",
    "output": "```python\nfrom flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///yourdatabase.db'  # Replace with your actual database URI\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    \"\"\"\n    Represents a user in the database.\n    \"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n\n    def to_dict(self):\n        \"\"\"\n        Converts the User object to a dictionary.\n        \n        :return: A dictionary representation of the User object.\n        \"\"\"\n        return {\"id\": self.id, \"name\": self.name, \"email\": self.email}\n\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    \"\"\"\n    Retrieves all users from the database and returns them as a JSON array.\n    \n    :return: A JSON array of user objects.\n    \"\"\"\n    users = User.query.all()\n    return jsonify([user.to_dict() for user in users])\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a JSON string `json_data` and a dictionary `expected_structure`. Your task is to implement a function `validate_json_structure` that checks if the JSON data conforms to the specified structure in terms of keys and data types. The structure can include nested dictionaries and lists. Return `True` if the structure matches, otherwise return `False`.\n\n**Input:**\n- `json_data`: A string representing JSON data.\n- `expected_structure`: A dictionary representing the expected structure of the JSON data.\n\n**Output:**\n- A boolean value indicating whether the JSON data matches the expected structure.\n\n**Sample Input:**\n```python\njson_data = '{\"name\": \"John\", \"age\": 30, \"children\": [{\"name\": \"Jane\", \"age\": 10}]}'\nexpected_structure = {\"name\": \"\", \"age\": 0, \"children\": [{\"name\": \"\", \"age\": 0}]}\n```\n\n**Sample Output:**\n```python\nTrue\n```",
    "output": "```python\nimport json\n\ndef validate_json_structure(json_data, expected_structure):\n    \"\"\"\n    Validates if the given JSON data matches the expected structure.\n\n    :param json_data: A string representing JSON data.\n    :param expected_structure: A dictionary representing the expected structure.\n    :return: True if the JSON data matches the expected structure, False otherwise.\n    \"\"\"\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return False\n\n    def compare_structure(data_item, expected_item):\n        if isinstance(expected_item, dict):\n            if not isinstance(data_item, dict) or set(data_item.keys()) != set(expected_item.keys()):\n                return False\n            return all(compare_structure(data_item[key], expected_item[key]) for key in data_item)\n        elif isinstance(expected_item, list):\n            if not isinstance(data_item, list) or len(data_item) != len(expected_item):\n                return False\n            return all(compare_structure(item, expected_item[0]) for item in data_item)\n        else:\n            return isinstance(data_item, type(expected_item))\n    \n    return compare_structure(data, expected_structure)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Book` class for a library management system. The class should encapsulate the properties of a book and provide methods to manage its checkout status. The `Book` class should have the following attributes:\n\n- `title`: A string representing the title of the book.\n- `author`: A string representing the author of the book.\n- `isbn`: A string representing the ISBN number of the book.\n- `is_checked_out`: A boolean indicating whether the book is currently checked out.\n\nThe class should also provide the following methods:\n\n- `check_out_book`: A method that sets `is_checked_out` to `True` if the book is not already checked out, and prints a message indicating that the book has been checked out. If the book is already checked out, it should print a message indicating that the book is already checked out.\n- `return_book`: A method that sets `is_checked_out` to `False` if the book is currently checked out, and prints a message indicating that the book has been returned. If the book is not checked out, it should print a message indicating that the book was not checked out.\n\n**Sample Input/Output:**\n\nFor the following sequence of operations:\n```\nbook = Book(\"1984\", \"George Orwell\", \"1234567890\")\nbook.check_out_book()\nbook.check_out_book()\nbook.return_book()\nbook.return_book()\n```\n\nThe expected output is:\n```\nThe book '1984' by George Orwell has been checked out.\nThe book '1984' by George Orwell is already checked out.\nThe book '1984' by George Orwell has been returned.\nThe book '1984' by George Orwell was not checked out.\n```",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn):\n        \"\"\"\n        Initializes a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN number of the book.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.is_checked_out = False\n\n    def check_out_book(self):\n        \"\"\"\n        Checks out the book if it is not already checked out.\n        Prints a message indicating the action taken.\n        \"\"\"\n        if not self.is_checked_out:\n            self.is_checked_out = True\n            print(f\"The book '{self.title}' by {self.author} has been checked out.\")\n        else:\n            print(f\"The book '{self.title}' by {self.author} is already checked out.\")\n\n    def return_book(self):\n        \"\"\"\n        Returns the book if it is currently checked out.\n        Prints a message indicating the action taken.\n        \"\"\"\n        if self.is_checked_out:\n            self.is_checked_out = False\n            print(f\"The book '{self.title}' by {self.author} has been returned.\")\n        else:\n            print(f\"The book '{self.title}' by {self.author} was not checked out.\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a nested list containing integers, strings, and other nested lists. Your task is to write a recursive function `flatten_list` that takes this nested list as input and returns a single flattened list with all the elements in the same order as they appear in the original nested list.\n\n**Input:**\n- A nested list of integers, strings, and other nested lists.\n\n**Output:**\n- A flattened list containing all the elements in the same order.\n\n**Sample Input:**\n```\n[1, [2, 3], [4, [5, 6]], 7]\n```\n\n**Sample Output:**\n```\n[1, 2, 3, 4, 5, 6, 7]\n```",
    "output": "```python\ndef flatten_list(nested_list):\n    \"\"\"\n    Recursively flattens a nested list of elements.\n\n    Parameters:\n    nested_list (list): A list that may contain integers, strings, and other nested lists.\n\n    Returns:\n    list: A flattened list containing all the elements in the same order.\n    \"\"\"\n    flattened = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened\n\n# Example usage:\ninput_list = [1, [2, 3], [4, [5, 6]], 7]\noutput_list = flatten_list(input_list)\nprint(output_list)  # Output: [1, 2, 3, 4, 5, 6, 7]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a simple to-do list manager in Python. The program should support the following operations:\n- Add a task to the list.\n- Remove a task from the list.\n- View all tasks currently in the list.\n\nThe program should run indefinitely until the user decides to exit by choosing the appropriate option. Each task is represented as a string. The user interface should be text-based and provide clear instructions for each operation.\n\n**Input:**\n- The input will be provided interactively through the console.\n- The user will enter a choice (1-4) to perform an operation.\n- For adding or removing a task, the user will provide the task string.\n\n**Output:**\n- The program should display appropriate messages after each operation.\n- When viewing tasks, the program should list all tasks with their respective indices.\n\n**Sample Interaction:**\n```\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 1\nEnter the task to add: Buy groceries\nTask added: Buy groceries\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 1\nEnter the task to add: Walk the dog\nTask added: Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 3\nTasks:\n1. Buy groceries\n2. Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 2\nEnter the task to remove: Buy groceries\nTask removed: Buy groceries\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 3\nTasks:\n1. Walk the dog\n\nTo-Do List Manager\n1. Add a task\n2. Remove a task\n3. View all tasks\n4. Exit\nEnter your choice (1-4): 4\nExiting...\n```",
    "output": "```python\ndef to_do_list_manager():\n    \"\"\"\n    Manages a simple to-do list with functionalities to add, remove, and view tasks.\n    \"\"\"\n    tasks = []\n\n    def add_task():\n        \"\"\"\n        Adds a new task to the to-do list.\n        \"\"\"\n        task = input(\"Enter the task to add: \")\n        tasks.append(task)\n        print(f\"Task added: {task}\")\n\n    def remove_task():\n        \"\"\"\n        Removes a task from the to-do list if it exists.\n        \"\"\"\n        task = input(\"Enter the task to remove: \")\n        if task in tasks:\n            tasks.remove(task)\n            print(f\"Task removed: {task}\")\n        else:\n            print(\"Task not found.\")\n\n    def view_tasks():\n        \"\"\"\n        Displays all tasks in the to-do list.\n        \"\"\"\n        if tasks:\n            print(\"Tasks:\")\n            for i, task in enumerate(tasks, 1):\n                print(f\"{i}. {task}\")\n        else:\n            print(\"No tasks in the list.\")\n\n    while True:\n        print(\"\\nTo-Do List Manager\")\n        print(\"1. Add a task\")\n        print(\"2. Remove a task\")\n        print(\"3. View all tasks\")\n        print(\"4. Exit\")\n\n        choice = input(\"Enter your choice (1-4): \")\n\n        if choice == '1':\n            add_task()\n        elif choice == '2':\n            remove_task()\n        elif choice == '3':\n            view_tasks()\n        elif choice == '4':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid choice! Please choose between 1 and 4.\")\n\nif __name__ == \"__main__\":\n    to_do_list_manager()\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of strings. Your task is to implement a function `find_longest_palindrome(strings: List[str]) -> str` that identifies and returns the longest palindromic substring from the provided list. If there are multiple palindromes with the same maximum length, return the first one encountered. \n\n**Input:**\n- A list of strings, where each string consists of lowercase English letters.\n- The length of the list is at most 100.\n- Each string has a length of at most 100.\n\n**Output:**\n- A single string representing the longest palindromic substring found in the list.\n\n**Sample Input:**\n```python\n[\"racecar\", \"banana\", \"civic\"]\n```\n\n**Sample Output:**\n```python\n\"racecar\"\n```",
    "output": "```python\nfrom typing import List\n\ndef find_longest_palindrome(strings: List[str]) -> str:\n    \"\"\"\n    Finds and returns the longest palindromic substring from the given list of strings.\n    If there are multiple palindromes of the same maximum length, returns the first one encountered.\n    \n    :param strings: List of strings to search for palindromes.\n    :return: The longest palindromic substring.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a given string is a palindrome.\"\"\"\n        return s == s[::-1]\n    \n    longest_palindrome = \"\"\n    \n    for string in strings:\n        if is_palindrome(string) and len(string) > len(longest_palindrome):\n            longest_palindrome = string\n            \n    return longest_palindrome\n\n# Example usage:\nstrings = [\"racecar\", \"banana\", \"civic\"]\nprint(find_longest_palindrome(strings))  # Output: \"racecar\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a credit card number as a string. Your task is to implement a function `is_valid_credit_card(number: str) -> bool` that determines if the number is valid according to the Luhn algorithm. The function should return `True` if the number is valid, and `False` otherwise.\n\n**Input:**\n- A string `number` representing the credit card number.\n\n**Output:**\n- A boolean value indicating whether the credit card number is valid.\n\n**Sample Input:**\n```\n\"4532015112830366\"\n```\n\n**Sample Output:**\n```\nTrue\n```",
    "output": "```python\ndef is_valid_credit_card(number: str) -> bool:\n    \"\"\"\n    Validates a credit card number using the Luhn algorithm.\n    \n    Args:\n    number (str): The credit card number as a string.\n    \n    Returns:\n    bool: True if the credit card number is valid, False otherwise.\n    \"\"\"\n    def luhn_digit(digit):\n        digit = int(digit)\n        doubled = digit * 2\n        return doubled - 9 if doubled > 9 else doubled\n\n    total = 0\n    num_digits = len(number)\n    parity = num_digits % 2\n\n    for i, digit in enumerate(number):\n        if i % 2 == parity:\n            total += luhn_digit(digit)\n        else:\n            total += int(digit)\n\n    return total % 10 == 0\n\n# Example usage:\nprint(is_valid_credit_card(\"4532015112830366\"))  # Should return True\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dictionary `d` where keys are strings and values are integers. Your task is to implement a function that sorts the dictionary by its values in descending order and returns a list of tuples containing the key-value pairs. \n\n**Input:**\n- A dictionary `d` with string keys and integer values.\n\n**Output:**\n- A list of tuples, where each tuple contains a key-value pair from the dictionary, sorted by the values in descending order.\n\n**Sample Input:**\n```python\n{\"apple\": 3, \"banana\": 1, \"cherry\": 2}\n```\n\n**Sample Output:**\n```python\n[('apple', 3), ('cherry', 2), ('banana', 1)]\n```",
    "output": "```python\ndef sort_dict_by_values_descending(d):\n    \"\"\"\n    Sorts a dictionary by its values in descending order and returns a list of tuples with the key-value pairs.\n\n    :param d: Dictionary with string keys and integer values.\n    :return: List of tuples sorted by values in descending order.\n    \"\"\"\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)\n\n# Example usage\ninput_dict = {\"apple\": 3, \"banana\": 1, \"cherry\": 2}\nsorted_list = sort_dict_by_values_descending(input_dict)\nprint(sorted_list)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `sentence`. Your task is to implement a function `extract_words(sentence)` that processes this string and returns a list of words that are longer than 5 characters. The function should ignore punctuation and treat all words in a case-insensitive manner.\n\n**Input:**\n- A single string `sentence` (1 \u2264 len(sentence) \u2264 1000) containing English letters, spaces, and punctuation marks.\n\n**Output:**\n- A list of words (in lowercase) that are longer than 5 characters, sorted in the order they appear in the sentence.\n\n**Sample Input:**\n```\n\"Programming is an essential skill in the modern world.\"\n```\n\n**Sample Output:**\n```\n['programming', 'essential', 'modern']\n```",
    "output": "```python\nimport re\n\ndef extract_words(sentence):\n    \"\"\"\n    Extracts words longer than 5 characters from a given sentence, ignoring punctuation and case.\n    \n    :param sentence: A string containing the sentence to process.\n    :return: A list of words longer than 5 characters, in lowercase.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n    long_words = [word for word in words if len(word) > 5]\n    return long_words\n\n# Example usage\nsentence = \"Programming is an essential skill in the modern world.\"\nprint(extract_words(sentence))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to determine if `s` is a palindrome, ignoring case and punctuation. A string is considered a palindrome if it reads the same forwards and backwards.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^5), which may contain uppercase and lowercase letters, digits, and punctuation.\n\n**Output:**\n- Return `True` if `s` is a palindrome, otherwise return `False`.\n\n**Sample Input:**\n```\nA man, a plan, a canal, Panama\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\nHello, World!\n```\n\n**Sample Output:**\n```\nFalse\n```",
    "output": "```python\nimport string\n\ndef is_palindrome(s):\n    \"\"\"\n    Determines if the given string s is a palindrome, ignoring case and punctuation.\n    \n    :param s: The input string to check.\n    :return: True if s is a palindrome, False otherwise.\n    \"\"\"\n    cleaned_string = ''.join(char.lower() for char in s if char not in string.punctuation)\n    return cleaned_string == cleaned_string[::-1]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s` consisting of uppercase and lowercase English letters, digits, and punctuation marks. Your task is to implement a function `remove_vowels(s)` that returns a new string with all vowels (a, e, i, o, u) removed, regardless of their case.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^5).\n\n**Output:**\n- A string with all vowels removed.\n\n**Sample Input:**\n```\n\"Hello, World!\"\n```\n\n**Sample Output:**\n```\n\"Hll, Wrld!\"\n```",
    "output": "```python\ndef remove_vowels(s):\n    \"\"\"\n    Removes all vowels from the input string s, regardless of their case.\n\n    Parameters:\n    s (str): The input string from which vowels need to be removed.\n\n    Returns:\n    str: A new string with all vowels removed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in s if char not in vowels)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Book` class in Python. The class should have the following attributes:\n- `title`: A string representing the title of the book.\n- `author`: A string representing the author of the book.\n- `isbn`: A string representing the ISBN number of the book.\n- `pages`: An integer representing the number of pages in the book.\n- `is_available`: A boolean indicating whether the book is available for borrowing.\n\nThe `is_available` attribute should be accessible as a read-only property.\n\n**Sample Input:**\n```python\nbook = Book(\"1984\", \"George Orwell\", \"978-0451524935\", 328, True)\n```\n\n**Sample Output:**\n```\nTrue\n```",
    "output": "```python\nclass Book:\n    def __init__(self, title, author, isbn, pages, is_available):\n        \"\"\"\n        Initializes a new instance of the Book class.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param isbn: The ISBN number of the book.\n        :param pages: The number of pages in the book.\n        :param is_available: A boolean indicating if the book is available.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.pages = pages\n        self._is_available = is_available\n\n    @property\n    def is_available(self):\n        \"\"\"\n        Returns the availability status of the book.\n\n        :return: A boolean indicating if the book is available.\n        \"\"\"\n        return self._is_available\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function to validate credit card numbers using the Luhn algorithm. Your function should take a string representing a credit card number, which may include spaces for readability, and return `True` if the number is valid according to the Luhn algorithm, or `False` otherwise.\n\n**Input:**\n- A single string `card_number` (1 \u2264 len(card_number) \u2264 20), representing the credit card number. The string may contain spaces.\n\n**Output:**\n- Return `True` if the credit card number is valid, `False` otherwise.\n\n**Sample Input:**\n```\n\"4539 1488 0343 6467\"\n```\n\n**Sample Output:**\n```\nTrue\n```",
    "output": "```python\ndef validate_credit_card_number(card_number):\n    \"\"\"\n    Validates a credit card number using the Luhn algorithm.\n    \n    Parameters:\n    card_number (str): The credit card number as a string, which may include spaces.\n    \n    Returns:\n    bool: True if the credit card number is valid, False otherwise.\n    \"\"\"\n    def luhn_checksum(card_number):\n        \"\"\"\n        Computes the Luhn checksum for a given credit card number.\n        \n        Parameters:\n        card_number (str): The credit card number as a string.\n        \n        Returns:\n        int: The checksum value.\n        \"\"\"\n        def digits_of(n):\n            \"\"\"\n            Converts an integer to a list of its digits.\n            \n            Parameters:\n            n (int): The integer to convert.\n            \n            Returns:\n            list: A list of digits.\n            \"\"\"\n            return [int(d) for d in str(n)]\n        \n        digits = digits_of(card_number)\n        odd_digits = digits[-1::-2]\n        even_digits = digits[-2::-2]\n        checksum = sum(odd_digits)\n        for d in even_digits:\n            checksum += sum(digits_of(d * 2))\n        return checksum % 10\n\n    # Remove spaces from the input\n    card_number = card_number.replace(\" \", \"\")\n    return luhn_checksum(card_number) == 0\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `extract_keywords(text)` that processes a given text to identify and return the top 10 most frequently occurring keywords. Keywords are defined as words that are not part of a predefined list of stop words. The function should ignore case and punctuation. \n\n**Input:**\n- A string `text` (1 \u2264 len(text) \u2264 10,000) containing the text to be analyzed.\n\n**Output:**\n- A list of up to 10 strings, representing the most frequent keywords in the text, sorted by frequency in descending order. If there are ties, the order of the keywords in the output list does not matter.\n\n**Sample Input:**\n```\n\"This is a sample text with several words. This text is just a sample.\"\n```\n\n**Sample Output:**\n```\n['sample', 'text', 'this', 'is', 'a']\n```",
    "output": "```python\nimport re\nfrom collections import Counter\n\ndef extract_keywords(text):\n    \"\"\"\n    Extracts the top 10 most frequent keywords from the given text, ignoring stop words.\n    \n    :param text: A string containing the text to be analyzed.\n    :return: A list of up to 10 most frequent keywords.\n    \"\"\"\n    # Define the list of stop words\n    stop_words = set([\n        \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \n        \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \n        \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \n        \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \n        \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \n        \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \n        \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \n        \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n        \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \n        \"between\", \"into\", \"through\", \"during\", \"before\", \"after\", \n        \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \n        \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \n        \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \n        \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \n        \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \n        \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \n        \"should\", \"now\"\n    ])\n\n    # Remove non-alphabetic characters and make everything lowercase\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n\n    # Remove stop words\n    filtered_words = [word for word in words if word not in stop_words]\n\n    # Get the frequency of each word\n    word_count = Counter(filtered_words)\n\n    # Get the most common words up to 10\n    top_words = word_count.most_common(10)\n\n    # Return only the words, not their counts\n    return [word for word, count in top_words]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of strings. Your task is to write a Python function that sorts these strings in descending order based on their length. The function should handle edge cases such as an empty list or a list with duplicate strings. Your function should be efficient and well-documented.\n\n**Sample Input:**\n```\n[\"apple\", \"banana\", \"pear\", \"kiwi\"]\n```\n\n**Sample Output:**\n```\n['banana', 'apple', 'pear', 'kiwi']\n```",
    "output": "```python\ndef sort_strings_by_length_desc(strings):\n    \"\"\"\n    Sorts a list of strings based on their length in descending order.\n\n    Args:\n        strings (list): A list of strings to be sorted.\n\n    Returns:\n        list: A list of strings sorted by length in descending order.\n    \"\"\"\n    if not strings:\n        return strings\n    \n    return sorted(strings, key=len, reverse=True)\n\n# Test cases\nprint(sort_strings_by_length_desc([\"apple\", \"banana\", \"pear\", \"kiwi\"]))  # ['banana', 'apple', 'pear', 'kiwi']\nprint(sort_strings_by_length_desc([]))  # []\nprint(sort_strings_by_length_desc([\"kiwi\", \"kiwi\", \"kiwi\", \"banana\"]))  # ['banana', 'kiwi', 'kiwi', 'kiwi']\nprint(sort_strings_by_length_desc([\"kiwi\"]))  # ['kiwi']\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a CSV file as input. Your task is to write a Python script that generates a report containing the following statistics for each column in the CSV file:\n\n- The name of the column.\n- The data type of the column (e.g., string, integer, float).\n- The number of unique values in the column.\n- The most frequent value in the column.\n- The frequency of the most frequent value.\n- The percentage of the most frequent value relative to the total number of values in the column (rounded to two decimal places).\n\nThe script should handle cases where the CSV file may contain missing values and should not include these in the statistics.\n\n**Sample Input:**\n```\nname,age,city\nAlice,25,New York\nBob,30,Los Angeles\nCharlie,25,New York\nDavid,30,Chicago\nEve,25,New York\nFrank,,New York\nGrace,30,Los Angeles\n```\n\n**Sample Output:**\n```\nColumn Name           | Data Type    | Number of Unique Values | Most Frequent Value | Frequency of Most Frequent Value | Percentage of Most Frequent Value\n--------------------------------------------------------------------------------------------------------------\nname                  | string       | 7                       | Alice               | 1                                | 14.29\nage                   | integer      | 3                       | 25                  | 3                                | 42.86\ncity                  | string       | 3                       | New York            | 4                                | 57.14\n```",
    "output": "```python\nimport pandas as pd\n\ndef load_csv_data(file_path):\n    \"\"\"\n    Load the CSV file into a pandas DataFrame.\n\n    :param file_path: Path to the CSV file.\n    :return: DataFrame containing the CSV data.\n    \"\"\"\n    return pd.read_csv(file_path)\n\ndef get_column_stats(df):\n    \"\"\"\n    Generate statistics for each column in the DataFrame.\n\n    :param df: DataFrame containing the data.\n    :return: List of dictionaries, each containing statistics for a column.\n    \"\"\"\n    stats = []\n    for column in df.columns:\n        cleaned_col = df[column].dropna()\n        dtype = pd.api.types.infer_dtype(cleaned_col, skipna=True)\n        num_unique = cleaned_col.nunique()\n        mode_values = cleaned_col.mode()\n        freq_most_common = cleaned_col.value_counts()[mode_values.iloc[0]]\n        if len(cleaned_col) == 0:\n            percentage_most_common = 0.0\n        else:\n            percentage_most_common = (freq_most_common / len(cleaned_col)) * 100\n        stats.append({\n            \"Column Name\": column,\n            \"Data Type\": dtype,\n            \"Number of Unique Values\": num_unique,\n            \"Most Frequent Value\": mode_values.iloc[0],\n            \"Frequency of Most Frequent Value\": freq_most_common,\n            \"Percentage of Most Frequent Value\": round(percentage_most_common, 2)\n        })\n    return stats\n\ndef print_stats(stats):\n    \"\"\"\n    Print the statistics in a formatted report.\n\n    :param stats: List of dictionaries containing column statistics.\n    \"\"\"\n    print(\"{0:<25} | {1:<14} | {2:<24} | {3:<20} | {4:<30} | {5:<30}\".format(\n          \"Column Name\", \"Data Type\", \"Number of Unique Values\",\n          \"Most Frequent Value\", \"Frequency of Most Frequent Value\",\n          \"Percentage of Most Frequent Value\"))\n    print(\"-\" * 135)\n    for stat in stats:\n        print(\"{0:<25} | {1:<14} | {2:<24} | {3:<20} | {4:<30} | {5:<30}\".format(\n              stat['Column Name'], stat['Data Type'], stat['Number of Unique Values'],\n              stat['Most Frequent Value'], stat['Frequency of Most Frequent Value'],\n              stat['Percentage of Most Frequent Value']))\n\ndef main():\n    file_path = \"your_file.csv\"  # Change this to your CSV file path\n    df = load_csv_data(file_path)\n    stats = get_column_stats(df)\n    print_stats(stats)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given two lists of strings, `list1` and `list2`. Your task is to implement a function `find_common_prefixes` that identifies all common prefixes between the strings in the two lists. A string from `list1` is considered a prefix of a string from `list2` if it matches the beginning of that string, and vice versa. The function should return a list of all such common prefixes, including duplicates, and should be case-sensitive.\n\n**Input:**\n- Two lists of strings, `list1` and `list2`.\n\n**Output:**\n- A list of strings representing all common prefixes found between the strings in `list1` and `list2`.\n\n**Sample Input:**\n```python\nlist1 = [\"cat\", \"dog\"]\nlist2 = [\"caterpillar\", \"doghouse\", \"catapult\"]\n```\n\n**Sample Output:**\n```python\n['cat', 'dog']\n```",
    "output": "```python\ndef find_common_prefixes(list1, list2):\n    \"\"\"\n    Finds all common prefixes between strings in two lists.\n    \n    Parameters:\n    list1 (List[str]): The first list of strings.\n    list2 (List[str]): The second list of strings.\n    \n    Returns:\n    List[str]: A list of common prefixes found between the strings in list1 and list2.\n    \"\"\"\n    def common_prefix(s1, s2):\n        min_length = min(len(s1), len(s2))\n        for i in range(min_length):\n            if s1[i] != s2[i]:\n                return s1[:i]\n        return s1[:min_length]\n\n    common_prefixes = []\n    for str1 in list1:\n        for str2 in list2:\n            prefix1 = common_prefix(str1, str2)\n            prefix2 = common_prefix(str2, str1)\n            if prefix1:\n                common_prefixes.append(prefix1)\n            if prefix2 and prefix2 != prefix1:\n                common_prefixes.append(prefix2)\n    return common_prefixes\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with developing a simple web server using the Flask framework. Your server must support two endpoints:\n\n1. **Root Endpoint (`/`)**: When this endpoint is accessed, the server should respond with the string \"Hello, World!\".\n2. **Greeting Endpoint (`/greet/<name>`)**: When this endpoint is accessed with a name parameter, the server should respond with a personalized greeting in the format \"Hello, <name>!\".\n\nYour implementation should correctly initialize and configure the Flask application to run on the local development server. Ensure that your server handles the specified endpoints accurately.\n\n**Sample Input and Output:**\n\n- **Input:** Accessing `http://localhost:5000/`\n- **Output:** \"Hello, World!\"\n\n- **Input:** Accessing `http://localhost:5000/greet/Bob`\n- **Output:** \"Hello, Bob!\"",
    "output": "```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    \"\"\"\n    Returns a greeting message \"Hello, World!\" when the root endpoint is accessed.\n    \n    :return: A string \"Hello, World!\"\n    \"\"\"\n    return 'Hello, World!'\n\n@app.route('/greet/<name>')\ndef greet(name):\n    \"\"\"\n    Returns a personalized greeting message \"Hello, <name>!\" when the greet endpoint is accessed with a name parameter.\n    \n    :param name: The name to be included in the greeting message.\n    :return: A string in the format \"Hello, <name>!\"\n    \"\"\"\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a sentence. Your task is to write a function that calculates the average length of the words in the sentence. Words are defined as sequences of alphabetic characters separated by whitespace. Punctuation should be ignored in the calculation.\n\n**Input:**\n- A single string `sentence` (1 \u2264 len(sentence) \u2264 1000).\n\n**Output:**\n- A single floating-point number representing the average word length. If there are no words, return 0.0.\n\n**Sample Input:**\n```\n\"Hello, world! This is a test sentence.\"\n```\n\n**Sample Output:**\n```\n4.0\n```",
    "output": "```python\nimport string\n\ndef average_word_length(sentence: str) -> float:\n    \"\"\"\n    Calculate the average length of words in a given sentence, ignoring punctuation.\n    \n    :param sentence: A string containing the sentence to analyze.\n    :return: The average word length as a float. Returns 0.0 if there are no words.\n    \"\"\"\n    sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n    words = sentence.split()\n    total_length = sum(len(word) for word in words)\n    average_length = total_length / len(words) if words else 0.0\n    return average_length\n\n# Test the function\nsentence = \"Hello, world! This is a test sentence.\"\nprint(average_word_length(sentence))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a Python class `Employee` to manage employee details and salary updates. The class should have the following attributes and methods:\n\n- **Attributes:**\n  - `name`: A string representing the employee's name.\n  - `id`: An integer representing the employee's ID.\n  - `department`: A string representing the department where the employee works.\n  - `salary`: A float representing the employee's salary.\n\n- **Methods:**\n  - `__init__(self, name, id, department, salary)`: Initializes the employee's attributes.\n  - `display_info(self)`: Prints the employee's details in the format:\n    ```\n    Name: <name>\n    ID: <id>\n    Department: <department>\n    Salary: <salary>\n    ```\n  - `update_salary(self, percentage)`: Updates the employee's salary by a given percentage.\n\n**Sample Input/Output:**\n```\nInput:\nemp = Employee(\"John Doe\", 123, \"Engineering\", 75000)\nemp.display_info()\nemp.update_salary(10)\nemp.display_info()\n\nOutput:\nName: John Doe\nID: 123\nDepartment: Engineering\nSalary: 75000\nName: John Doe\nID: 123\nDepartment: Engineering\nSalary: 82500.0\n```",
    "output": "```python\nclass Employee:\n    def __init__(self, name, id, department, salary):\n        \"\"\"\n        Initializes the employee's attributes.\n\n        :param name: str, the employee's name\n        :param id: int, the employee's ID\n        :param department: str, the department where the employee works\n        :param salary: float, the employee's salary\n        \"\"\"\n        self.name = name\n        self.id = id\n        self.department = department\n        self.salary = salary\n\n    def display_info(self):\n        \"\"\"\n        Prints the employee's details.\n        \"\"\"\n        print(f\"Name: {self.name}\")\n        print(f\"ID: {self.id}\")\n        print(f\"Department: {self.department}\")\n        print(f\"Salary: {self.salary}\")\n\n    def update_salary(self, percentage):\n        \"\"\"\n        Updates the employee's salary by a given percentage.\n\n        :param percentage: float, the percentage by which to update the salary\n        \"\"\"\n        self.salary += self.salary * (percentage / 100)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a sentiment analysis function using the `TextBlob` library in Python. Your function should accept a string `text` as input and return a tuple containing the polarity and subjectivity scores. The polarity score should range from -1 (very negative) to 1 (very positive), and the subjectivity score should range from 0 (very objective) to 1 (very subjective).\n\n**Sample Input:**\n```\n\"This movie was fantastic and thoroughly enjoyable, I loved every moment of it!\"\n```\n\n**Sample Output:**\n```\n(0.9, 0.8)\n```",
    "output": "```python\nfrom textblob import TextBlob\n\ndef analyze_sentiment(text):\n    \"\"\"\n    Analyzes the sentiment of the given text and returns the polarity and subjectivity scores.\n\n    Parameters:\n    text (str): The input text to analyze.\n\n    Returns:\n    tuple: A tuple containing the polarity and subjectivity scores.\n    \"\"\"\n    blob = TextBlob(text)\n    polarity = blob.sentiment.polarity\n    subjectivity = blob.sentiment.subjectivity\n    return (polarity, subjectivity)\n\n# Example usage\ntext = \"This movie was fantastic and thoroughly enjoyable, I loved every moment of it!\"\nprint(analyze_sentiment(text))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a context manager for a `DatabaseConnection` class in a software system that manages database interactions. The `DatabaseConnection` class provides methods to connect to and disconnect from a database, execute SQL queries, and fetch results. Your goal is to ensure that the database connection is automatically managed when using the `DatabaseConnection` class within a `with` statement. Specifically, the connection should be established when entering the `with` block and closed when exiting it, regardless of whether an exception occurs within the block.\n\nImplement the `__enter__` and `__exit__` methods to achieve this functionality. The `DatabaseConnection` class is defined as follows:\n\n```python\nclass DatabaseConnection:\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n        self.connection = None\n\n    def connect(self):\n        # Placeholder for connection logic\n        self.connection = \"Connection established\"\n        print(\"Connection established\")\n\n    def disconnect(self):\n        # Placeholder for disconnection logic\n        self.connection = None\n        print(\"Connection closed\")\n\n    def execute(self, query):\n        # Placeholder for executing a query\n        print(f\"Executing query: {query}\")\n\n    def fetch(self):\n        # Placeholder for fetching results\n        print(\"Fetching results\")\n        return \"Results\"\n```\n\n**Sample Input/Output:**\n\nGiven the following usage of the `DatabaseConnection` class:\n\n```python\nwith DatabaseConnection(\"connection_string_here\") as db:\n    db.execute(\"SELECT * FROM table\")\n    results = db.fetch()\n    print(results)\n```\n\n**Expected Output:**\n```\nConnection established\nExecuting query: SELECT * FROM table\nFetching results\nResults\nConnection closed\n```",
    "output": "```python\nclass DatabaseConnection:\n    def __init__(self, connection_string):\n        \"\"\"\n        Initializes the DatabaseConnection with a connection string.\n        \n        :param connection_string: A string representing the database connection details.\n        \"\"\"\n        self.connection_string = connection_string\n        self.connection = None\n\n    def connect(self):\n        \"\"\"\n        Establishes a connection to the database.\n        \"\"\"\n        # Placeholder for connection logic\n        self.connection = \"Connection established\"\n        print(\"Connection established\")\n\n    def disconnect(self):\n        \"\"\"\n        Closes the database connection.\n        \"\"\"\n        # Placeholder for disconnection logic\n        self.connection = None\n        print(\"Connection closed\")\n\n    def execute(self, query):\n        \"\"\"\n        Executes a SQL query.\n        \n        :param query: A string representing the SQL query to be executed.\n        \"\"\"\n        # Placeholder for executing a query\n        print(f\"Executing query: {query}\")\n\n    def fetch(self):\n        \"\"\"\n        Retrieves the result of a SQL query.\n        \n        :return: A string representing the fetched results.\n        \"\"\"\n        # Placeholder for fetching results\n        print(\"Fetching results\")\n        return \"Results\"\n\n    def __enter__(self):\n        \"\"\"\n        Establishes the database connection when entering the with block.\n        \n        :return: The current instance of DatabaseConnection.\n        \"\"\"\n        self.connect()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\n        Closes the database connection when exiting the with block.\n        \n        :param exc_type: The type of exception raised, if any.\n        :param exc_value: The instance of the exception raised, if any.\n        :param traceback: The traceback object, if any.\n        \"\"\"\n        self.disconnect()\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a CSV file named \"data.csv\" with an unknown number of columns. Each column may contain a mix of numerical and string data. Your task is to write a Python script that reads this file and computes the average of each column that contains only numerical data. For columns with non-numeric data, the average should not be computed. The averages should be printed to the console in the format \"Average of column 'ColumnName': AverageValue\". If a column contains no numeric data, the average should be represented as 'nan'.\n\n**Sample Input (data.csv):**\n```\nName,Age,Height,Weight,Occupation\nAlice,25,165.5,55,Engineer\nBob,30,180,75,Doctor\nCharlie,22,175.2,68,Artist\nDavid,28,178,72,Engineer\nEve,24,163,54,Doctor\nFrank,35,190,85,Artist\nGrace,29,168,60,Engineer\nHannah,27,172,65,Doctor\nIan,31,185,80,Artist\nJack,26,170,67,Engineer\n```\n\n**Sample Output:**\n```\nAverage of column 'Age': 28.0\nAverage of column 'Height': 174.6\nAverage of column 'Weight': 68.0\n```",
    "output": "```python\nimport csv\n\ndef calculate_column_averages(file_name):\n    \"\"\"\n    Reads a CSV file and calculates the average of each numerical column.\n    \n    Parameters:\n    file_name (str): The name of the CSV file to read.\n    \n    Returns:\n    None: Prints the average of each numerical column to the console.\n    \"\"\"\n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        header = next(reader)  # Read the first line as header\n        \n        column_sums = {header[i]: 0 for i in range(len(header))}\n        column_counts = {header[i]: 0 for i in range(len(header))}\n        \n        for row in reader:\n            for i, value in enumerate(row):\n                try:\n                    num = float(value)\n                    column_sums[header[i]] += num\n                    column_counts[header[i]] += 1\n                except ValueError:\n                    continue\n\n        averages = {header[i]: column_sums[header[i]] / column_counts[header[i]] \n                    if column_counts[header[i]] > 0 else float('nan') \n                    for i in range(len(header))}\n\n        for col, avg in averages.items():\n            print(f\"Average of column '{col}': {avg}\")\n\ncalculate_column_averages(\"data.csv\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `text`. Your task is to implement a function `extract_unique_words` that processes this string and returns a set of unique words, excluding common stop words and punctuation. The function should convert all words to lowercase before processing. The stop words to be ignored are: \"the\", \"and\", \"or\", \"is\", \"in\", \"a\", \"of\", \"to\", \"that\", \"it\", \"was\", \"best\", \"worst\", \"times\", \"for\", \"on\", \"with\", \"as\", \"by\", \"at\".\n\n**Input:**\n- A single string `text` (1 \u2264 len(text) \u2264 1000).\n\n**Output:**\n- A set of unique words, excluding the specified stop words and punctuation, in lowercase.\n\n**Sample Input:**\n```\n\"The quick brown fox jumps over the lazy dog. It was the best of times, it was the worst of times.\"\n```\n\n**Sample Output:**\n```\n{'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'best', 'worst', 'times'}\n```",
    "output": "```python\nimport string\n\ndef extract_unique_words(text):\n    \"\"\"\n    Processes a given string to return a set of unique words, excluding common stop words and punctuation.\n    \n    Parameters:\n    text (str): The input string to process.\n    \n    Returns:\n    set: A set of unique words in lowercase, excluding specified stop words and punctuation.\n    \"\"\"\n    # Define a set of common stop words to ignore\n    stop_words = set([\n        \"the\", \"and\", \"or\", \"is\", \"in\", \"a\", \"of\", \"to\", \"that\", \"it\",\n        \"was\", \"best\", \"worst\", \"times\", \"for\", \"on\", \"with\", \"as\", \"by\", \"at\"\n    ])\n    \n    # Convert the text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation using str.translate and str.maketrans\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Use a set comprehension to extract unique words, ignoring stop words\n    unique_words = {word for word in words if word not in stop_words}\n    \n    return unique_words\n\n# Example usage\ntext = \"The quick brown fox jumps over the lazy dog. It was the best of times, it was the worst of times.\"\nprint(extract_unique_words(text))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of dictionaries and a key. Your task is to sort the list of dictionaries based on the values associated with the given key. If a dictionary does not contain the key, treat it as if the key had a value of `None`. Implement a function `sort_dicts_by_key` that takes a list of dictionaries and a key as input and returns the sorted list.\n\n**Input:**\n- A list of dictionaries `dict_list`.\n- A string `sort_key` representing the key to sort by.\n\n**Output:**\n- A list of dictionaries sorted by the specified key.\n\n**Sample Input:**\n```python\ndata = [\n    {'name': 'Alice', 'age': 25},\n    {'name': 'Bob'},\n    {'name': 'Charlie', 'age': 20},\n    {'name': 'David', 'age': None},\n    {'name': 'Eve', 'age': 10}\n]\nsort_key = 'age'\n```\n\n**Sample Output:**\n```python\n[\n    {'name': 'Eve', 'age': 10},\n    {'name': 'Charlie', 'age': 20},\n    {'name': 'Alice', 'age': 25},\n    {'name': 'David', 'age': None},\n    {'name': 'Bob'}\n]\n```",
    "output": "```python\ndef sort_dicts_by_key(dict_list, sort_key):\n    \"\"\"\n    Sorts a list of dictionaries based on a specified key.\n    \n    Parameters:\n    dict_list (list): List of dictionaries to sort.\n    sort_key (str): The key in the dictionaries to sort the list by.\n    \n    Returns:\n    list: The sorted list of dictionaries.\n    \"\"\"\n    return sorted(dict_list, key=lambda x: x.get(sort_key, None))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `calculate_roc_auc_score` that computes the Area Under the Receiver Operating Characteristic Curve (AUC-ROC) given true binary labels and predicted probabilities. Your function should utilize the `roc_auc_score` method from the `sklearn.metrics` library. Handle edge cases where all predictions are either 0 or 1 by returning a specific message indicating that the AUC cannot be computed in such scenarios.\n\n**Input:**\n- `y_true`: A list or array of true binary labels (0 or 1).\n- `y_scores`: A list or array of predicted probabilities for the positive class.\n\n**Output:**\n- A float representing the AUC score if it can be computed.\n- A string message \"Cannot compute AUC: all predicted probabilities are the same.\" if all predictions are identical.\n- A string message starting with \"An error occurred: \" if any other error occurs.\n\n**Sample Input:**\n```python\ny_true = [0, 0, 1, 1]\ny_scores = [0.1, 0.4, 0.35, 0.8]\n```\n\n**Sample Output:**\n```python\n0.75\n```",
    "output": "```python\nfrom sklearn.metrics import roc_auc_score\n\ndef calculate_roc_auc_score(y_true, y_scores):\n    \"\"\"\n    Calculate the Area Under the Receiver Operating Characteristic Curve (AUC-ROC)\n    for given true binary labels and predicted probabilities.\n    \n    Args:\n    y_true (array-like): True binary labels.\n    y_scores (array-like): Target scores, can either be probability estimates of the positive class,\n                           confidence values, or binary decisions.\n    \n    Returns:\n    float: AUC score if it can be computed, otherwise a string message.\n    \"\"\"\n    if len(set(y_scores)) == 1:\n        return \"Cannot compute AUC: all predicted probabilities are the same.\"\n    \n    try:\n        auc_score = roc_auc_score(y_true, y_scores)\n        return auc_score\n    except ValueError as e:\n        return f\"An error occurred: {e}\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with processing a collection of text documents, where each document is represented as a string. Your goal is to identify the most frequently occurring word in each document. In the event of a tie, the word that appears first in the document should be selected. The solution should be case-insensitive and should ignore punctuation. \n\n**Input:**\n- A single string `doc` representing the text document.\n\n**Output:**\n- A string representing the most frequent word in the document.\n\n**Constraints:**\n- The document may contain punctuation and mixed case letters.\n- Words are separated by spaces.\n\n**Sample Input:**\n```\n\"Hello, hello! How are you?\"\n```\n\n**Sample Output:**\n```\n\"hello\"\n```",
    "output": "```python\nimport re\nfrom collections import Counter\n\ndef most_frequent_word(doc):\n    \"\"\"\n    Returns the most frequent word in a given text document.\n    \n    Parameters:\n    doc (str): The text document as a string.\n    \n    Returns:\n    str: The most frequent word in the document.\n    \"\"\"\n    # Remove punctuation and make the string lowercase\n    cleaned_doc = re.sub(r'[^\\w\\s]', '', doc).lower()\n    \n    # Split the document into words\n    words = cleaned_doc.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Find the most frequent word(s) and return the first one\n    max_count = max(word_counts.values())\n    for word in words:\n        if word_counts[word] == max_count:\n            return word\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a function `json_to_dict` that takes a JSON string as input and returns a Python dictionary. If the input string is not a valid JSON format, the function should return an empty dictionary. Your function should handle any exceptions that may arise from invalid JSON input.\n\n**Sample Input 1:**\n```\n'{\"name\": \"John\", \"age\": 30}'\n```\n**Sample Output 1:**\n```\n{'name': 'John', 'age': 30}\n```\n\n**Sample Input 2:**\n```\n'invalid json'\n```\n**Sample Output 2:**\n```\n{}\n```",
    "output": "```python\nimport json\n\ndef json_to_dict(json_string):\n    \"\"\"\n    Converts a JSON string into a dictionary. Returns an empty dictionary if the input is not valid JSON.\n\n    :param json_string: A string containing JSON data.\n    :return: A dictionary representation of the JSON string, or an empty dictionary if invalid.\n    \"\"\"\n    try:\n        return json.loads(json_string)\n    except (json.JSONDecodeError, TypeError):\n        return {}\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of strings, `words`, where each string consists solely of lowercase English letters. Your objective is to find the maximum number of distinct vowels present in any single string from the list. Implement the function `max_unique_vowels(words)` that accepts a list of strings and returns an integer representing the highest count of unique vowels found in any string.\n\n**Sample Input:**\n```python\nwords = [\"hello\", \"world\", \"algorithm\", \"education\"]\n```\n\n**Sample Output:**\n```\n3\n```\n\n**Explanation:**\nThe string \"education\" contains the vowels 'a', 'e', 'i', 'o', and 'u', making it the string with the maximum number of unique vowels.",
    "output": "```python\ndef max_unique_vowels(words):\n    \"\"\"\n    Determine the maximum number of unique vowels in a single string from the list.\n\n    :param words: List of strings, where each string contains only lowercase letters.\n    :return: Integer representing the maximum number of unique vowels in any single string.\n    \"\"\"\n    vowels = set('aeiou')\n    max_count = 0\n    \n    for word in words:\n        unique_vowels = set(word) & vowels\n        max_count = max(max_count, len(unique_vowels))\n    \n    return max_count\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to construct the shortest palindrome by appending the minimum number of characters to the end of `s`. A palindrome is a string that reads the same forwards and backwards.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 1000), consisting of lowercase English letters.\n\n**Output:**\n- A single string, the shortest palindrome that can be formed by appending characters to the end of `s`.\n\n**Sample Input:**\n```\nrace\n```\n\n**Sample Output:**\n```\nracecar\n```",
    "output": "```python\ndef generate_palindrome(s: str) -> str:\n    \"\"\"\n    Generate the shortest palindrome by appending the minimum number of characters to the end of the input string.\n\n    :param s: The input string.\n    :return: The shortest palindrome formed by appending characters to the end of the input string.\n    \"\"\"\n    def is_palindrome(check_str: str) -> bool:\n        \"\"\"\n        Check if a given string is a palindrome.\n\n        :param check_str: The string to check.\n        :return: True if the string is a palindrome, False otherwise.\n        \"\"\"\n        return check_str == check_str[::-1]\n    \n    if is_palindrome(s):\n        return s\n    \n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    \n    return s + s[::-1]\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dataset represented as a list of dictionaries, where each dictionary contains numerical features and a binary target value (0 or 1). Your task is to implement a function `classify_data` that trains a machine learning model on this dataset and returns the accuracy of the model on the same dataset. Use any machine learning library of your choice. The function should handle datasets with any number of numerical features.\n\n**Input:**\n- `dataset`: A list of dictionaries, where each dictionary represents a data point with numerical features and a target value.\n- `target_column`: A string representing the name of the target column in the dataset.\n\n**Output:**\n- A float representing the accuracy of the trained model on the dataset.\n\n**Sample Input:**\n```python\ndataset = [{'feature1': 0.1, 'feature2': 0.2, 'target': 0}, \n           {'feature1': 0.3, 'feature2': 0.4, 'target': 1}, \n           {'feature1': 0.5, 'feature2': 0.6, 'target': 0}, \n           {'feature1': 0.7, 'feature2': 0.8, 'target': 1}]\ntarget_column = 'target'\n```\n\n**Sample Output:**\n```\nModel accuracy: 0.75\n```",
    "output": "```python\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\ndef classify_data(dataset, target_column):\n    \"\"\"\n    Trains a machine learning model on the given dataset and returns the accuracy of the model.\n    \n    Parameters:\n    - dataset: List of dictionaries, where each dictionary contains numerical features and a target value.\n    - target_column: String, the name of the target column in the dataset.\n    \n    Returns:\n    - Float, the accuracy of the trained model on the dataset.\n    \"\"\"\n    # Extract features and target from the dataset\n    X = [[data[feature] for feature in data if feature != target_column] for data in dataset]\n    y = [data[target_column] for data in dataset]\n    \n    # Split the dataset into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n    \n    # Initialize the classifier\n    classifier = RandomForestClassifier(random_state=42)\n    \n    # Train the classifier\n    classifier.fit(X_train, y_train)\n    \n    # Make predictions on the test set\n    y_pred = classifier.predict(X_test)\n    \n    # Calculate the accuracy of the model\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    return accuracy\n\n# Example usage\ndataset = [{'feature1': 0.1, 'feature2': 0.2, 'target': 0}, \n           {'feature1': 0.3, 'feature2': 0.4, 'target': 1}, \n           {'feature1': 0.5, 'feature2': 0.6, 'target': 0}, \n           {'feature1': 0.7, 'feature2': 0.8, 'target': 1}]\ntarget_column = 'target'\naccuracy = classify_data(dataset, target_column)\nprint(f\"Model accuracy: {accuracy}\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a class `Employee` that models an employee's details and operations related to their salary. The class should have the following attributes and methods:\n\n- **Attributes:**\n  - `id`: An identifier for the employee.\n  - `name`: The name of the employee.\n  - `department`: The department where the employee works.\n  - `salary`: The salary of the employee.\n\n- **Methods:**\n  - `give_raise(raise_percentage)`: A method that increases the employee's salary by a given percentage.\n  - `from_string(employee_string)`: A static method that creates an `Employee` object from a string formatted as `\"id,name,department,salary\"`.\n\n**Input:**\n- A string in the format `\"id,name,department,salary\"`.\n- A percentage value for the raise.\n\n**Output:**\n- The updated salary after applying the raise.\n\n**Sample Input:**\n```\n\"1,John Doe,Finance,50000\"\n10\n```\n\n**Sample Output:**\n```\n55000.0\n```",
    "output": "```python\nclass Employee:\n    def __init__(self, id, name, department, salary):\n        \"\"\"\n        Initialize an Employee object with the given attributes.\n\n        :param id: Identifier for the employee.\n        :param name: Name of the employee.\n        :param department: Department where the employee works.\n        :param salary: Salary of the employee.\n        \"\"\"\n        self.id = id\n        self.name = name\n        self.department = department\n        self.salary = salary\n\n    def give_raise(self, raise_percentage):\n        \"\"\"\n        Increase the employee's salary by a given percentage.\n\n        :param raise_percentage: Percentage by which to increase the salary.\n        \"\"\"\n        self.salary += (self.salary * raise_percentage) / 100\n\n    @staticmethod\n    def from_string(employee_string):\n        \"\"\"\n        Create an Employee object from a string formatted as 'id,name,department,salary'.\n\n        :param employee_string: String containing employee details.\n        :return: An Employee object.\n        \"\"\"\n        id, name, department, salary = employee_string.split(',')\n        return Employee(id, name, department, float(salary))\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to implement a function `count_words` that processes this string and returns a dictionary containing the frequency of each word. Words are defined as sequences of alphabetic characters and should be treated as case-insensitive. All non-alphabetic characters should be ignored.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^5), which may contain uppercase and lowercase letters, digits, punctuation, and whitespace.\n\n**Output:**\n- A dictionary where keys are words (in lowercase) and values are the counts of these words in the string.\n\n**Sample Input:**\n```\n\"Hello, world! Hello, Universe.\"\n```\n\n**Sample Output:**\n```\n{'hello': 2, 'world': 1, 'universe': 1}\n```",
    "output": "```python\ndef count_words(input_string):\n    \"\"\"\n    Counts the frequency of each word in the input string, treating words as case-insensitive\n    and ignoring all non-alphabetic characters.\n\n    :param input_string: A string containing words and possibly other characters.\n    :return: A dictionary with words as keys and their counts as values.\n    \"\"\"\n    input_string = input_string.lower()\n    input_string = ''.join(char if char.isalpha() else ' ' for char in input_string)\n    words = input_string.split()\n    word_counts = {}\n    \n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    return word_counts\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s`. Your task is to write a function `remove_special_characters` that processes this string and returns a new string containing only the alphanumeric characters from the original string. The function should handle edge cases such as an empty string or a string consisting solely of special characters. You are not allowed to use regular expressions for this task.\n\n**Input:**\n- A single string `s` (0 \u2264 |s| \u2264 10^5), where |s| denotes the length of the string.\n\n**Output:**\n- A string containing only the alphanumeric characters from the input string `s`.\n\n**Sample Input:**\n```\n\"Hello, World! @2023 #Python\"\n```\n\n**Sample Output:**\n```\n\"HelloWorld2023Python\"\n```",
    "output": "```python\ndef remove_special_characters(input_string):\n    \"\"\"\n    Removes all special characters from the input string, returning only alphanumeric characters.\n    \n    :param input_string: The string from which to remove special characters.\n    :return: A string containing only alphanumeric characters from the input string.\n    \"\"\"\n    alphanumeric = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    result = \"\"\n    \n    for char in input_string:\n        if char in alphanumeric:\n            result += char\n            \n    return result\n\n# Test the function\ntest_string = \"Hello, World! @2023 #Python\"\nprint(remove_special_characters(test_string))  # Output: \"HelloWorld2023Python\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a `Car` class in Python. The class should have the following attributes:\n- `make`: A string representing the manufacturer of the car.\n- `model`: A string representing the model of the car.\n- `year`: An integer representing the year the car was manufactured.\n- `speed`: An integer representing the current speed of the car, initialized to 0 km/h.\n\nThe class should include the following methods:\n- `accelerate(increment)`: Increases the car's speed by the specified `increment` value, but does not exceed a maximum speed of 150 km/h. If `increment` is negative, raise a `ValueError`.\n- `brake()`: Instantly reduces the car's speed to 0 km/h.\n- `display_current_speed()`: Returns a string indicating the current speed of the car in the format \"Current speed: X km/h\".\n\n**Sample Input/Output:**\n- Input: `my_car = Car(\"Toyota\", \"Corolla\", 2021); my_car.display_current_speed()`\n- Output: `\"Current speed: 0 km/h\"`\n- Input: `my_car.accelerate(50); my_car.display_current_speed()`\n- Output: `\"Current speed: 50 km/h\"`\n- Input: `my_car.brake(); my_car.display_current_speed()`\n- Output: `\"Current speed: 0 km/h\"`",
    "output": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        \"\"\"\n        Initializes a new Car instance with the given make, model, and year.\n        The initial speed is set to 0 km/h.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = 0  # initial speed is 0 km/h\n        self.max_speed = 150  # maximum speed is 150 km/h\n\n    def accelerate(self, increment):\n        \"\"\"\n        Increases the car's speed by the specified increment value, but does not exceed the maximum speed.\n        Raises a ValueError if the increment is negative.\n        \"\"\"\n        if increment < 0:\n            raise ValueError(\"Acceleration increment must be positive.\")\n        self.speed = min(self.speed + increment, self.max_speed)\n\n    def brake(self):\n        \"\"\"\n        Instantly reduces the car's speed to 0 km/h.\n        \"\"\"\n        self.speed = 0\n\n    def display_current_speed(self):\n        \"\"\"\n        Returns a string indicating the current speed of the car in the format \"Current speed: X km/h\".\n        \"\"\"\n        return f\"Current speed: {self.speed} km/h\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a string `s` representing a Roman numeral. Your task is to write a function that converts this Roman numeral to its corresponding integer value. Assume that the input string is a valid Roman numeral and the integer value is within the range of 1 to 3999.\n\n**Sample Input:**\n```\n\"MCMXCIV\"\n```\n\n**Sample Output:**\n```\n1994\n```",
    "output": "```python\ndef roman_to_int(s: str) -> int:\n    \"\"\"\n    Convert a Roman numeral string to an integer.\n    \n    :param s: A string representing a Roman numeral.\n    :return: The integer value corresponding to the Roman numeral.\n    \"\"\"\n    roman_to_val = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    integer_value = 0\n    prev_value = 0\n    for char in reversed(s):\n        curr_value = roman_to_val[char]\n        if curr_value < prev_value:\n            integer_value -= curr_value\n        else:\n            integer_value += curr_value\n        prev_value = curr_value\n    return integer_value\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with writing a Python function that utilizes the `requests` library to fetch the HTML content from a specified URL and save it to a local file named `output.html`. Your function should handle HTTP responses appropriately and print a success message if the content is saved successfully, or an error message if the request fails.\n\n**Function Signature:**\n```python\ndef fetch_and_save(url: str, file_name: str = 'output.html') -> None:\n```\n\n**Input:**\n- A string `url` representing the URL from which to fetch the HTML content.\n- An optional string `file_name` representing the name of the file to save the content to. Defaults to `'output.html'`.\n\n**Output:**\n- The function should print a message indicating whether the content was saved successfully or if the request failed.\n\n**Sample Input:**\n```python\nfetch_and_save('https://www.example.com')\n```\n\n**Sample Output:**\n```\nContent has been saved to output.html.\n```\n\n**Sample Input:**\n```python\nfetch_and_save('https://www.nonexistentwebsite123.com')\n```\n\n**Sample Output:**\n```\nFailed to retrieve content. Status code: 404\n```",
    "output": "```python\nimport requests\n\ndef fetch_and_save(url: str, file_name: str = 'output.html') -> None:\n    \"\"\"\n    Fetches the HTML content from the specified URL and saves it to a local file.\n\n    Parameters:\n    url (str): The URL from which to fetch the HTML content.\n    file_name (str): The name of the file to save the content to. Defaults to 'output.html'.\n\n    Returns:\n    None\n    \"\"\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        with open(file_name, 'w', encoding='utf-8') as file:\n            file.write(response.text)\n        print(f\"Content has been saved to {file_name}.\")\n    else:\n        print(f\"Failed to retrieve content. Status code: {response.status_code}\")\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with implementing a Python class `Employee` to manage employee data and salary adjustments. The class should support the following functionalities:\n\n1. Initialize an employee with a first name, last name, employee ID, and salary.\n2. Apply a raise to the employee's salary. The raise can be a custom percentage or a default class attribute percentage.\n3. Provide a string representation of the employee that includes their full name and current salary formatted to two decimal places.\n\n**Input:**\n- The `Employee` class will be instantiated with the following parameters:\n  - `first_name`: A string representing the employee's first name.\n  - `last_name`: A string representing the employee's last name.\n  - `employee_id`: An integer representing the employee's ID.\n  - `salary`: A float representing the employee's salary.\n\n**Output:**\n- The `__str__` method should return a string in the format: `\"Employee: <first_name> <last_name>, Salary: <salary:.2f>\"`.\n\n**Sample Usage:**\n```python\nemp = Employee(\"John\", \"Doe\", 12345, 50000)\nprint(emp)  # Output: Employee: John Doe, Salary: 50000.00\nemp.apply_raise()\nprint(emp)  # Output: Employee: John Doe, Salary: 52500.00\nemp.apply_raise(0.10)\nprint(emp)  # Output: Employee: John Doe, Salary: 57750.00\n```",
    "output": "```python\nclass Employee:\n    raise_amount = 0.05  # class attribute for raise amount\n\n    def __init__(self, first_name, last_name, employee_id, salary):\n        \"\"\"\n        Initialize an employee with the given first name, last name, employee ID, and salary.\n\n        :param first_name: str, the first name of the employee\n        :param last_name: str, the last name of the employee\n        :param employee_id: int, the ID of the employee\n        :param salary: float, the salary of the employee\n        \"\"\"\n        self.first_name = first_name\n        self.last_name = last_name\n        self.employee_id = employee_id\n        self.salary = salary\n\n    def apply_raise(self, percentage=None):\n        \"\"\"\n        Apply a raise to the employee's salary. If a percentage is provided, use it; otherwise, use the class attribute raise_amount.\n\n        :param percentage: float, optional, the raise percentage to apply\n        \"\"\"\n        raise_percentage = percentage if percentage is not None else self.raise_amount\n        self.salary += self.salary * raise_percentage\n\n    def __str__(self):\n        \"\"\"\n        Return a string representation of the employee including their full name and current salary formatted to two decimal places.\n\n        :return: str, the string representation of the employee\n        \"\"\"\n        return f\"Employee: {self.first_name} {self.last_name}, Salary: {self.salary:.2f}\"\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a dataset of online shopping transactions. Each transaction is represented as a dictionary with the following keys: `user_id`, `product_id`, `price`, and `date`. Your task is to implement a function `top_buyers(transactions, n)` that identifies the top `n` users with the highest total purchase amount. In the event of a tie in total purchase amount, users should be sorted by their `user_id` in ascending order. Assume that the `transactions` list is non-empty and `n` is a positive integer.\n\n**Input:**\n- A list of dictionaries `transactions`, where each dictionary contains:\n  - `user_id`: an integer representing the user's ID.\n  - `product_id`: an integer representing the product's ID.\n  - `price`: a float representing the price of the product.\n  - `date`: a string representing the date of the purchase.\n- An integer `n` representing the number of top buyers to return.\n\n**Output:**\n- A list of integers representing the `user_id`s of the top `n` buyers, sorted by total purchase amount in descending order and by `user_id` in ascending order in case of ties.\n\n**Sample Input:**\n```python\ntransactions = [\n    {\"user_id\": 1, \"product_id\": 101, \"price\": 19.99, \"date\": \"2022-01-01\"},\n    {\"user_id\": 1, \"product_id\": 102, \"price\": 9.99, \"date\": \"2022-01-02\"},\n    {\"user_id\": 2, \"product_id\": 103, \"price\": 29.99, \"date\": \"2022-01-03\"},\n    {\"user_id\": 3, \"product_id\": 104, \"price\": 14.99, \"date\": \"2022-01-04\"},\n    {\"user_id\": 2, \"product_id\": 105, \"price\": 19.99, \"date\": \"2022-01-05\"}\n]\nn = 2\n```\n\n**Sample Output:**\n```python\n[2, 1]\n```",
    "output": "```python\ndef top_buyers(transactions, n):\n    \"\"\"\n    Identifies the top n users with the highest total purchase amount.\n    \n    Parameters:\n    transactions (list of dict): A list of transactions where each transaction is a dictionary\n                                 with keys 'user_id', 'product_id', 'price', and 'date'.\n    n (int): The number of top buyers to return.\n    \n    Returns:\n    list of int: A list of user_ids of the top n buyers, sorted by total purchase amount in\n                 descending order and by user_id in ascending order in case of ties.\n    \"\"\"\n    from collections import defaultdict\n    \n    user_total_spend = defaultdict(float)\n    \n    for transaction in transactions:\n        user_total_spend[transaction['user_id']] += transaction['price']\n    \n    sorted_users = sorted(user_total_spend.items(), key=lambda x: (-x[1], x[0]))\n    \n    top_n_users = [user_id for user_id, _ in sorted_users[:n]]\n    \n    return top_n_users\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are tasked with processing a massive CSV dataset that cannot be fully loaded into memory. Your goal is to compute the average value of a specified column. Implement a function `calculate_column_average` that reads the dataset in manageable chunks. The function should accept the file path to the CSV, the column name for which the average is required, and the chunk size. It should return the average value of the specified column. If the column contains no valid data, the function should return `None`.\n\n**Input:**\n- A CSV file path (`file_path`), a string.\n- A column name (`column_name`), a string.\n- A chunk size (`chunk_size`), an integer.\n\n**Output:**\n- A float representing the average value of the specified column, or `None` if no valid data is present.\n\n**Sample Input:**\n- File Path: `\"data/large_dataset.csv\"`\n- Column Name: `\"price\"`\n- Chunk Size: `100000`\n\n**Sample Output:**\n- `150.75`",
    "output": "```python\nimport pandas as pd\n\ndef calculate_column_average(file_path, column_name, chunk_size):\n    \"\"\"\n    Calculate the average of a specific column in a large CSV file read in chunks.\n\n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column for which the average needs to be calculated.\n    chunk_size (int): The number of rows per chunk.\n\n    Returns:\n    float: The average value of the specified column, or None if no valid data is present.\n    \"\"\"\n    chunk_iter = pd.read_csv(file_path, chunksize=chunk_size)\n    total_sum = 0\n    total_count = 0\n    \n    for chunk in chunk_iter:\n        column_data = chunk[column_name]\n        total_sum += column_data.sum()\n        total_count += len(column_data.dropna())\n\n    average_value = total_sum / total_count if total_count != 0 else None\n    return average_value\n\n# Example usage:\n# average_value = calculate_column_average(\"data/large_dataset.csv\", \"price\", 100000)\n# print(\"Average Value:\", average_value)\n```",
    "_category": "string_pattern"
  },
  {
    "input": "You are given a list of integers `nums` and an integer `k`. Your task is to partition the list into `k` non-empty contiguous subarrays such that the maximum pair difference within any subarray is minimized. The pair difference of a subarray is defined as the difference between the maximum and minimum values in that subarray. Return the minimum possible maximum pair difference across all subarrays.\n\n**Constraints:**\n- `1 <= len(nums) <= 10^5`\n- `1 <= k <= len(nums)`\n- `-10^9 <= nums[i] <= 10^9`\n\n**Sample Input:**\n```\nnums = [1, 4, 7, 10]\nk = 2\n```\n\n**Sample Output:**\n```\n6\n```",
    "output": "```python\ndef minimize_max_pair_difference(nums, k):\n    \"\"\"\n    Partitions the list `nums` into `k` subarrays to minimize the maximum pair difference within any subarray.\n    \n    :param nums: List of integers to be partitioned.\n    :param k: Number of subarrays to partition the list into.\n    :return: Minimum possible maximum pair difference across all subarrays.\n    \"\"\"\n    def can_partition(max_pair_diff):\n        subarrays = 1\n        last_position = 0\n        for i in range(1, len(nums)):\n            if nums[i] - nums[last_position] > max_pair_diff:\n                subarrays += 1\n                last_position = i\n            if subarrays > k:\n                return False\n        return True\n\n    nums.sort()\n    left, right = 0, nums[-1] - nums[0]\n    while left < right:\n        mid = (left + right) // 2\n        if can_partition(mid):\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left\n\n# Test the function with the given input\nnums = [1, 4, 7, 10]\nk = 2\nprint(minimize_max_pair_difference(nums, k))  # Expected output: 6\n```",
    "_category": "array_numeric"
  }
]